
vrs_zadanie8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08007298  08007298  00017298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007738  08007738  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007738  08007738  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007738  08007738  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000088  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f09  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea1  00000000  00000000  0002a115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  0002c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018128  00000000  00000000  0002d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000769a  00000000  00000000  00045158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c0ac  00000000  00000000  0004c7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c889e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000366c  00000000  00000000  000c88f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800727c 	.word	0x0800727c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800727c 	.word	0x0800727c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_write_byte>:
static float H1rh = 0;
static float H0T0out = 0;
static float H1T0out = 0;

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <hts221_write_byte+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79f9      	ldrb	r1, [r7, #7]
 8000c5e:	79b8      	ldrb	r0, [r7, #6]
 8000c60:	2300      	movs	r3, #0
 8000c62:	f000 fe79 	bl	8001958 <i2c_master_write>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <hts221_read_byte>:

uint8_t  hts221_read_byte(uint8_t reg_addr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <hts221_read_byte+0x30>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	f107 000f 	add.w	r0, r7, #15
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	9100      	str	r1, [sp, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	f000 fea5 	bl	80019e0 <i2c_master_read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <hts221_init>:

uint8_t hts221_init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	77fb      	strb	r3, [r7, #31]

	LL_mDelay(100);
 8000cb2:	2064      	movs	r0, #100	; 0x64
 8000cb4:	f002 fc30 	bl	8003518 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_REG_WHO_AM_I_ADDR);
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff ffdb 	bl	8000c74 <hts221_read_byte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	77bb      	strb	r3, [r7, #30]

	if(val == HTS221_WHO_AM_I_VALUE)
 8000cc2:	7fbb      	ldrb	r3, [r7, #30]
 8000cc4:	2bbc      	cmp	r3, #188	; 0xbc
 8000cc6:	d102      	bne.n	8000cce <hts221_init+0x26>
	{
		status = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	77fb      	strb	r3, [r7, #31]
 8000ccc:	e001      	b.n	8000cd2 <hts221_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
		status = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]

	}
	//nastavenie registrov
	uint8_t ctrl1 = 0b10000011; //PD active mode, reserved, BDU cont update, 12.5Hz rate
 8000cd2:	2383      	movs	r3, #131	; 0x83
 8000cd4:	777b      	strb	r3, [r7, #29]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8000cd6:	7f7b      	ldrb	r3, [r7, #29]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2020      	movs	r0, #32
 8000cdc:	f7ff ffb4 	bl	8000c48 <hts221_write_byte>



	//nastavenie kalibracnych registrov
	uint8_t H0rHx2 = hts221_read_byte(HTS221_ADDRESS_H0rHx2);
 8000ce0:	2030      	movs	r0, #48	; 0x30
 8000ce2:	f7ff ffc7 	bl	8000c74 <hts221_read_byte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	773b      	strb	r3, [r7, #28]
	uint8_t H1rHx2 = hts221_read_byte(HTS221_ADDRESS_H1rHx2);
 8000cea:	2031      	movs	r0, #49	; 0x31
 8000cec:	f7ff ffc2 	bl	8000c74 <hts221_read_byte>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	76fb      	strb	r3, [r7, #27]



	uint8_t T0degCx8 = hts221_read_byte(HTS221_ADDRESS_T0degCx8);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f7ff ffbd 	bl	8000c74 <hts221_read_byte>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	76bb      	strb	r3, [r7, #26]
	uint8_t T1degCx8 = hts221_read_byte(HTS221_ADDRESS_T1degCx8);
 8000cfe:	2033      	movs	r0, #51	; 0x33
 8000d00:	f7ff ffb8 	bl	8000c74 <hts221_read_byte>
 8000d04:	4603      	mov	r3, r0
 8000d06:	767b      	strb	r3, [r7, #25]

	uint8_t T1T0MSB = hts221_read_byte(HTS221_ADDRESS_T1T0MSB);
 8000d08:	2035      	movs	r0, #53	; 0x35
 8000d0a:	f7ff ffb3 	bl	8000c74 <hts221_read_byte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	763b      	strb	r3, [r7, #24]

	uint16_t T0degCx8MSB =  T1T0MSB & 0x3;
 8000d12:	7e3b      	ldrb	r3, [r7, #24]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	82fb      	strh	r3, [r7, #22]
	uint16_t T1degCx8MSB =  (T1T0MSB & (0x3 << 2)) >> 2;
 8000d1c:	7e3b      	ldrb	r3, [r7, #24]
 8000d1e:	109b      	asrs	r3, r3, #2
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	82bb      	strh	r3, [r7, #20]

	int16_t T0degCx8_final = T0degCx8  | (T0degCx8MSB << 8);
 8000d28:	7ebb      	ldrb	r3, [r7, #26]
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	8afb      	ldrh	r3, [r7, #22]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	827b      	strh	r3, [r7, #18]
	int16_t T1degCx8_final = T1degCx8  | (T1degCx8MSB << 8);
 8000d36:	7e7b      	ldrb	r3, [r7, #25]
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	823b      	strh	r3, [r7, #16]




	uint8_t H0T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_H0T0OUTL);
 8000d44:	2036      	movs	r0, #54	; 0x36
 8000d46:	f7ff ff95 	bl	8000c74 <hts221_read_byte>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	uint8_t H0T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_H0T0OUTH);
 8000d4e:	2037      	movs	r0, #55	; 0x37
 8000d50:	f7ff ff90 	bl	8000c74 <hts221_read_byte>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73bb      	strb	r3, [r7, #14]

	int16_t H0T0OUT = H0T0OUTLOW | (H0T0OUTHIGH << 8);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	81bb      	strh	r3, [r7, #12]



	uint8_t H1T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_H1T0OUTL);
 8000d66:	203a      	movs	r0, #58	; 0x3a
 8000d68:	f7ff ff84 	bl	8000c74 <hts221_read_byte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	72fb      	strb	r3, [r7, #11]
	uint8_t H1T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_H1T0OUTH);
 8000d70:	203b      	movs	r0, #59	; 0x3b
 8000d72:	f7ff ff7f 	bl	8000c74 <hts221_read_byte>
 8000d76:	4603      	mov	r3, r0
 8000d78:	72bb      	strb	r3, [r7, #10]

	int16_t H1TOUT = H1T0OUTLOW  | (H1T0OUTHIGH << 8);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	b21a      	sxth	r2, r3
 8000d7e:	7abb      	ldrb	r3, [r7, #10]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	813b      	strh	r3, [r7, #8]




	uint8_t T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_T0OUTL);
 8000d88:	203c      	movs	r0, #60	; 0x3c
 8000d8a:	f7ff ff73 	bl	8000c74 <hts221_read_byte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	uint8_t T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_T0OUTH);
 8000d92:	203d      	movs	r0, #61	; 0x3d
 8000d94:	f7ff ff6e 	bl	8000c74 <hts221_read_byte>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71bb      	strb	r3, [r7, #6]

	int16_t T0OUT = T0OUTLOW | (T0OUTHIGH << 8);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	80bb      	strh	r3, [r7, #4]




	uint8_t T1OUTLOW = hts221_read_byte(HTS221_ADDRESS_T1OUTL);
 8000daa:	203e      	movs	r0, #62	; 0x3e
 8000dac:	f7ff ff62 	bl	8000c74 <hts221_read_byte>
 8000db0:	4603      	mov	r3, r0
 8000db2:	70fb      	strb	r3, [r7, #3]
	uint8_t T1OUTHIGH = hts221_read_byte(HTS221_ADDRESS_T1OUTH);
 8000db4:	203f      	movs	r0, #63	; 0x3f
 8000db6:	f7ff ff5d 	bl	8000c74 <hts221_read_byte>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	70bb      	strb	r3, [r7, #2]

	int16_t T1OUT =  T1OUTLOW | (T1OUTHIGH << 8);
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	803b      	strh	r3, [r7, #0]


	//HODNOTY POTREBNE PRE KALIBRACIU VYSLEDNEJ HODNOTY TEPLOTY (TEMPETATURE)
	T0deg = T0degCx8_final/8.0f;
 8000dcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <hts221_init+0x1dc>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
	T1deg = T1degCx8_final/8.0f;
 8000de6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <hts221_init+0x1e0>)
 8000dfc:	edc3 7a00 	vstr	s15, [r3]

	T0out = T0OUT;
 8000e00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <hts221_init+0x1e4>)
 8000e0e:	edc3 7a00 	vstr	s15, [r3]
	T1out = T1OUT;
 8000e12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <hts221_init+0x1e8>)
 8000e20:	edc3 7a00 	vstr	s15, [r3]

	//HODNOTY POTREBNE PRE KALIBRACIU VYSLEDNEJ HODNOTY VLHKOSTI (RELATIVE HUMIDITY)
	H0rh = H0rHx2/2.0f;
 8000e24:	7f3b      	ldrb	r3, [r7, #28]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <hts221_init+0x1ec>)
 8000e38:	edc3 7a00 	vstr	s15, [r3]
	H1rh = H1rHx2/2.0f;
 8000e3c:	7efb      	ldrb	r3, [r7, #27]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <hts221_init+0x1f0>)
 8000e50:	edc3 7a00 	vstr	s15, [r3]

	H0T0out = H0T0OUT;
 8000e54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <hts221_init+0x1f4>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]
	H1T0out = H1TOUT;
 8000e66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <hts221_init+0x1f8>)
 8000e74:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8000e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001f8 	.word	0x200001f8
 8000e88:	200001fc 	.word	0x200001fc
 8000e8c:	20000200 	.word	0x20000200
 8000e90:	20000204 	.word	0x20000204
 8000e94:	20000208 	.word	0x20000208
 8000e98:	2000020c 	.word	0x2000020c
 8000e9c:	20000210 	.word	0x20000210
 8000ea0:	20000214 	.word	0x20000214

08000ea4 <hts221_get_temperature>:

float hts221_get_temperature()  {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	//LINEARNA INTERPOLACIA VZOREC: y = y1 + ((x – x1) / (x2 – x1)) * (y2 – y1)

	//TEPLOTA: x = temperature out(measured), x1 = T0out, x2 = T1out
	// y = temperature deg(measured), y1 = T0deg, y2 = T1deg

	uint8_t l_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTL);
 8000eaa:	202a      	movs	r0, #42	; 0x2a
 8000eac:	f7ff fee2 	bl	8000c74 <hts221_read_byte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
	uint8_t h_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTH);
 8000eb4:	202b      	movs	r0, #43	; 0x2b
 8000eb6:	f7ff fedd 	bl	8000c74 <hts221_read_byte>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71bb      	strb	r3, [r7, #6]

	int16_t temperature = l_temperature | (h_temperature << 8);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	80bb      	strh	r3, [r7, #4]

	float final_temperature = T0deg + ((temperature - T0out) / (T1out-T0out)) * (T1deg - T0deg);
 8000ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <hts221_get_temperature+0x84>)
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <hts221_get_temperature+0x88>)
 8000ee4:	ed93 7a00 	vldr	s14, [r3]
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <hts221_get_temperature+0x84>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <hts221_get_temperature+0x8c>)
 8000ef8:	edd3 6a00 	vldr	s13, [r3]
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <hts221_get_temperature+0x90>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <hts221_get_temperature+0x90>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	edc7 7a00 	vstr	s15, [r7]

	return final_temperature;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
}
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000200 	.word	0x20000200
 8000f2c:	20000204 	.word	0x20000204
 8000f30:	200001fc 	.word	0x200001fc
 8000f34:	200001f8 	.word	0x200001f8

08000f38 <hts221_get_relative_humidity>:

float hts221_get_relative_humidity() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	//LINEARNA INTERPOLACIA VZOREC: y = y1 + ((x – x1) / (x2 – x1)) * (y2 – y1)

	//VLHKOST: x = humidity out(measured), x1 = H0T0out, x2 = H1T0out
    // y = humidity rh(measured), y1 = H0rh, y2 = H1rh

	uint8_t l_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTL);
 8000f3e:	2028      	movs	r0, #40	; 0x28
 8000f40:	f7ff fe98 	bl	8000c74 <hts221_read_byte>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
	uint8_t h_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTH);
 8000f48:	2029      	movs	r0, #41	; 0x29
 8000f4a:	f7ff fe93 	bl	8000c74 <hts221_read_byte>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71bb      	strb	r3, [r7, #6]

	int16_t humidity = l_humidity | (h_humidity  << 8);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]

	float final_humidity = H0rh + ((humidity - H0T0out) / (H1T0out-H0T0out)) * (H1rh - H0rh);
 8000f60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <hts221_get_relative_humidity+0x84>)
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <hts221_get_relative_humidity+0x88>)
 8000f78:	ed93 7a00 	vldr	s14, [r3]
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <hts221_get_relative_humidity+0x84>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <hts221_get_relative_humidity+0x8c>)
 8000f8c:	edd3 6a00 	vldr	s13, [r3]
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <hts221_get_relative_humidity+0x90>)
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <hts221_get_relative_humidity+0x90>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa8:	edc7 7a00 	vstr	s15, [r7]

	return final_humidity;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	ee07 3a90 	vmov	s15, r3
}
 8000fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000210 	.word	0x20000210
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	2000020c 	.word	0x2000020c
 8000fc8:	20000208 	.word	0x20000208

08000fcc <lps25hb_write_byte>:
#include "math.h"

static uint8_t address = LPS25HB_I2C_ADDRESS_1;

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <lps25hb_write_byte+0x28>)
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	79f9      	ldrb	r1, [r7, #7]
 8000fe2:	79b8      	ldrb	r0, [r7, #6]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f000 fcb7 	bl	8001958 <i2c_master_write>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000001 	.word	0x20000001

08000ff8 <lps25hb_read_byte>:


uint8_t  lps25hb_read_byte(uint8_t reg_addr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
	(i2c_master_read(&data, 1, reg_addr, address, 0));
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <lps25hb_read_byte+0x2c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	f107 000f 	add.w	r0, r7, #15
 8001010:	2100      	movs	r1, #0
 8001012:	9100      	str	r1, [sp, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	f000 fce3 	bl	80019e0 <i2c_master_read>
	return data;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000001 	.word	0x20000001

08001028 <lps25hb_init>:

uint8_t lps25hb_init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f002 fa70 	bl	8003518 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_REG_WHO_AM_I_ADDR);
 8001038:	200f      	movs	r0, #15
 800103a:	f7ff ffdd 	bl	8000ff8 <lps25hb_read_byte>
 800103e:	4603      	mov	r3, r0
 8001040:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	2bbd      	cmp	r3, #189	; 0xbd
 8001046:	d102      	bne.n	800104e <lps25hb_init+0x26>
	{
		status = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	e00f      	b.n	800106e <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address = LPS25HB_I2C_ADDRESS_1;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <lps25hb_init+0x60>)
 8001050:	22ba      	movs	r2, #186	; 0xba
 8001052:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_VALUE);
 8001054:	20bd      	movs	r0, #189	; 0xbd
 8001056:	f7ff ffcf 	bl	8000ff8 <lps25hb_read_byte>
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_REG_WHO_AM_I_ADDR)
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d102      	bne.n	800106a <lps25hb_init+0x42>
		{
			status = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e001      	b.n	800106e <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
		}
	}
	//nastavenie registrov

	uint8_t ctrl1 = 0b11000000; // power enable,  ODR 25Hz, interupt off, BDU off, autozero off
 800106e:	23c0      	movs	r3, #192	; 0xc0
 8001070:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	4619      	mov	r1, r3
 8001076:	2020      	movs	r0, #32
 8001078:	f7ff ffa8 	bl	8000fcc <lps25hb_write_byte>

	return status;
 800107c:	79fb      	ldrb	r3, [r7, #7]

}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000001 	.word	0x20000001

0800108c <lps25hb_get_pressure>:

float lps25hb_get_pressure() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

	uint8_t xl_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTXL);
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f7ff ffb0 	bl	8000ff8 <lps25hb_read_byte>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
	uint8_t l_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTL);
 800109c:	2029      	movs	r0, #41	; 0x29
 800109e:	f7ff ffab 	bl	8000ff8 <lps25hb_read_byte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73bb      	strb	r3, [r7, #14]
	uint8_t h_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTH);
 80010a6:	202a      	movs	r0, #42	; 0x2a
 80010a8:	f7ff ffa6 	bl	8000ff8 <lps25hb_read_byte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	737b      	strb	r3, [r7, #13]

	uint32_t pressure = xl_pressure | (l_pressure << 8) | (h_pressure << 16);
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	431a      	orrs	r2, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	4313      	orrs	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]

	float final_pressure;

	final_pressure = pressure/4096;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0b1b      	lsrs	r3, r3, #12
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010cc:	edc7 7a01 	vstr	s15, [r7, #4]

	return final_pressure;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	ee07 3a90 	vmov	s15, r3
}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <lps25hb_get_alltitude>:

float lps25hb_get_alltitude(float final_pressure) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
	//P = measured pressure from the sensor (0~107900 Pa)
	//p0 = reference pressure at sea level (87000~107900 Pa)

	float alltitude;

	alltitude = 44330*(1-pow(final_pressure/1013.25, 1/5.255));
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	a31e      	add	r3, pc, #120	; (adr r3, 800116c <lps25hb_get_alltitude+0x8c>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fba9 	bl	800084c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ec43 2b17 	vmov	d7, r2, r3
 8001102:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001158 <lps25hb_get_alltitude+0x78>
 8001106:	eeb0 0a47 	vmov.f32	s0, s14
 800110a:	eef0 0a67 	vmov.f32	s1, s15
 800110e:	f005 f901 	bl	8006314 <pow>
 8001112:	ec53 2b10 	vmov	r2, r3, d0
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4913      	ldr	r1, [pc, #76]	; (8001168 <lps25hb_get_alltitude+0x88>)
 800111c:	f7ff f8b4 	bl	8000288 <__aeabi_dsub>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	a30d      	add	r3, pc, #52	; (adr r3, 8001160 <lps25hb_get_alltitude+0x80>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa63 	bl	80005f8 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd35 	bl	8000ba8 <__aeabi_d2f>
 800113e:	4603      	mov	r3, r0
 8001140:	60fb      	str	r3, [r7, #12]

	return alltitude;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	ee07 3a90 	vmov	s15, r3
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	f3af 8000 	nop.w
 8001158:	ccd9456c 	.word	0xccd9456c
 800115c:	3fc85b95 	.word	0x3fc85b95
 8001160:	00000000 	.word	0x00000000
 8001164:	40e5a540 	.word	0x40e5a540
 8001168:	3ff00000 	.word	0x3ff00000
 800116c:	00000000 	.word	0x00000000
 8001170:	408faa00 	.word	0x408faa00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4313      	orrs	r3, r2
 800129a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000

080012b8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <LL_SYSCFG_SetEXTISource+0x58>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	43db      	mvns	r3, r3
 80012d4:	ea02 0103 	and.w	r1, r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	fa03 f202 	lsl.w	r2, r3, r2
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <LL_SYSCFG_SetEXTISource+0x58>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	430a      	orrs	r2, r1
 80012fe:	3302      	adds	r3, #2
 8001300:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	40010000 	.word	0x40010000

08001314 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	613b      	str	r3, [r7, #16]
  return result;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2103      	movs	r1, #3
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	61bb      	str	r3, [r7, #24]
  return result;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	431a      	orrs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001372:	b480      	push	{r7}
 8001374:	b089      	sub	sp, #36	; 0x24
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa93 f3a3 	rbit	r3, r3
 800138c:	613b      	str	r3, [r7, #16]
  return result;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	2103      	movs	r1, #3
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	401a      	ands	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	61bb      	str	r3, [r7, #24]
  return result;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	60da      	str	r2, [r3, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800140e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001412:	f7ff ff39 	bl	8001288 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001416:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800141a:	f7ff ff35 	bl	8001288 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 800141e:	f641 119f 	movw	r1, #6559	; 0x199f
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f7ff ffd3 	bl	80013d0 <LL_GPIO_ResetOutputPin>
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800142a:	2133      	movs	r1, #51	; 0x33
 800142c:	482b      	ldr	r0, [pc, #172]	; (80014dc <MX_GPIO_Init+0xf0>)
 800142e:	f7ff ffcf 	bl	80013d0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8001432:	f641 139f 	movw	r3, #6559	; 0x199f
 8001436:	607b      	str	r3, [r7, #4]
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001438:	2301      	movs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f001 fe3e 	bl	80030d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001454:	2333      	movs	r3, #51	; 0x33
 8001456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001458:	2301      	movs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	481b      	ldr	r0, [pc, #108]	; (80014dc <MX_GPIO_Init+0xf0>)
 800146e:	f001 fe2f 	bl	80030d0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001472:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff ff1e 	bl	80012b8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP);
 800147c:	2201      	movs	r2, #1
 800147e:	2108      	movs	r1, #8
 8001480:	4816      	ldr	r0, [pc, #88]	; (80014dc <MX_GPIO_Init+0xf0>)
 8001482:	f7ff ff76 	bl	8001372 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 8001486:	2200      	movs	r2, #0
 8001488:	2108      	movs	r1, #8
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <MX_GPIO_Init+0xf0>)
 800148c:	f7ff ff42 	bl	8001314 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001490:	2308      	movs	r3, #8
 8001492:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fc16 	bl	8002ce0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014b4:	f7ff fe5e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff feae 	bl	8001220 <NVIC_EncodePriority>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	2009      	movs	r0, #9
 80014ca:	f7ff fe7f 	bl	80011cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80014ce:	2009      	movs	r0, #9
 80014d0:	f7ff fe5e 	bl	8001190 <__NVIC_EnableIRQ>

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	48000400 	.word	0x48000400

080014e0 <__NVIC_GetPriorityGrouping>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001666:	f023 0306 	bic.w	r3, r3, #6
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	430a      	orrs	r2, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	60da      	str	r2, [r3, #12]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f043 0204 	orr.w	r2, r3, #4
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 0204 	bic.w	r2, r3, #4
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d101      	bne.n	80016fa <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d101      	bne.n	8001720 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b20      	cmp	r3, #32
 8001740:	d101      	bne.n	8001746 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	61da      	str	r2, [r3, #28]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	0d5b      	lsrs	r3, r3, #21
 80017aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <LL_I2C_HandleTransfer+0x48>)
 80017b0:	430b      	orrs	r3, r1
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4319      	orrs	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	4319      	orrs	r1, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4319      	orrs	r1, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	03ff7bff 	.word	0x03ff7bff

080017e0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_AHB1_GRP1_EnableClock>:
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000

08001848 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018a6:	f7ff ffb7 	bl	8001818 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018ae:	2302      	movs	r3, #2
 80018b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80018b6:	2301      	movs	r3, #1
 80018b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018be:	2304      	movs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4821      	ldr	r0, [pc, #132]	; (800194c <MX_I2C1_Init+0xd4>)
 80018c8:	f001 fc02 	bl	80030d0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80018cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018d0:	f7ff ffba 	bl	8001848 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018d4:	f7ff fe04 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 80018d8:	4603      	mov	r3, r0
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe54 	bl	800158c <NVIC_EncodePriority>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4619      	mov	r1, r3
 80018e8:	201f      	movs	r0, #31
 80018ea:	f7ff fe25 	bl	8001538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018ee:	201f      	movs	r0, #31
 80018f0:	f7ff fe04 	bl	80014fc <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80018f4:	4816      	ldr	r0, [pc, #88]	; (8001950 <MX_I2C1_Init+0xd8>)
 80018f6:	f7ff ff3d 	bl	8001774 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80018fa:	4815      	ldr	r0, [pc, #84]	; (8001950 <MX_I2C1_Init+0xd8>)
 80018fc:	f7ff fec1 	bl	8001682 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_I2C1_Init+0xd8>)
 8001902:	f7ff fe96 	bl	8001632 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001906:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_I2C1_Init+0xd8>)
 8001908:	f7ff fe83 	bl	8001612 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_I2C1_Init+0xdc>)
 8001912:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_I2C1_Init+0xd8>)
 8001930:	f001 fce1 	bl	80032f6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_I2C1_Init+0xd8>)
 800193a:	f7ff fe8a 	bl	8001652 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_I2C1_Init+0xd8>)
 8001940:	f7ff fe57 	bl	80015f2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	3738      	adds	r7, #56	; 0x38
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	48000400 	.word	0x48000400
 8001950:	40005400 	.word	0x40005400
 8001954:	2000090e 	.word	0x2000090e

08001958 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af02      	add	r7, sp, #8
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	4603      	mov	r3, r0
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	460b      	mov	r3, r1
 8001970:	717b      	strb	r3, [r7, #5]
 8001972:	4613      	mov	r3, r2
 8001974:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001982:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001984:	7979      	ldrb	r1, [r7, #5]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <i2c_master_write+0x80>)
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2302      	movs	r3, #2
 8001992:	2200      	movs	r2, #0
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <i2c_master_write+0x84>)
 8001996:	f7ff fefd 	bl	8001794 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	4619      	mov	r1, r3
 800199e:	480f      	ldr	r0, [pc, #60]	; (80019dc <i2c_master_write+0x84>)
 80019a0:	f7ff ff2b 	bl	80017fa <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019a4:	e00a      	b.n	80019bc <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <i2c_master_write+0x84>)
 80019a8:	f7ff fe9b 	bl	80016e2 <LL_I2C_IsActiveFlag_TXIS>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <i2c_master_write+0x84>)
 80019b8:	f7ff ff1f 	bl	80017fa <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <i2c_master_write+0x84>)
 80019be:	f7ff feb6 	bl	800172e <LL_I2C_IsActiveFlag_STOP>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <i2c_master_write+0x84>)
 80019ca:	f7ff fec3 	bl	8001754 <LL_I2C_ClearFlag_STOP>
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	80002000 	.word	0x80002000
 80019dc:	40005400 	.word	0x40005400

080019e0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	70fb      	strb	r3, [r7, #3]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70bb      	strb	r3, [r7, #2]
 80019f6:	4613      	mov	r3, r2
 80019f8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80019fa:	4a30      	ldr	r2, [pc, #192]	; (8001abc <i2c_master_read+0xdc>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001a00:	7c3b      	ldrb	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001a06:	78bb      	ldrb	r3, [r7, #2]
 8001a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <i2c_master_read+0xe0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001a14:	482b      	ldr	r0, [pc, #172]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a16:	f7ff fe44 	bl	80016a2 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a1a:	7879      	ldrb	r1, [r7, #1]
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <i2c_master_read+0xe8>)
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4826      	ldr	r0, [pc, #152]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a2c:	f7ff feb2 	bl	8001794 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a30:	e00a      	b.n	8001a48 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a32:	4824      	ldr	r0, [pc, #144]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a34:	f7ff fe55 	bl	80016e2 <LL_I2C_IsActiveFlag_TXIS>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001a3e:	78bb      	ldrb	r3, [r7, #2]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4820      	ldr	r0, [pc, #128]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a44:	f7ff fed9 	bl	80017fa <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a48:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a4a:	f7ff fe70 	bl	800172e <LL_I2C_IsActiveFlag_STOP>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a54:	481b      	ldr	r0, [pc, #108]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a56:	f7ff fe7d 	bl	8001754 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001a5a:	bf00      	nop
 8001a5c:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a5e:	f7ff fe66 	bl	800172e <LL_I2C_IsActiveFlag_STOP>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001a68:	7879      	ldrb	r1, [r7, #1]
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <i2c_master_read+0xec>)
 8001a6e:	9201      	str	r2, [sp, #4]
 8001a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a7a:	f7ff fe8b 	bl	8001794 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001a7e:	bf00      	nop
 8001a80:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a82:	f7ff fe54 	bl	800172e <LL_I2C_IsActiveFlag_STOP>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f9      	beq.n	8001a80 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a8e:	f7ff fe61 	bl	8001754 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a94:	f7ff fe15 	bl	80016c2 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <i2c_master_read+0xe4>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <i2c_master_read+0xf0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <i2c_master_read+0xe0>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <i2c_master_read+0xdc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000023c 	.word	0x2000023c
 8001ac0:	20000218 	.word	0x20000218
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	80002000 	.word	0x80002000
 8001acc:	80002400 	.word	0x80002400
 8001ad0:	20000219 	.word	0x20000219

08001ad4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001ad4:	b598      	push	{r3, r4, r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001ad8:	4812      	ldr	r0, [pc, #72]	; (8001b24 <I2C1_EV_IRQHandler+0x50>)
 8001ada:	f7ff fe15 	bl	8001708 <LL_I2C_IsActiveFlag_RXNE>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <I2C1_EV_IRQHandler+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <I2C1_EV_IRQHandler+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	b2c8      	uxtb	r0, r1
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <I2C1_EV_IRQHandler+0x58>)
 8001af4:	7008      	strb	r0, [r1, #0]
 8001af6:	18d4      	adds	r4, r2, r3
 8001af8:	480a      	ldr	r0, [pc, #40]	; (8001b24 <I2C1_EV_IRQHandler+0x50>)
 8001afa:	f7ff fe71 	bl	80017e0 <LL_I2C_ReceiveData8>
 8001afe:	4603      	mov	r3, r0
 8001b00:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <I2C1_EV_IRQHandler+0x58>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b13      	cmp	r3, #19
 8001b0a:	d903      	bls.n	8001b14 <I2C1_EV_IRQHandler+0x40>
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <I2C1_EV_IRQHandler+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e001      	b.n	8001b18 <I2C1_EV_IRQHandler+0x44>
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <I2C1_EV_IRQHandler+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <I2C1_EV_IRQHandler+0x5c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bd98      	pop	{r3, r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40005400 	.word	0x40005400
 8001b28:	2000023c 	.word	0x2000023c
 8001b2c:	20000219 	.word	0x20000219
 8001b30:	20000218 	.word	0x20000218

08001b34 <__NVIC_SetPriorityGrouping>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <LL_RCC_HSI_Enable+0x1c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <LL_RCC_HSI_Enable+0x1c>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <LL_RCC_HSI_IsReady+0x20>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000

08001c98 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <LL_RCC_SetSysClkSource+0x24>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 0203 	bic.w	r2, r3, #3
 8001cd4:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <LL_RCC_SetSysClkSource+0x24>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000

08001cec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <LL_RCC_GetSysClkSource+0x18>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40021000 	.word	0x40021000

08001d30 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000

08001d58 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40021000 	.word	0x40021000

08001d80 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LL_RCC_SetI2CClockSource+0x2c>)
 8001d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0e1b      	lsrs	r3, r3, #24
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d9a:	4904      	ldr	r1, [pc, #16]	; (8001dac <LL_RCC_SetI2CClockSource+0x2c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000

08001db0 <LL_APB1_GRP1_EnableClock>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000

08001de0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40021000 	.word	0x40021000

08001e10 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <LL_FLASH_SetLatency+0x24>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	4904      	ldr	r1, [pc, #16]	; (8001e34 <LL_FLASH_SetLatency+0x24>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40022000 	.word	0x40022000

08001e38 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <LL_FLASH_GetLatency+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000

08001e54 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f06f 0201 	mvn.w	r2, #1
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f043 0201 	orr.w	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	60da      	str	r2, [r3, #12]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_GPIO_IsInputPinSet>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_GPIO_SetOutputPin>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	619a      	str	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_GPIO_ResetOutputPin>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <resetSegments>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetSegments(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f7ff ffdc 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f50:	f7ff ffd6 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001f54:	2102      	movs	r1, #2
 8001f56:	480e      	ldr	r0, [pc, #56]	; (8001f90 <resetSegments+0x58>)
 8001f58:	f7ff ffd2 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <resetSegments+0x58>)
 8001f60:	f7ff ffce 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001f64:	2110      	movs	r1, #16
 8001f66:	480a      	ldr	r0, [pc, #40]	; (8001f90 <resetSegments+0x58>)
 8001f68:	f7ff ffca 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f7ff ffc5 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001f76:	2102      	movs	r1, #2
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7c:	f7ff ffc0 	bl	8001f00 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f80:	2108      	movs	r1, #8
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f7ff ffbb 	bl	8001f00 <LL_GPIO_SetOutputPin>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48000400 	.word	0x48000400

08001f94 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);

	LL_GPIO_ResetOutputPin(digit0_GPIO_Port, digit0_Pin);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <resetDigits+0x3c>)
 8001f9c:	f7ff ffbe 	bl	8001f1c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit1_GPIO_Port, digit1_Pin);
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa6:	f7ff ffb9 	bl	8001f1c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit2_GPIO_Port, digit2_Pin);
 8001faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f7ff ffb3 	bl	8001f1c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit3_GPIO_Port, digit3_Pin);
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbc:	f7ff ffae 	bl	8001f1c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digitTime_GPIO_Port, digitTime_Pin);
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f7ff ffa9 	bl	8001f1c <LL_GPIO_ResetOutputPin>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <decode_7seg>:




unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	if (chr == '.') {
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe2:	d101      	bne.n	8001fe8 <decode_7seg+0x14>
		return (1<<7); //DP
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	e00d      	b.n	8002004 <decode_7seg+0x30>
	}
	if (chr == '-') {
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b2d      	cmp	r3, #45	; 0x2d
 8001fec:	d101      	bne.n	8001ff2 <decode_7seg+0x1e>
		return (1<<0); //segment G
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e008      	b.n	8002004 <decode_7seg+0x30>
	}

    if (chr > (unsigned char)'z')
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b7a      	cmp	r3, #122	; 0x7a
 8001ff6:	d901      	bls.n	8001ffc <decode_7seg+0x28>
        return 0x00;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e003      	b.n	8002004 <decode_7seg+0x30>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <decode_7seg+0x3c>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	080072c8 	.word	0x080072c8

08002014 <display_symbol>:


void display_symbol(char symbol,int digit)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d822      	bhi.n	800206c <display_symbol+0x58>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <display_symbol+0x18>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002047 	.word	0x08002047
 8002034:	08002053 	.word	0x08002053
 8002038:	08002061 	.word	0x08002061
	switch (digit)
	{
	    case 0:
                DIGIT_0_ON;
 800203c:	2101      	movs	r1, #1
 800203e:	484f      	ldr	r0, [pc, #316]	; (800217c <display_symbol+0x168>)
 8002040:	f7ff ff5e 	bl	8001f00 <LL_GPIO_SetOutputPin>
	      break;
 8002044:	e012      	b.n	800206c <display_symbol+0x58>

	    case 1:
	    	DIGIT_1_ON;
 8002046:	2110      	movs	r1, #16
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f7ff ff58 	bl	8001f00 <LL_GPIO_SetOutputPin>
	      break;
 8002050:	e00c      	b.n	800206c <display_symbol+0x58>

	    case 2:
	    	DIGIT_2_ON;
 8002052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205a:	f7ff ff51 	bl	8001f00 <LL_GPIO_SetOutputPin>
	      break;
 800205e:	e005      	b.n	800206c <display_symbol+0x58>

	    case 3:
	    	DIGIT_3_ON;
 8002060:	2104      	movs	r1, #4
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f7ff ff4b 	bl	8001f00 <LL_GPIO_SetOutputPin>
	      break;
 800206a:	bf00      	nop
	}



	char pomocna=symbol;
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d103      	bne.n	8002086 <display_symbol+0x72>
		LL_GPIO_ResetOutputPin(segmentG_GPIO_Port, segmentG_Pin);
 800207e:	2110      	movs	r1, #16
 8002080:	483e      	ldr	r0, [pc, #248]	; (800217c <display_symbol+0x168>)
 8002082:	f7ff ff4b 	bl	8001f1c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 1;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d104      	bne.n	80020a8 <display_symbol+0x94>
		LL_GPIO_ResetOutputPin(segmentF_GPIO_Port, segmentF_Pin);
 800209e:	2108      	movs	r1, #8
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7ff ff3a 	bl	8001f1c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 2;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <display_symbol+0xb8>
		LL_GPIO_ResetOutputPin(segmentE_GPIO_Port, segmentE_Pin);
 80020c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f7ff ff28 	bl	8001f1c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 3;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d103      	bne.n	80020ec <display_symbol+0xd8>
		LL_GPIO_ResetOutputPin(segmentD_GPIO_Port, segmentD_Pin);
 80020e4:	2120      	movs	r1, #32
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <display_symbol+0x168>)
 80020e8:	f7ff ff18 	bl	8001f1c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 4;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <display_symbol+0xfc>
		LL_GPIO_ResetOutputPin(segmentC_GPIO_Port, segmentC_Pin);
 8002104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210c:	f7ff ff06 	bl	8001f1c <LL_GPIO_ResetOutputPin>


	pomocna=symbol;
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 5;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d104      	bne.n	8002132 <display_symbol+0x11e>
		LL_GPIO_ResetOutputPin(segmentB_GPIO_Port, segmentB_Pin);
 8002128:	2101      	movs	r1, #1
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f7ff fef5 	bl	8001f1c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 6;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d104      	bne.n	8002154 <display_symbol+0x140>
		LL_GPIO_ResetOutputPin(segmentA_GPIO_Port, segmentA_Pin);
 800214a:	2102      	movs	r1, #2
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f7ff fee4 	bl	8001f1c <LL_GPIO_ResetOutputPin>

	pomocna=symbol;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 7;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	09db      	lsrs	r3, r3, #7
 800215c:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d103      	bne.n	8002174 <display_symbol+0x160>
		LL_GPIO_ResetOutputPin(segmentDP_GPIO_Port, segmentDP_Pin);
 800216c:	2102      	movs	r1, #2
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <display_symbol+0x168>)
 8002170:	f7ff fed4 	bl	8001f1c <LL_GPIO_ResetOutputPin>

}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	48000400 	.word	0x48000400

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002186:	2001      	movs	r0, #1
 8002188:	f7ff fe2a 	bl	8001de0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800218c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002190:	f7ff fe0e 	bl	8001db0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f7ff fccd 	bl	8001b34 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800219a:	f7ff fcef 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 800219e:	4603      	mov	r3, r0
 80021a0:	2200      	movs	r2, #0
 80021a2:	210f      	movs	r1, #15
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fd21 	bl	8001bec <NVIC_EncodePriority>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	f7ff fcf1 	bl	8001b98 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b6:	2003      	movs	r0, #3
 80021b8:	f7ff fcbc 	bl	8001b34 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021bc:	f000 f8be 	bl	800233c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c0:	f7ff f914 	bl	80013ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80021c4:	f000 fbf0 	bl	80029a8 <MX_TIM2_Init>
  MX_I2C1_Init();
 80021c8:	f7ff fb56 	bl	8001878 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 80021cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021d0:	f7ff fe40 	bl	8001e54 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80021d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021d8:	f7ff fe6d 	bl	8001eb6 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lps25hb_init();
 80021dc:	f7fe ff24 	bl	8001028 <lps25hb_init>
  hts221_init();
 80021e0:	f7fe fd62 	bl	8000ca8 <hts221_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if(mode==0){
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <main+0x188>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d129      	bne.n	8002240 <main+0xc0>
		   float temperature = hts221_get_temperature();
 80021ec:	f7fe fe5a 	bl	8000ea4 <hts221_get_temperature>
 80021f0:	ed87 0a05 	vstr	s0, [r7, #20]
		   if(temperature>=100) {
 80021f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800230c <main+0x18c>
 80021fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	db01      	blt.n	800220a <main+0x8a>
			   temperature = 99.9;
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <main+0x190>)
 8002208:	617b      	str	r3, [r7, #20]
		   }
		   if(temperature<=-100) {
 800220a:	edd7 7a05 	vldr	s15, [r7, #20]
 800220e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002314 <main+0x194>
 8002212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d801      	bhi.n	8002220 <main+0xa0>
			   temperature = -99.9;
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <main+0x198>)
 800221e:	617b      	str	r3, [r7, #20]
		   }
		   sprintf(retazec, "TEMP_%03.1f", temperature);
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7fe f991 	bl	8000548 <__aeabi_f2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	493c      	ldr	r1, [pc, #240]	; (800231c <main+0x19c>)
 800222c:	483c      	ldr	r0, [pc, #240]	; (8002320 <main+0x1a0>)
 800222e:	f001 fe45 	bl	8003ebc <siprintf>
		   //strcpy(retazec, "TEMP_xx.x");
		   length_retazec = strlen(retazec);
 8002232:	483b      	ldr	r0, [pc, #236]	; (8002320 <main+0x1a0>)
 8002234:	f7fd ffcc 	bl	80001d0 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <main+0x1a4>)
 800223e:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==1){
 8002240:	4b31      	ldr	r3, [pc, #196]	; (8002308 <main+0x188>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d128      	bne.n	800229a <main+0x11a>
		   float humidity = hts221_get_relative_humidity();
 8002248:	f7fe fe76 	bl	8000f38 <hts221_get_relative_humidity>
 800224c:	ed87 0a04 	vstr	s0, [r7, #16]
		   if(humidity>99) {
 8002250:	edd7 7a04 	vldr	s15, [r7, #16]
 8002254:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002328 <main+0x1a8>
 8002258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	dd01      	ble.n	8002266 <main+0xe6>
			   humidity = 99;
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <main+0x1ac>)
 8002264:	613b      	str	r3, [r7, #16]
		   }
		   if(humidity<=0) {
 8002266:	edd7 7a04 	vldr	s15, [r7, #16]
 800226a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d802      	bhi.n	800227a <main+0xfa>
		   	  humidity = 0;
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
		   }
		   sprintf(retazec, "HUM_%02.0f", humidity);
 800227a:	6938      	ldr	r0, [r7, #16]
 800227c:	f7fe f964 	bl	8000548 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	492a      	ldr	r1, [pc, #168]	; (8002330 <main+0x1b0>)
 8002286:	4826      	ldr	r0, [pc, #152]	; (8002320 <main+0x1a0>)
 8002288:	f001 fe18 	bl	8003ebc <siprintf>
		   //strcpy(retazec, "HUM_xx");
		   length_retazec = strlen(retazec);
 800228c:	4824      	ldr	r0, [pc, #144]	; (8002320 <main+0x1a0>)
 800228e:	f7fd ff9f 	bl	80001d0 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <main+0x1a4>)
 8002298:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==2){
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <main+0x188>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d113      	bne.n	80022ca <main+0x14a>
		   float final_pressure = lps25hb_get_pressure();
 80022a2:	f7fe fef3 	bl	800108c <lps25hb_get_pressure>
 80022a6:	ed87 0a03 	vstr	s0, [r7, #12]
		   sprintf(retazec, "BAR_%06.2f", final_pressure);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7fe f94c 	bl	8000548 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	491f      	ldr	r1, [pc, #124]	; (8002334 <main+0x1b4>)
 80022b6:	481a      	ldr	r0, [pc, #104]	; (8002320 <main+0x1a0>)
 80022b8:	f001 fe00 	bl	8003ebc <siprintf>
		   //strcpy(retazec, "BAR_xxxx.xx");
		   length_retazec = strlen(retazec);
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <main+0x1a0>)
 80022be:	f7fd ff87 	bl	80001d0 <strlen>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <main+0x1a4>)
 80022c8:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==3){
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <main+0x188>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d188      	bne.n	80021e4 <main+0x64>
		   float final_pressure = lps25hb_get_pressure();
 80022d2:	f7fe fedb 	bl	800108c <lps25hb_get_pressure>
 80022d6:	ed87 0a02 	vstr	s0, [r7, #8]
		   float alltitude = lps25hb_get_alltitude(final_pressure);
 80022da:	ed97 0a02 	vldr	s0, [r7, #8]
 80022de:	f7fe feff 	bl	80010e0 <lps25hb_get_alltitude>
 80022e2:	ed87 0a01 	vstr	s0, [r7, #4]
		   sprintf(retazec, "ALT_%05.1f", alltitude);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe f92e 	bl	8000548 <__aeabi_f2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4911      	ldr	r1, [pc, #68]	; (8002338 <main+0x1b8>)
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <main+0x1a0>)
 80022f4:	f001 fde2 	bl	8003ebc <siprintf>
		   //strcpy(retazec, "ALT_xxxx.x");
		   length_retazec = strlen(retazec);
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <main+0x1a0>)
 80022fa:	f7fd ff69 	bl	80001d0 <strlen>
 80022fe:	4603      	mov	r3, r0
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <main+0x1a4>)
 8002304:	701a      	strb	r2, [r3, #0]
	   if(mode==0){
 8002306:	e76d      	b.n	80021e4 <main+0x64>
 8002308:	2000021a 	.word	0x2000021a
 800230c:	42c80000 	.word	0x42c80000
 8002310:	42c7cccd 	.word	0x42c7cccd
 8002314:	c2c80000 	.word	0xc2c80000
 8002318:	c2c7cccd 	.word	0xc2c7cccd
 800231c:	08007298 	.word	0x08007298
 8002320:	20000240 	.word	0x20000240
 8002324:	2000021b 	.word	0x2000021b
 8002328:	42c60000 	.word	0x42c60000
 800232c:	42c60000 	.word	0x42c60000
 8002330:	080072a4 	.word	0x080072a4
 8002334:	080072b0 	.word	0x080072b0
 8002338:	080072bc 	.word	0x080072bc

0800233c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff fd65 	bl	8001e10 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002346:	bf00      	nop
 8002348:	f7ff fd76 	bl	8001e38 <LL_FLASH_GetLatency>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1fa      	bne.n	8002348 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8002352:	f7ff fc7f 	bl	8001c54 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002356:	bf00      	nop
 8002358:	f7ff fc8c 	bl	8001c74 <LL_RCC_HSI_IsReady>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d1fa      	bne.n	8002358 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002362:	2010      	movs	r0, #16
 8002364:	f7ff fc98 	bl	8001c98 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fccd 	bl	8001d08 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff fcde 	bl	8001d30 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff fcef 	bl	8001d58 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800237a:	2000      	movs	r0, #0
 800237c:	f7ff fca2 	bl	8001cc4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002380:	bf00      	nop
 8002382:	f7ff fcb3 	bl	8001cec <LL_RCC_GetSysClkSource>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1fa      	bne.n	8002382 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <SystemClock_Config+0x68>)
 800238e:	f001 f8b5 	bl	80034fc <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8002392:	4804      	ldr	r0, [pc, #16]	; (80023a4 <SystemClock_Config+0x68>)
 8002394:	f001 f8e6 	bl	8003564 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002398:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800239c:	f7ff fcf0 	bl	8001d80 <LL_RCC_SetI2CClockSource>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	007a1200 	.word	0x007a1200

080023a8 <checkButtonState>:

/* USER CODE BEGIN 4 */

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	70fb      	strb	r3, [r7, #3]
 80023ba:	460b      	mov	r3, r1
 80023bc:	70bb      	strb	r3, [r7, #2]
 80023be:	4613      	mov	r3, r2
 80023c0:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	2300      	movs	r3, #0
 80023c8:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 80023ca:	e021      	b.n	8002410 <checkButtonState+0x68>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_RISE)) || (!LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_FALL)))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fd80 	bl	8001ed6 <LL_GPIO_IsInputPinSet>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <checkButtonState+0x3a>
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d00a      	beq.n	80023f8 <checkButtonState+0x50>
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fd75 	bl	8001ed6 <LL_GPIO_IsInputPinSet>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <checkButtonState+0x58>
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d103      	bne.n	8002400 <checkButtonState+0x58>
			{
				button_state += 1;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e001      	b.n	8002404 <checkButtonState+0x5c>
			}
			else
			{
				button_state = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	3301      	adds	r3, #1
 8002408:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 800240a:	2001      	movs	r0, #1
 800240c:	f001 f884 	bl	8003518 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	7e3b      	ldrb	r3, [r7, #24]
 8002414:	429a      	cmp	r2, r3
 8002416:	d203      	bcs.n	8002420 <checkButtonState+0x78>
 8002418:	7bba      	ldrb	r2, [r7, #14]
 800241a:	787b      	ldrb	r3, [r7, #1]
 800241c:	429a      	cmp	r2, r3
 800241e:	d3d5      	bcc.n	80023cc <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	7e3b      	ldrb	r3, [r7, #24]
 8002424:	429a      	cmp	r2, r3
 8002426:	d305      	bcc.n	8002434 <checkButtonState+0x8c>
 8002428:	7bba      	ldrb	r2, [r7, #14]
 800242a:	787b      	ldrb	r3, [r7, #1]
 800242c:	429a      	cmp	r2, r3
 800242e:	d801      	bhi.n	8002434 <checkButtonState+0x8c>
		{
			return 1;
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <checkButtonState+0x8e>
		}
		else
		{
			return 0;
 8002434:	2300      	movs	r3, #0
		}
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <updateDisplay>:

void updateDisplay(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
	resetDigits();
 8002446:	f7ff fda5 	bl	8001f94 <resetDigits>
	resetSegments();
 800244a:	f7ff fd75 	bl	8001f38 <resetSegments>
	char symbol = retazec[textposition+digit+x2];
 800244e:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <updateDisplay+0x8c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <updateDisplay+0x90>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	441a      	add	r2, r3
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <updateDisplay+0x94>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <updateDisplay+0x98>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	71fb      	strb	r3, [r7, #7]

	if (symbol=='.'){
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	2b2e      	cmp	r3, #46	; 0x2e
 8002468:	d110      	bne.n	800248c <updateDisplay+0x4c>
		char segments = decode_7seg(symbol);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fdb1 	bl	8001fd4 <decode_7seg>
 8002472:	4603      	mov	r3, r0
 8002474:	717b      	strb	r3, [r7, #5]

		display_symbol(segments, digit);
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <updateDisplay+0x90>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fdc8 	bl	8002014 <display_symbol>
        x2=1;
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <updateDisplay+0x94>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
		digit = digit+1;
		if(digit >= 4)
			digit=0;
			x2=0;
        }
}
 800248a:	e01b      	b.n	80024c4 <updateDisplay+0x84>
        char segments = decode_7seg(symbol);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fda0 	bl	8001fd4 <decode_7seg>
 8002494:	4603      	mov	r3, r0
 8002496:	71bb      	strb	r3, [r7, #6]
		display_symbol(segments, digit);
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <updateDisplay+0x90>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	79bb      	ldrb	r3, [r7, #6]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fdb7 	bl	8002014 <display_symbol>
		digit = digit+1;
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <updateDisplay+0x90>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <updateDisplay+0x90>)
 80024ae:	6013      	str	r3, [r2, #0]
		if(digit >= 4)
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <updateDisplay+0x90>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	dd02      	ble.n	80024be <updateDisplay+0x7e>
			digit=0;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <updateDisplay+0x90>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
			x2=0;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <updateDisplay+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	2000022c 	.word	0x2000022c
 80024d0:	20000228 	.word	0x20000228
 80024d4:	20000220 	.word	0x20000220
 80024d8:	20000240 	.word	0x20000240

080024dc <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	//1000 za s
	tim2count = tim2count + 1;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <TIM2_IRQHandler+0x7c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <TIM2_IRQHandler+0x7c>)
 80024e8:	6013      	str	r3, [r2, #0]
	if(tim2count >=500) {
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <TIM2_IRQHandler+0x7c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024f2:	db22      	blt.n	800253a <TIM2_IRQHandler+0x5e>
		tim2count = 0; //2 krat za sekundu sa vykona tento if
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <TIM2_IRQHandler+0x7c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

		//Posun textu
		if (orientation==0){
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <TIM2_IRQHandler+0x80>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <TIM2_IRQHandler+0x46>
			textposition = textposition + 1;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <TIM2_IRQHandler+0x84>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a15      	ldr	r2, [pc, #84]	; (8002560 <TIM2_IRQHandler+0x84>)
 800250a:	6013      	str	r3, [r2, #0]
			if((textposition+4)>=(length_retazec))
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <TIM2_IRQHandler+0x84>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3304      	adds	r3, #4
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <TIM2_IRQHandler+0x88>)
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	4293      	cmp	r3, r2
 8002518:	db0f      	blt.n	800253a <TIM2_IRQHandler+0x5e>
			    orientation=1;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <TIM2_IRQHandler+0x80>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e00b      	b.n	800253a <TIM2_IRQHandler+0x5e>
		}

		else{
			textposition = textposition - 1;
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <TIM2_IRQHandler+0x84>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3b01      	subs	r3, #1
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <TIM2_IRQHandler+0x84>)
 800252a:	6013      	str	r3, [r2, #0]
			if((textposition)<=0)
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <TIM2_IRQHandler+0x84>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	dc02      	bgt.n	800253a <TIM2_IRQHandler+0x5e>
			    orientation=0;
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <TIM2_IRQHandler+0x80>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
		}

	}

	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 800253a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800253e:	f7ff fca7 	bl	8001e90 <LL_TIM_IsActiveFlag_UPDATE>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <TIM2_IRQHandler+0x70>
	{
		updateDisplay();
 8002548:	f7ff ff7a 	bl	8002440 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 800254c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002550:	f7ff fc90 	bl	8001e74 <LL_TIM_ClearFlag_UPDATE>


}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000021c 	.word	0x2000021c
 800255c:	20000224 	.word	0x20000224
 8002560:	2000022c 	.word	0x2000022c
 8002564:	2000021b 	.word	0x2000021b

08002568 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 800256e:	2314      	movs	r3, #20
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	231e      	movs	r3, #30
 8002574:	2200      	movs	r2, #0
 8002576:	2108      	movs	r1, #8
 8002578:	4810      	ldr	r0, [pc, #64]	; (80025bc <EXTI3_IRQHandler+0x54>)
 800257a:	f7ff ff15 	bl	80023a8 <checkButtonState>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <EXTI3_IRQHandler+0x42>
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		//switch_state ^= 1;
		mode = mode+1;
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <EXTI3_IRQHandler+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <EXTI3_IRQHandler+0x58>)
 800258e:	701a      	strb	r2, [r3, #0]
		if (mode > 3) {
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <EXTI3_IRQHandler+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d902      	bls.n	800259e <EXTI3_IRQHandler+0x36>
			mode = 0;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <EXTI3_IRQHandler+0x58>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		}
		textposition = 0;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <EXTI3_IRQHandler+0x5c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
		orientation = 0;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <EXTI3_IRQHandler+0x60>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
	}

	/* Clear EXTI4 pending register flag */

		//type your code for pending register flag clear here:
	EXTI->PR |= (1 << 4);
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <EXTI3_IRQHandler+0x64>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <EXTI3_IRQHandler+0x64>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	6153      	str	r3, [r2, #20]
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	48000400 	.word	0x48000400
 80025c0:	2000021a 	.word	0x2000021a
 80025c4:	2000022c 	.word	0x2000022c
 80025c8:	20000224 	.word	0x20000224
 80025cc:	40010400 	.word	0x40010400

080025d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <NMI_Handler+0x4>

080025d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025da:	e7fe      	b.n	80025da <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler+0x4>

080025e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <UsageFault_Handler+0x4>

080025ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
	return 1;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_kill>:

int _kill(int pid, int sig)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002640:	f000 ffa0 	bl	8003584 <__errno>
 8002644:	4603      	mov	r3, r0
 8002646:	2216      	movs	r2, #22
 8002648:	601a      	str	r2, [r3, #0]
	return -1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_exit>:

void _exit (int status)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800265e:	f04f 31ff 	mov.w	r1, #4294967295
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffe7 	bl	8002636 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002668:	e7fe      	b.n	8002668 <_exit+0x12>

0800266a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e00a      	b.n	8002692 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800267c:	f3af 8000 	nop.w
 8002680:	4601      	mov	r1, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	60ba      	str	r2, [r7, #8]
 8002688:	b2ca      	uxtb	r2, r1
 800268a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbf0      	blt.n	800267c <_read+0x12>
	}

return len;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e009      	b.n	80026ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	60ba      	str	r2, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3301      	adds	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	dbf1      	blt.n	80026b6 <_write+0x12>
	}
	return len;
 80026d2:	687b      	ldr	r3, [r7, #4]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_close>:

int _close(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002704:	605a      	str	r2, [r3, #4]
	return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_isatty>:

int _isatty(int file)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	return 1;
 800271c:	2301      	movs	r3, #1
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f000 ff06 	bl	8003584 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20003000 	.word	0x20003000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000268 	.word	0x20000268

080027b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <__NVIC_GetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <LL_APB1_GRP1_EnableClock>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40021000 	.word	0x40021000

08002918 <LL_TIM_DisableARRPreload>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_TIM_SetClockSource>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_TIM_SetTriggerOutput>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_TIM_DisableMasterSlaveMode>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff ff93 	bl	80028e8 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80029c2:	f7ff ff07 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff57 	bl	8002880 <NVIC_EncodePriority>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4619      	mov	r1, r3
 80029d6:	201c      	movs	r0, #28
 80029d8:	f7ff ff28 	bl	800282c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80029dc:	201c      	movs	r0, #28
 80029de:	f7ff ff07 	bl	80027f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 80029e2:	2307      	movs	r3, #7
 80029e4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 80029ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029fc:	f000 fcf2 	bl	80033e4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a04:	f7ff ff88 	bl	8002918 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a0e:	f7ff ff93 	bl	8002938 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002a12:	2100      	movs	r1, #0
 8002a14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a18:	f7ff ffa3 	bl	8002962 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002a1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a20:	f7ff ffb2 	bl	8002988 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a32:	490e      	ldr	r1, [pc, #56]	; (8002a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a34:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <LoopForever+0xe>)
  movs r3, #0
 8002a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a48:	4c0b      	ldr	r4, [pc, #44]	; (8002a78 <LoopForever+0x16>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a56:	f7ff feab 	bl	80027b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f000 fd99 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5e:	f7ff fb8f 	bl	8002180 <main>

08002a62 <LoopForever>:

LoopForever:
    b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a64:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a70:	08007740 	.word	0x08007740
  ldr r2, =_sbss
 8002a74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a78:	20000264 	.word	0x20000264

08002a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_2_IRQHandler>
	...

08002a80 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4904      	ldr	r1, [pc, #16]	; (8002aa0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002aae:	6a1a      	ldr	r2, [r3, #32]
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	620b      	str	r3, [r1, #32]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <LL_EXTI_DisableIT_0_31+0x24>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	4904      	ldr	r1, [pc, #16]	; (8002aec <LL_EXTI_DisableIT_0_31+0x24>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010400 	.word	0x40010400

08002af0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <LL_EXTI_DisableIT_32_63+0x24>)
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <LL_EXTI_DisableIT_32_63+0x24>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	620b      	str	r3, [r1, #32]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40010400 	.word	0x40010400

08002b18 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]

}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40010400 	.word	0x40010400

08002b3c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	40010400 	.word	0x40010400

08002b60 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010400 	.word	0x40010400

08002b88 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	4904      	ldr	r1, [pc, #16]	; (8002bac <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010400 	.word	0x40010400

08002bb0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]

}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002bde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be0:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4904      	ldr	r1, [pc, #16]	; (8002c1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]

}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010400 	.word	0x40010400

08002c20 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010400 	.word	0x40010400

08002c48 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4904      	ldr	r1, [pc, #16]	; (8002c68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40010400 	.word	0x40010400

08002c6c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	4904      	ldr	r1, [pc, #16]	; (8002c8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40010400 	.word	0x40010400

08002c90 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60cb      	str	r3, [r1, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7a1b      	ldrb	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80cd 	beq.w	8002e90 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d061      	beq.n	8002dc2 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7a5b      	ldrb	r3, [r3, #9]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d01c      	beq.n	8002d40 <LL_EXTI_Init+0x60>
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	dc25      	bgt.n	8002d56 <LL_EXTI_Init+0x76>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <LL_EXTI_Init+0x34>
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d00b      	beq.n	8002d2a <LL_EXTI_Init+0x4a>
 8002d12:	e020      	b.n	8002d56 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff21 	bl	8002b60 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff feac 	bl	8002a80 <LL_EXTI_EnableIT_0_31>
          break;
 8002d28:	e018      	b.n	8002d5c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff feca 	bl	8002ac8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff feed 	bl	8002b18 <LL_EXTI_EnableEvent_0_31>
          break;
 8002d3e:	e00d      	b.n	8002d5c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe9b 	bl	8002a80 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fee2 	bl	8002b18 <LL_EXTI_EnableEvent_0_31>
          break;
 8002d54:	e002      	b.n	8002d5c <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
          break;
 8002d5a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7a9b      	ldrb	r3, [r3, #10]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02e      	beq.n	8002dc2 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7a9b      	ldrb	r3, [r3, #10]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d01c      	beq.n	8002da6 <LL_EXTI_Init+0xc6>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	dc25      	bgt.n	8002dbc <LL_EXTI_Init+0xdc>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <LL_EXTI_Init+0x9a>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d00b      	beq.n	8002d90 <LL_EXTI_Init+0xb0>
 8002d78:	e020      	b.n	8002dbc <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff86 	bl	8002c90 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff11 	bl	8002bb0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d8e:	e019      	b.n	8002dc4 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff2f 	bl	8002bf8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff52 	bl	8002c48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002da4:	e00e      	b.n	8002dc4 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff00 	bl	8002bb0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff47 	bl	8002c48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002dba:	e003      	b.n	8002dc4 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
            break;
 8002dc0:	e000      	b.n	8002dc4 <LL_EXTI_Init+0xe4>
        }
      }
 8002dc2:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d076      	beq.n	8002eba <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d01c      	beq.n	8002e0e <LL_EXTI_Init+0x12e>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	dc25      	bgt.n	8002e24 <LL_EXTI_Init+0x144>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <LL_EXTI_Init+0x102>
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00b      	beq.n	8002df8 <LL_EXTI_Init+0x118>
 8002de0:	e020      	b.n	8002e24 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fece 	bl	8002b88 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fe57 	bl	8002aa4 <LL_EXTI_EnableIT_32_63>
          break;
 8002df6:	e018      	b.n	8002e2a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe77 	bl	8002af0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fe98 	bl	8002b3c <LL_EXTI_EnableEvent_32_63>
          break;
 8002e0c:	e00d      	b.n	8002e2a <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fe46 	bl	8002aa4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe8d 	bl	8002b3c <LL_EXTI_EnableEvent_32_63>
          break;
 8002e22:	e002      	b.n	8002e2a <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
          break;
 8002e28:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7a9b      	ldrb	r3, [r3, #10]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d043      	beq.n	8002eba <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7a9b      	ldrb	r3, [r3, #10]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d01c      	beq.n	8002e74 <LL_EXTI_Init+0x194>
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	dc25      	bgt.n	8002e8a <LL_EXTI_Init+0x1aa>
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d002      	beq.n	8002e48 <LL_EXTI_Init+0x168>
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d00b      	beq.n	8002e5e <LL_EXTI_Init+0x17e>
 8002e46:	e020      	b.n	8002e8a <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff33 	bl	8002cb8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff febc 	bl	8002bd4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002e5c:	e02e      	b.n	8002ebc <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fedc 	bl	8002c20 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fefd 	bl	8002c6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e72:	e023      	b.n	8002ebc <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff feab 	bl	8002bd4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fef2 	bl	8002c6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e88:	e018      	b.n	8002ebc <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
            break;
 8002e8e:	e015      	b.n	8002ebc <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fe17 	bl	8002ac8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fe5e 	bl	8002b60 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fe21 	bl	8002af0 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fe68 	bl	8002b88 <LL_EXTI_DisableEvent_32_63>
 8002eb8:	e000      	b.n	8002ebc <LL_EXTI_Init+0x1dc>
      }
 8002eba:	bf00      	nop
#endif
  }
  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <LL_GPIO_SetPinMode>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b089      	sub	sp, #36	; 0x24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	613b      	str	r3, [r7, #16]
  return result;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2103      	movs	r1, #3
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	61bb      	str	r3, [r7, #24]
  return result;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	3724      	adds	r7, #36	; 0x24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_GPIO_SetPinOutputType>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	401a      	ands	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	605a      	str	r2, [r3, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_GPIO_SetPinSpeed>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	613b      	str	r3, [r7, #16]
  return result;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_GPIO_SetPinPull>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b089      	sub	sp, #36	; 0x24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	613b      	str	r3, [r7, #16]
  return result;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2103      	movs	r1, #3
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	61bb      	str	r3, [r7, #24]
  return result;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	60da      	str	r2, [r3, #12]
}
 8003004:	bf00      	nop
 8003006:	3724      	adds	r7, #36	; 0x24
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_GPIO_SetAFPin_0_7>:
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a1a      	ldr	r2, [r3, #32]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	613b      	str	r3, [r7, #16]
  return result;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	210f      	movs	r1, #15
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	61bb      	str	r3, [r7, #24]
  return result;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_GPIO_SetAFPin_8_15>:
{
 800306e:	b480      	push	{r7}
 8003070:	b089      	sub	sp, #36	; 0x24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	613b      	str	r3, [r7, #16]
  return result;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	210f      	movs	r1, #15
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61bb      	str	r3, [r7, #24]
  return result;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80030c4:	bf00      	nop
 80030c6:	3724      	adds	r7, #36	; 0x24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	613b      	str	r3, [r7, #16]
  return result;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030f2:	e051      	b.n	8003198 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d043      	beq.n	8003192 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d003      	beq.n	800311a <LL_GPIO_Init+0x4a>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d10e      	bne.n	8003138 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	461a      	mov	r2, r3
 8003120:	69b9      	ldr	r1, [r7, #24]
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff16 	bl	8002f54 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	461a      	mov	r2, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fef6 	bl	8002f24 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	461a      	mov	r2, r3
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff36 	bl	8002fb2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d11a      	bne.n	8003184 <LL_GPIO_Init+0xb4>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	60bb      	str	r3, [r7, #8]
  return result;
 800315a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b07      	cmp	r3, #7
 8003164:	d807      	bhi.n	8003176 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	461a      	mov	r2, r3
 800316c:	69b9      	ldr	r1, [r7, #24]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff4e 	bl	8003010 <LL_GPIO_SetAFPin_0_7>
 8003174:	e006      	b.n	8003184 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	461a      	mov	r2, r3
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff75 	bl	800306e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	461a      	mov	r2, r3
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fe9a 	bl	8002ec6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1a6      	bne.n	80030f4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <LL_I2C_Enable>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_I2C_Disable>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 0201 	bic.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_I2C_ConfigFilters>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	0219      	lsls	r1, r3, #8
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	430b      	orrs	r3, r1
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_I2C_SetOwnAddress1>:
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	430a      	orrs	r2, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_I2C_EnableOwnAddress1>:
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_I2C_DisableOwnAddress1>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_I2C_SetTiming>:
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	611a      	str	r2, [r3, #16]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_I2C_SetMode>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_I2C_AcknowledgeNextData>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	605a      	str	r2, [r3, #4]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff65 	bl	80031d0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6899      	ldr	r1, [r3, #8]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff6d 	bl	80031f0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffb6 	bl	800328e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff44 	bl	80031b0 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ffa0 	bl	800326e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6919      	ldr	r1, [r3, #16]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	461a      	mov	r2, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff70 	bl	800321e <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff81 	bl	800324e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ffa9 	bl	80032aa <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb6 	bl	80032d0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <LL_TIM_SetPrescaler>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_TIM_SetAutoReload>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_TIM_SetRepetitionCounter>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	615a      	str	r2, [r3, #20]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <LL_TIM_Init+0xd0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d007      	beq.n	800340c <LL_TIM_Init+0x28>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d003      	beq.n	800340c <LL_TIM_Init+0x28>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <LL_TIM_Init+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d106      	bne.n	800341a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <LL_TIM_Init+0xd0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <LL_TIM_Init+0x66>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d00f      	beq.n	800344a <LL_TIM_Init+0x66>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <LL_TIM_Init+0xd4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00b      	beq.n	800344a <LL_TIM_Init+0x66>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a21      	ldr	r2, [pc, #132]	; (80034bc <LL_TIM_Init+0xd8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <LL_TIM_Init+0x66>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a20      	ldr	r2, [pc, #128]	; (80034c0 <LL_TIM_Init+0xdc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <LL_TIM_Init+0x66>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1f      	ldr	r2, [pc, #124]	; (80034c4 <LL_TIM_Init+0xe0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d106      	bne.n	8003458 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4619      	mov	r1, r3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff90 	bl	800338a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff7c 	bl	800336e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <LL_TIM_Init+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <LL_TIM_Init+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <LL_TIM_Init+0xd8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <LL_TIM_Init+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <LL_TIM_Init+0xdc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <LL_TIM_Init+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <LL_TIM_Init+0xe0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d105      	bne.n	80034a2 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff82 	bl	80033a6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff8d 	bl	80033c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800

080034c8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <LL_InitTick+0x30>)
 80034dc:	3b01      	subs	r3, #1
 80034de:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <LL_InitTick+0x30>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <LL_InitTick+0x30>)
 80034e8:	2205      	movs	r2, #5
 80034ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000e010 	.word	0xe000e010

080034fc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffdd 	bl	80034c8 <LL_InitTick>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <LL_mDelay+0x48>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003526:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d00c      	beq.n	800354a <LL_mDelay+0x32>
  {
    Delay++;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3301      	adds	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003536:	e008      	b.n	800354a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <LL_mDelay+0x48>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <LL_mDelay+0x32>
    {
      Delay--;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
  while (Delay)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f3      	bne.n	8003538 <LL_mDelay+0x20>
    }
  }
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <LL_SetSystemCoreClock+0x1c>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000004 	.word	0x20000004

08003584 <__errno>:
 8003584:	4b01      	ldr	r3, [pc, #4]	; (800358c <__errno+0x8>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000008 	.word	0x20000008

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4d0d      	ldr	r5, [pc, #52]	; (80035c8 <__libc_init_array+0x38>)
 8003594:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003596:	1b64      	subs	r4, r4, r5
 8003598:	10a4      	asrs	r4, r4, #2
 800359a:	2600      	movs	r6, #0
 800359c:	42a6      	cmp	r6, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	4d0b      	ldr	r5, [pc, #44]	; (80035d0 <__libc_init_array+0x40>)
 80035a2:	4c0c      	ldr	r4, [pc, #48]	; (80035d4 <__libc_init_array+0x44>)
 80035a4:	f003 fe6a 	bl	800727c <_init>
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	2600      	movs	r6, #0
 80035ae:	42a6      	cmp	r6, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b8:	4798      	blx	r3
 80035ba:	3601      	adds	r6, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c2:	4798      	blx	r3
 80035c4:	3601      	adds	r6, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08007738 	.word	0x08007738
 80035cc:	08007738 	.word	0x08007738
 80035d0:	08007738 	.word	0x08007738
 80035d4:	0800773c 	.word	0x0800773c

080035d8 <memset>:
 80035d8:	4402      	add	r2, r0
 80035da:	4603      	mov	r3, r0
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <memset+0xa>
 80035e0:	4770      	bx	lr
 80035e2:	f803 1b01 	strb.w	r1, [r3], #1
 80035e6:	e7f9      	b.n	80035dc <memset+0x4>

080035e8 <__cvt>:
 80035e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	ec55 4b10 	vmov	r4, r5, d0
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	460e      	mov	r6, r1
 80035f4:	4619      	mov	r1, r3
 80035f6:	462b      	mov	r3, r5
 80035f8:	bfbb      	ittet	lt
 80035fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80035fe:	461d      	movlt	r5, r3
 8003600:	2300      	movge	r3, #0
 8003602:	232d      	movlt	r3, #45	; 0x2d
 8003604:	700b      	strb	r3, [r1, #0]
 8003606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003608:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800360c:	4691      	mov	r9, r2
 800360e:	f023 0820 	bic.w	r8, r3, #32
 8003612:	bfbc      	itt	lt
 8003614:	4622      	movlt	r2, r4
 8003616:	4614      	movlt	r4, r2
 8003618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800361c:	d005      	beq.n	800362a <__cvt+0x42>
 800361e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003622:	d100      	bne.n	8003626 <__cvt+0x3e>
 8003624:	3601      	adds	r6, #1
 8003626:	2102      	movs	r1, #2
 8003628:	e000      	b.n	800362c <__cvt+0x44>
 800362a:	2103      	movs	r1, #3
 800362c:	ab03      	add	r3, sp, #12
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	ab02      	add	r3, sp, #8
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	ec45 4b10 	vmov	d0, r4, r5
 8003638:	4653      	mov	r3, sl
 800363a:	4632      	mov	r2, r6
 800363c:	f000 fcec 	bl	8004018 <_dtoa_r>
 8003640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003644:	4607      	mov	r7, r0
 8003646:	d102      	bne.n	800364e <__cvt+0x66>
 8003648:	f019 0f01 	tst.w	r9, #1
 800364c:	d022      	beq.n	8003694 <__cvt+0xac>
 800364e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003652:	eb07 0906 	add.w	r9, r7, r6
 8003656:	d110      	bne.n	800367a <__cvt+0x92>
 8003658:	783b      	ldrb	r3, [r7, #0]
 800365a:	2b30      	cmp	r3, #48	; 0x30
 800365c:	d10a      	bne.n	8003674 <__cvt+0x8c>
 800365e:	2200      	movs	r2, #0
 8003660:	2300      	movs	r3, #0
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fd fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800366a:	b918      	cbnz	r0, 8003674 <__cvt+0x8c>
 800366c:	f1c6 0601 	rsb	r6, r6, #1
 8003670:	f8ca 6000 	str.w	r6, [sl]
 8003674:	f8da 3000 	ldr.w	r3, [sl]
 8003678:	4499      	add	r9, r3
 800367a:	2200      	movs	r2, #0
 800367c:	2300      	movs	r3, #0
 800367e:	4620      	mov	r0, r4
 8003680:	4629      	mov	r1, r5
 8003682:	f7fd fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 8003686:	b108      	cbz	r0, 800368c <__cvt+0xa4>
 8003688:	f8cd 900c 	str.w	r9, [sp, #12]
 800368c:	2230      	movs	r2, #48	; 0x30
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	454b      	cmp	r3, r9
 8003692:	d307      	bcc.n	80036a4 <__cvt+0xbc>
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003698:	1bdb      	subs	r3, r3, r7
 800369a:	4638      	mov	r0, r7
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	b004      	add	sp, #16
 80036a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	9103      	str	r1, [sp, #12]
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e7f0      	b.n	800368e <__cvt+0xa6>

080036ac <__exponent>:
 80036ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ae:	4603      	mov	r3, r0
 80036b0:	2900      	cmp	r1, #0
 80036b2:	bfb8      	it	lt
 80036b4:	4249      	neglt	r1, r1
 80036b6:	f803 2b02 	strb.w	r2, [r3], #2
 80036ba:	bfb4      	ite	lt
 80036bc:	222d      	movlt	r2, #45	; 0x2d
 80036be:	222b      	movge	r2, #43	; 0x2b
 80036c0:	2909      	cmp	r1, #9
 80036c2:	7042      	strb	r2, [r0, #1]
 80036c4:	dd2a      	ble.n	800371c <__exponent+0x70>
 80036c6:	f10d 0407 	add.w	r4, sp, #7
 80036ca:	46a4      	mov	ip, r4
 80036cc:	270a      	movs	r7, #10
 80036ce:	46a6      	mov	lr, r4
 80036d0:	460a      	mov	r2, r1
 80036d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80036d6:	fb07 1516 	mls	r5, r7, r6, r1
 80036da:	3530      	adds	r5, #48	; 0x30
 80036dc:	2a63      	cmp	r2, #99	; 0x63
 80036de:	f104 34ff 	add.w	r4, r4, #4294967295
 80036e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80036e6:	4631      	mov	r1, r6
 80036e8:	dcf1      	bgt.n	80036ce <__exponent+0x22>
 80036ea:	3130      	adds	r1, #48	; 0x30
 80036ec:	f1ae 0502 	sub.w	r5, lr, #2
 80036f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80036f4:	1c44      	adds	r4, r0, #1
 80036f6:	4629      	mov	r1, r5
 80036f8:	4561      	cmp	r1, ip
 80036fa:	d30a      	bcc.n	8003712 <__exponent+0x66>
 80036fc:	f10d 0209 	add.w	r2, sp, #9
 8003700:	eba2 020e 	sub.w	r2, r2, lr
 8003704:	4565      	cmp	r5, ip
 8003706:	bf88      	it	hi
 8003708:	2200      	movhi	r2, #0
 800370a:	4413      	add	r3, r2
 800370c:	1a18      	subs	r0, r3, r0
 800370e:	b003      	add	sp, #12
 8003710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003716:	f804 2f01 	strb.w	r2, [r4, #1]!
 800371a:	e7ed      	b.n	80036f8 <__exponent+0x4c>
 800371c:	2330      	movs	r3, #48	; 0x30
 800371e:	3130      	adds	r1, #48	; 0x30
 8003720:	7083      	strb	r3, [r0, #2]
 8003722:	70c1      	strb	r1, [r0, #3]
 8003724:	1d03      	adds	r3, r0, #4
 8003726:	e7f1      	b.n	800370c <__exponent+0x60>

08003728 <_printf_float>:
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	ed2d 8b02 	vpush	{d8}
 8003730:	b08d      	sub	sp, #52	; 0x34
 8003732:	460c      	mov	r4, r1
 8003734:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003738:	4616      	mov	r6, r2
 800373a:	461f      	mov	r7, r3
 800373c:	4605      	mov	r5, r0
 800373e:	f001 fa57 	bl	8004bf0 <_localeconv_r>
 8003742:	f8d0 a000 	ldr.w	sl, [r0]
 8003746:	4650      	mov	r0, sl
 8003748:	f7fc fd42 	bl	80001d0 <strlen>
 800374c:	2300      	movs	r3, #0
 800374e:	930a      	str	r3, [sp, #40]	; 0x28
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	9305      	str	r3, [sp, #20]
 8003754:	f8d8 3000 	ldr.w	r3, [r8]
 8003758:	f894 b018 	ldrb.w	fp, [r4, #24]
 800375c:	3307      	adds	r3, #7
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	f8c8 2000 	str.w	r2, [r8]
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003772:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003780:	ee08 0a10 	vmov	s16, r0
 8003784:	4b9f      	ldr	r3, [pc, #636]	; (8003a04 <_printf_float+0x2dc>)
 8003786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	f7fd f9cd 	bl	8000b2c <__aeabi_dcmpun>
 8003792:	bb88      	cbnz	r0, 80037f8 <_printf_float+0xd0>
 8003794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003798:	4b9a      	ldr	r3, [pc, #616]	; (8003a04 <_printf_float+0x2dc>)
 800379a:	f04f 32ff 	mov.w	r2, #4294967295
 800379e:	f7fd f9a7 	bl	8000af0 <__aeabi_dcmple>
 80037a2:	bb48      	cbnz	r0, 80037f8 <_printf_float+0xd0>
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	4640      	mov	r0, r8
 80037aa:	4649      	mov	r1, r9
 80037ac:	f7fd f996 	bl	8000adc <__aeabi_dcmplt>
 80037b0:	b110      	cbz	r0, 80037b8 <_printf_float+0x90>
 80037b2:	232d      	movs	r3, #45	; 0x2d
 80037b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b8:	4b93      	ldr	r3, [pc, #588]	; (8003a08 <_printf_float+0x2e0>)
 80037ba:	4894      	ldr	r0, [pc, #592]	; (8003a0c <_printf_float+0x2e4>)
 80037bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80037c0:	bf94      	ite	ls
 80037c2:	4698      	movls	r8, r3
 80037c4:	4680      	movhi	r8, r0
 80037c6:	2303      	movs	r3, #3
 80037c8:	6123      	str	r3, [r4, #16]
 80037ca:	9b05      	ldr	r3, [sp, #20]
 80037cc:	f023 0204 	bic.w	r2, r3, #4
 80037d0:	6022      	str	r2, [r4, #0]
 80037d2:	f04f 0900 	mov.w	r9, #0
 80037d6:	9700      	str	r7, [sp, #0]
 80037d8:	4633      	mov	r3, r6
 80037da:	aa0b      	add	r2, sp, #44	; 0x2c
 80037dc:	4621      	mov	r1, r4
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 f9d8 	bl	8003b94 <_printf_common>
 80037e4:	3001      	adds	r0, #1
 80037e6:	f040 8090 	bne.w	800390a <_printf_float+0x1e2>
 80037ea:	f04f 30ff 	mov.w	r0, #4294967295
 80037ee:	b00d      	add	sp, #52	; 0x34
 80037f0:	ecbd 8b02 	vpop	{d8}
 80037f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	4640      	mov	r0, r8
 80037fe:	4649      	mov	r1, r9
 8003800:	f7fd f994 	bl	8000b2c <__aeabi_dcmpun>
 8003804:	b140      	cbz	r0, 8003818 <_printf_float+0xf0>
 8003806:	464b      	mov	r3, r9
 8003808:	2b00      	cmp	r3, #0
 800380a:	bfbc      	itt	lt
 800380c:	232d      	movlt	r3, #45	; 0x2d
 800380e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003812:	487f      	ldr	r0, [pc, #508]	; (8003a10 <_printf_float+0x2e8>)
 8003814:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <_printf_float+0x2ec>)
 8003816:	e7d1      	b.n	80037bc <_printf_float+0x94>
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800381e:	9206      	str	r2, [sp, #24]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	d13f      	bne.n	80038a4 <_printf_float+0x17c>
 8003824:	2306      	movs	r3, #6
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	9b05      	ldr	r3, [sp, #20]
 800382a:	6861      	ldr	r1, [r4, #4]
 800382c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003830:	2300      	movs	r3, #0
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	ab0a      	add	r3, sp, #40	; 0x28
 8003836:	e9cd b301 	strd	fp, r3, [sp, #4]
 800383a:	ab09      	add	r3, sp, #36	; 0x24
 800383c:	ec49 8b10 	vmov	d0, r8, r9
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003848:	4628      	mov	r0, r5
 800384a:	f7ff fecd 	bl	80035e8 <__cvt>
 800384e:	9b06      	ldr	r3, [sp, #24]
 8003850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003852:	2b47      	cmp	r3, #71	; 0x47
 8003854:	4680      	mov	r8, r0
 8003856:	d108      	bne.n	800386a <_printf_float+0x142>
 8003858:	1cc8      	adds	r0, r1, #3
 800385a:	db02      	blt.n	8003862 <_printf_float+0x13a>
 800385c:	6863      	ldr	r3, [r4, #4]
 800385e:	4299      	cmp	r1, r3
 8003860:	dd41      	ble.n	80038e6 <_printf_float+0x1be>
 8003862:	f1ab 0b02 	sub.w	fp, fp, #2
 8003866:	fa5f fb8b 	uxtb.w	fp, fp
 800386a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800386e:	d820      	bhi.n	80038b2 <_printf_float+0x18a>
 8003870:	3901      	subs	r1, #1
 8003872:	465a      	mov	r2, fp
 8003874:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003878:	9109      	str	r1, [sp, #36]	; 0x24
 800387a:	f7ff ff17 	bl	80036ac <__exponent>
 800387e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003880:	1813      	adds	r3, r2, r0
 8003882:	2a01      	cmp	r2, #1
 8003884:	4681      	mov	r9, r0
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	dc02      	bgt.n	8003890 <_printf_float+0x168>
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	07d2      	lsls	r2, r2, #31
 800388e:	d501      	bpl.n	8003894 <_printf_float+0x16c>
 8003890:	3301      	adds	r3, #1
 8003892:	6123      	str	r3, [r4, #16]
 8003894:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003898:	2b00      	cmp	r3, #0
 800389a:	d09c      	beq.n	80037d6 <_printf_float+0xae>
 800389c:	232d      	movs	r3, #45	; 0x2d
 800389e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a2:	e798      	b.n	80037d6 <_printf_float+0xae>
 80038a4:	9a06      	ldr	r2, [sp, #24]
 80038a6:	2a47      	cmp	r2, #71	; 0x47
 80038a8:	d1be      	bne.n	8003828 <_printf_float+0x100>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1bc      	bne.n	8003828 <_printf_float+0x100>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e7b9      	b.n	8003826 <_printf_float+0xfe>
 80038b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80038b6:	d118      	bne.n	80038ea <_printf_float+0x1c2>
 80038b8:	2900      	cmp	r1, #0
 80038ba:	6863      	ldr	r3, [r4, #4]
 80038bc:	dd0b      	ble.n	80038d6 <_printf_float+0x1ae>
 80038be:	6121      	str	r1, [r4, #16]
 80038c0:	b913      	cbnz	r3, 80038c8 <_printf_float+0x1a0>
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	07d0      	lsls	r0, r2, #31
 80038c6:	d502      	bpl.n	80038ce <_printf_float+0x1a6>
 80038c8:	3301      	adds	r3, #1
 80038ca:	440b      	add	r3, r1
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	e7de      	b.n	8003894 <_printf_float+0x16c>
 80038d6:	b913      	cbnz	r3, 80038de <_printf_float+0x1b6>
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	07d2      	lsls	r2, r2, #31
 80038dc:	d501      	bpl.n	80038e2 <_printf_float+0x1ba>
 80038de:	3302      	adds	r3, #2
 80038e0:	e7f4      	b.n	80038cc <_printf_float+0x1a4>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e7f2      	b.n	80038cc <_printf_float+0x1a4>
 80038e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80038ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ec:	4299      	cmp	r1, r3
 80038ee:	db05      	blt.n	80038fc <_printf_float+0x1d4>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	6121      	str	r1, [r4, #16]
 80038f4:	07d8      	lsls	r0, r3, #31
 80038f6:	d5ea      	bpl.n	80038ce <_printf_float+0x1a6>
 80038f8:	1c4b      	adds	r3, r1, #1
 80038fa:	e7e7      	b.n	80038cc <_printf_float+0x1a4>
 80038fc:	2900      	cmp	r1, #0
 80038fe:	bfd4      	ite	le
 8003900:	f1c1 0202 	rsble	r2, r1, #2
 8003904:	2201      	movgt	r2, #1
 8003906:	4413      	add	r3, r2
 8003908:	e7e0      	b.n	80038cc <_printf_float+0x1a4>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	055a      	lsls	r2, r3, #21
 800390e:	d407      	bmi.n	8003920 <_printf_float+0x1f8>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	4642      	mov	r2, r8
 8003914:	4631      	mov	r1, r6
 8003916:	4628      	mov	r0, r5
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	d12c      	bne.n	8003978 <_printf_float+0x250>
 800391e:	e764      	b.n	80037ea <_printf_float+0xc2>
 8003920:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003924:	f240 80e0 	bls.w	8003ae8 <_printf_float+0x3c0>
 8003928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800392c:	2200      	movs	r2, #0
 800392e:	2300      	movs	r3, #0
 8003930:	f7fd f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8003934:	2800      	cmp	r0, #0
 8003936:	d034      	beq.n	80039a2 <_printf_float+0x27a>
 8003938:	4a37      	ldr	r2, [pc, #220]	; (8003a18 <_printf_float+0x2f0>)
 800393a:	2301      	movs	r3, #1
 800393c:	4631      	mov	r1, r6
 800393e:	4628      	mov	r0, r5
 8003940:	47b8      	blx	r7
 8003942:	3001      	adds	r0, #1
 8003944:	f43f af51 	beq.w	80037ea <_printf_float+0xc2>
 8003948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800394c:	429a      	cmp	r2, r3
 800394e:	db02      	blt.n	8003956 <_printf_float+0x22e>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	07d8      	lsls	r0, r3, #31
 8003954:	d510      	bpl.n	8003978 <_printf_float+0x250>
 8003956:	ee18 3a10 	vmov	r3, s16
 800395a:	4652      	mov	r2, sl
 800395c:	4631      	mov	r1, r6
 800395e:	4628      	mov	r0, r5
 8003960:	47b8      	blx	r7
 8003962:	3001      	adds	r0, #1
 8003964:	f43f af41 	beq.w	80037ea <_printf_float+0xc2>
 8003968:	f04f 0800 	mov.w	r8, #0
 800396c:	f104 091a 	add.w	r9, r4, #26
 8003970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	4543      	cmp	r3, r8
 8003976:	dc09      	bgt.n	800398c <_printf_float+0x264>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	f100 8105 	bmi.w	8003b8a <_printf_float+0x462>
 8003980:	68e0      	ldr	r0, [r4, #12]
 8003982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003984:	4298      	cmp	r0, r3
 8003986:	bfb8      	it	lt
 8003988:	4618      	movlt	r0, r3
 800398a:	e730      	b.n	80037ee <_printf_float+0xc6>
 800398c:	2301      	movs	r3, #1
 800398e:	464a      	mov	r2, r9
 8003990:	4631      	mov	r1, r6
 8003992:	4628      	mov	r0, r5
 8003994:	47b8      	blx	r7
 8003996:	3001      	adds	r0, #1
 8003998:	f43f af27 	beq.w	80037ea <_printf_float+0xc2>
 800399c:	f108 0801 	add.w	r8, r8, #1
 80039a0:	e7e6      	b.n	8003970 <_printf_float+0x248>
 80039a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	dc39      	bgt.n	8003a1c <_printf_float+0x2f4>
 80039a8:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <_printf_float+0x2f0>)
 80039aa:	2301      	movs	r3, #1
 80039ac:	4631      	mov	r1, r6
 80039ae:	4628      	mov	r0, r5
 80039b0:	47b8      	blx	r7
 80039b2:	3001      	adds	r0, #1
 80039b4:	f43f af19 	beq.w	80037ea <_printf_float+0xc2>
 80039b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039bc:	4313      	orrs	r3, r2
 80039be:	d102      	bne.n	80039c6 <_printf_float+0x29e>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	07d9      	lsls	r1, r3, #31
 80039c4:	d5d8      	bpl.n	8003978 <_printf_float+0x250>
 80039c6:	ee18 3a10 	vmov	r3, s16
 80039ca:	4652      	mov	r2, sl
 80039cc:	4631      	mov	r1, r6
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	f43f af09 	beq.w	80037ea <_printf_float+0xc2>
 80039d8:	f04f 0900 	mov.w	r9, #0
 80039dc:	f104 0a1a 	add.w	sl, r4, #26
 80039e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039e2:	425b      	negs	r3, r3
 80039e4:	454b      	cmp	r3, r9
 80039e6:	dc01      	bgt.n	80039ec <_printf_float+0x2c4>
 80039e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ea:	e792      	b.n	8003912 <_printf_float+0x1ea>
 80039ec:	2301      	movs	r3, #1
 80039ee:	4652      	mov	r2, sl
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b8      	blx	r7
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f aef7 	beq.w	80037ea <_printf_float+0xc2>
 80039fc:	f109 0901 	add.w	r9, r9, #1
 8003a00:	e7ee      	b.n	80039e0 <_printf_float+0x2b8>
 8003a02:	bf00      	nop
 8003a04:	7fefffff 	.word	0x7fefffff
 8003a08:	08007318 	.word	0x08007318
 8003a0c:	0800731c 	.word	0x0800731c
 8003a10:	08007324 	.word	0x08007324
 8003a14:	08007320 	.word	0x08007320
 8003a18:	08007328 	.word	0x08007328
 8003a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a20:	429a      	cmp	r2, r3
 8003a22:	bfa8      	it	ge
 8003a24:	461a      	movge	r2, r3
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	4691      	mov	r9, r2
 8003a2a:	dc37      	bgt.n	8003a9c <_printf_float+0x374>
 8003a2c:	f04f 0b00 	mov.w	fp, #0
 8003a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a34:	f104 021a 	add.w	r2, r4, #26
 8003a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a3a:	9305      	str	r3, [sp, #20]
 8003a3c:	eba3 0309 	sub.w	r3, r3, r9
 8003a40:	455b      	cmp	r3, fp
 8003a42:	dc33      	bgt.n	8003aac <_printf_float+0x384>
 8003a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	db3b      	blt.n	8003ac4 <_printf_float+0x39c>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	07da      	lsls	r2, r3, #31
 8003a50:	d438      	bmi.n	8003ac4 <_printf_float+0x39c>
 8003a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a54:	9b05      	ldr	r3, [sp, #20]
 8003a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	eba2 0901 	sub.w	r9, r2, r1
 8003a5e:	4599      	cmp	r9, r3
 8003a60:	bfa8      	it	ge
 8003a62:	4699      	movge	r9, r3
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	dc35      	bgt.n	8003ad6 <_printf_float+0x3ae>
 8003a6a:	f04f 0800 	mov.w	r8, #0
 8003a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a72:	f104 0a1a 	add.w	sl, r4, #26
 8003a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	eba3 0309 	sub.w	r3, r3, r9
 8003a80:	4543      	cmp	r3, r8
 8003a82:	f77f af79 	ble.w	8003978 <_printf_float+0x250>
 8003a86:	2301      	movs	r3, #1
 8003a88:	4652      	mov	r2, sl
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	f43f aeaa 	beq.w	80037ea <_printf_float+0xc2>
 8003a96:	f108 0801 	add.w	r8, r8, #1
 8003a9a:	e7ec      	b.n	8003a76 <_printf_float+0x34e>
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	47b8      	blx	r7
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d1c0      	bne.n	8003a2c <_printf_float+0x304>
 8003aaa:	e69e      	b.n	80037ea <_printf_float+0xc2>
 8003aac:	2301      	movs	r3, #1
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	9205      	str	r2, [sp, #20]
 8003ab4:	47b8      	blx	r7
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	f43f ae97 	beq.w	80037ea <_printf_float+0xc2>
 8003abc:	9a05      	ldr	r2, [sp, #20]
 8003abe:	f10b 0b01 	add.w	fp, fp, #1
 8003ac2:	e7b9      	b.n	8003a38 <_printf_float+0x310>
 8003ac4:	ee18 3a10 	vmov	r3, s16
 8003ac8:	4652      	mov	r2, sl
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d1be      	bne.n	8003a52 <_printf_float+0x32a>
 8003ad4:	e689      	b.n	80037ea <_printf_float+0xc2>
 8003ad6:	9a05      	ldr	r2, [sp, #20]
 8003ad8:	464b      	mov	r3, r9
 8003ada:	4442      	add	r2, r8
 8003adc:	4631      	mov	r1, r6
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b8      	blx	r7
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d1c1      	bne.n	8003a6a <_printf_float+0x342>
 8003ae6:	e680      	b.n	80037ea <_printf_float+0xc2>
 8003ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aea:	2a01      	cmp	r2, #1
 8003aec:	dc01      	bgt.n	8003af2 <_printf_float+0x3ca>
 8003aee:	07db      	lsls	r3, r3, #31
 8003af0:	d538      	bpl.n	8003b64 <_printf_float+0x43c>
 8003af2:	2301      	movs	r3, #1
 8003af4:	4642      	mov	r2, r8
 8003af6:	4631      	mov	r1, r6
 8003af8:	4628      	mov	r0, r5
 8003afa:	47b8      	blx	r7
 8003afc:	3001      	adds	r0, #1
 8003afe:	f43f ae74 	beq.w	80037ea <_printf_float+0xc2>
 8003b02:	ee18 3a10 	vmov	r3, s16
 8003b06:	4652      	mov	r2, sl
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	47b8      	blx	r7
 8003b0e:	3001      	adds	r0, #1
 8003b10:	f43f ae6b 	beq.w	80037ea <_printf_float+0xc2>
 8003b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f7fc ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b20:	b9d8      	cbnz	r0, 8003b5a <_printf_float+0x432>
 8003b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b24:	f108 0201 	add.w	r2, r8, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	47b8      	blx	r7
 8003b30:	3001      	adds	r0, #1
 8003b32:	d10e      	bne.n	8003b52 <_printf_float+0x42a>
 8003b34:	e659      	b.n	80037ea <_printf_float+0xc2>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	47b8      	blx	r7
 8003b40:	3001      	adds	r0, #1
 8003b42:	f43f ae52 	beq.w	80037ea <_printf_float+0xc2>
 8003b46:	f108 0801 	add.w	r8, r8, #1
 8003b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	4543      	cmp	r3, r8
 8003b50:	dcf1      	bgt.n	8003b36 <_printf_float+0x40e>
 8003b52:	464b      	mov	r3, r9
 8003b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b58:	e6dc      	b.n	8003914 <_printf_float+0x1ec>
 8003b5a:	f04f 0800 	mov.w	r8, #0
 8003b5e:	f104 0a1a 	add.w	sl, r4, #26
 8003b62:	e7f2      	b.n	8003b4a <_printf_float+0x422>
 8003b64:	2301      	movs	r3, #1
 8003b66:	4642      	mov	r2, r8
 8003b68:	e7df      	b.n	8003b2a <_printf_float+0x402>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	464a      	mov	r2, r9
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	f43f ae38 	beq.w	80037ea <_printf_float+0xc2>
 8003b7a:	f108 0801 	add.w	r8, r8, #1
 8003b7e:	68e3      	ldr	r3, [r4, #12]
 8003b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	4543      	cmp	r3, r8
 8003b86:	dcf0      	bgt.n	8003b6a <_printf_float+0x442>
 8003b88:	e6fa      	b.n	8003980 <_printf_float+0x258>
 8003b8a:	f04f 0800 	mov.w	r8, #0
 8003b8e:	f104 0919 	add.w	r9, r4, #25
 8003b92:	e7f4      	b.n	8003b7e <_printf_float+0x456>

08003b94 <_printf_common>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	4616      	mov	r6, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfb8      	it	lt
 8003ba8:	4613      	movlt	r3, r2
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	b10a      	cbz	r2, 8003bba <_printf_common+0x26>
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	6833      	ldrmi	r3, [r6, #0]
 8003bc2:	3302      	addmi	r3, #2
 8003bc4:	6033      	strmi	r3, [r6, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	f015 0506 	ands.w	r5, r5, #6
 8003bcc:	d106      	bne.n	8003bdc <_printf_common+0x48>
 8003bce:	f104 0a19 	add.w	sl, r4, #25
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	6832      	ldr	r2, [r6, #0]
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc26      	bgt.n	8003c2a <_printf_common+0x96>
 8003bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003be0:	1e13      	subs	r3, r2, #0
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	bf18      	it	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d42b      	bmi.n	8003c44 <_printf_common+0xb0>
 8003bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d01e      	beq.n	8003c38 <_printf_common+0xa4>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	68e5      	ldr	r5, [r4, #12]
 8003bfe:	6832      	ldr	r2, [r6, #0]
 8003c00:	f003 0306 	and.w	r3, r3, #6
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	bf08      	it	eq
 8003c08:	1aad      	subeq	r5, r5, r2
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	bf0c      	ite	eq
 8003c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c14:	2500      	movne	r5, #0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfc4      	itt	gt
 8003c1a:	1a9b      	subgt	r3, r3, r2
 8003c1c:	18ed      	addgt	r5, r5, r3
 8003c1e:	2600      	movs	r6, #0
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xc8>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xa8>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c0      	blx	r8
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xac>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c6      	b.n	8003bd2 <_printf_common+0x3e>
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	2030      	movs	r0, #48	; 0x30
 8003c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4e:	4422      	add	r2, r4
 8003c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c58:	3302      	adds	r3, #2
 8003c5a:	e7c7      	b.n	8003bec <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa4>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x8e>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	460c      	mov	r4, r1
 8003c76:	4691      	mov	r9, r2
 8003c78:	7e27      	ldrb	r7, [r4, #24]
 8003c7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c7c:	2f78      	cmp	r7, #120	; 0x78
 8003c7e:	4680      	mov	r8, r0
 8003c80:	469a      	mov	sl, r3
 8003c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	; 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d8 	beq.w	8003e42 <_printf_i+0x1d2>
 8003c92:	2f58      	cmp	r7, #88	; 0x58
 8003c94:	f000 80a3 	beq.w	8003dde <_printf_i+0x16e>
 8003c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a001      	add	r0, pc, #4	; (adr r0, 8003cb0 <_printf_i+0x40>)
 8003cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e29 	.word	0x08003e29
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003e0b 	.word	0x08003e0b
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e4b 	.word	0x08003e4b
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003e13 	.word	0x08003e13
 8003d08:	680b      	ldr	r3, [r1, #0]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	600a      	str	r2, [r1, #0]
 8003d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a3      	b.n	8003e64 <_printf_i+0x1f4>
 8003d1c:	6825      	ldr	r5, [r4, #0]
 8003d1e:	6808      	ldr	r0, [r1, #0]
 8003d20:	062e      	lsls	r6, r5, #24
 8003d22:	f100 0304 	add.w	r3, r0, #4
 8003d26:	d50a      	bpl.n	8003d3e <_printf_i+0xce>
 8003d28:	6805      	ldr	r5, [r0, #0]
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	da03      	bge.n	8003d38 <_printf_i+0xc8>
 8003d30:	232d      	movs	r3, #45	; 0x2d
 8003d32:	426d      	negs	r5, r5
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d38:	485e      	ldr	r0, [pc, #376]	; (8003eb4 <_printf_i+0x244>)
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	e019      	b.n	8003d72 <_printf_i+0x102>
 8003d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d42:	6805      	ldr	r5, [r0, #0]
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	bf18      	it	ne
 8003d48:	b22d      	sxthne	r5, r5
 8003d4a:	e7ef      	b.n	8003d2c <_printf_i+0xbc>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	6825      	ldr	r5, [r4, #0]
 8003d50:	1d18      	adds	r0, r3, #4
 8003d52:	6008      	str	r0, [r1, #0]
 8003d54:	0628      	lsls	r0, r5, #24
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0xec>
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <_printf_i+0xf2>
 8003d5c:	0669      	lsls	r1, r5, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0xe8>
 8003d60:	881d      	ldrh	r5, [r3, #0]
 8003d62:	4854      	ldr	r0, [pc, #336]	; (8003eb4 <_printf_i+0x244>)
 8003d64:	2f6f      	cmp	r7, #111	; 0x6f
 8003d66:	bf0c      	ite	eq
 8003d68:	2308      	moveq	r3, #8
 8003d6a:	230a      	movne	r3, #10
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d72:	6866      	ldr	r6, [r4, #4]
 8003d74:	60a6      	str	r6, [r4, #8]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	bfa2      	ittt	ge
 8003d7a:	6821      	ldrge	r1, [r4, #0]
 8003d7c:	f021 0104 	bicge.w	r1, r1, #4
 8003d80:	6021      	strge	r1, [r4, #0]
 8003d82:	b90d      	cbnz	r5, 8003d88 <_printf_i+0x118>
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	d04d      	beq.n	8003e24 <_printf_i+0x1b4>
 8003d88:	4616      	mov	r6, r2
 8003d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d92:	5dc7      	ldrb	r7, [r0, r7]
 8003d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d98:	462f      	mov	r7, r5
 8003d9a:	42bb      	cmp	r3, r7
 8003d9c:	460d      	mov	r5, r1
 8003d9e:	d9f4      	bls.n	8003d8a <_printf_i+0x11a>
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d10b      	bne.n	8003dbc <_printf_i+0x14c>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	07df      	lsls	r7, r3, #31
 8003da8:	d508      	bpl.n	8003dbc <_printf_i+0x14c>
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	6861      	ldr	r1, [r4, #4]
 8003dae:	4299      	cmp	r1, r3
 8003db0:	bfde      	ittt	le
 8003db2:	2330      	movle	r3, #48	; 0x30
 8003db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dbc:	1b92      	subs	r2, r2, r6
 8003dbe:	6122      	str	r2, [r4, #16]
 8003dc0:	f8cd a000 	str.w	sl, [sp]
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	aa03      	add	r2, sp, #12
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f7ff fee2 	bl	8003b94 <_printf_common>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d14c      	bne.n	8003e6e <_printf_i+0x1fe>
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	b004      	add	sp, #16
 8003dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dde:	4835      	ldr	r0, [pc, #212]	; (8003eb4 <_printf_i+0x244>)
 8003de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	680e      	ldr	r6, [r1, #0]
 8003de8:	061f      	lsls	r7, r3, #24
 8003dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dee:	600e      	str	r6, [r1, #0]
 8003df0:	d514      	bpl.n	8003e1c <_printf_i+0x1ac>
 8003df2:	07d9      	lsls	r1, r3, #31
 8003df4:	bf44      	itt	mi
 8003df6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dfa:	6023      	strmi	r3, [r4, #0]
 8003dfc:	b91d      	cbnz	r5, 8003e06 <_printf_i+0x196>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f023 0320 	bic.w	r3, r3, #32
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	2310      	movs	r3, #16
 8003e08:	e7b0      	b.n	8003d6c <_printf_i+0xfc>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	2378      	movs	r3, #120	; 0x78
 8003e14:	4828      	ldr	r0, [pc, #160]	; (8003eb8 <_printf_i+0x248>)
 8003e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1a:	e7e3      	b.n	8003de4 <_printf_i+0x174>
 8003e1c:	065e      	lsls	r6, r3, #25
 8003e1e:	bf48      	it	mi
 8003e20:	b2ad      	uxthmi	r5, r5
 8003e22:	e7e6      	b.n	8003df2 <_printf_i+0x182>
 8003e24:	4616      	mov	r6, r2
 8003e26:	e7bb      	b.n	8003da0 <_printf_i+0x130>
 8003e28:	680b      	ldr	r3, [r1, #0]
 8003e2a:	6826      	ldr	r6, [r4, #0]
 8003e2c:	6960      	ldr	r0, [r4, #20]
 8003e2e:	1d1d      	adds	r5, r3, #4
 8003e30:	600d      	str	r5, [r1, #0]
 8003e32:	0635      	lsls	r5, r6, #24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	d501      	bpl.n	8003e3c <_printf_i+0x1cc>
 8003e38:	6018      	str	r0, [r3, #0]
 8003e3a:	e002      	b.n	8003e42 <_printf_i+0x1d2>
 8003e3c:	0671      	lsls	r1, r6, #25
 8003e3e:	d5fb      	bpl.n	8003e38 <_printf_i+0x1c8>
 8003e40:	8018      	strh	r0, [r3, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	6123      	str	r3, [r4, #16]
 8003e46:	4616      	mov	r6, r2
 8003e48:	e7ba      	b.n	8003dc0 <_printf_i+0x150>
 8003e4a:	680b      	ldr	r3, [r1, #0]
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	600a      	str	r2, [r1, #0]
 8003e50:	681e      	ldr	r6, [r3, #0]
 8003e52:	6862      	ldr	r2, [r4, #4]
 8003e54:	2100      	movs	r1, #0
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7fc f9c2 	bl	80001e0 <memchr>
 8003e5c:	b108      	cbz	r0, 8003e62 <_printf_i+0x1f2>
 8003e5e:	1b80      	subs	r0, r0, r6
 8003e60:	6060      	str	r0, [r4, #4]
 8003e62:	6863      	ldr	r3, [r4, #4]
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	2300      	movs	r3, #0
 8003e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6c:	e7a8      	b.n	8003dc0 <_printf_i+0x150>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	4632      	mov	r2, r6
 8003e72:	4649      	mov	r1, r9
 8003e74:	4640      	mov	r0, r8
 8003e76:	47d0      	blx	sl
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d0ab      	beq.n	8003dd4 <_printf_i+0x164>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	079b      	lsls	r3, r3, #30
 8003e80:	d413      	bmi.n	8003eaa <_printf_i+0x23a>
 8003e82:	68e0      	ldr	r0, [r4, #12]
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	4298      	cmp	r0, r3
 8003e88:	bfb8      	it	lt
 8003e8a:	4618      	movlt	r0, r3
 8003e8c:	e7a4      	b.n	8003dd8 <_printf_i+0x168>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4632      	mov	r2, r6
 8003e92:	4649      	mov	r1, r9
 8003e94:	4640      	mov	r0, r8
 8003e96:	47d0      	blx	sl
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d09b      	beq.n	8003dd4 <_printf_i+0x164>
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	68e3      	ldr	r3, [r4, #12]
 8003ea0:	9903      	ldr	r1, [sp, #12]
 8003ea2:	1a5b      	subs	r3, r3, r1
 8003ea4:	42ab      	cmp	r3, r5
 8003ea6:	dcf2      	bgt.n	8003e8e <_printf_i+0x21e>
 8003ea8:	e7eb      	b.n	8003e82 <_printf_i+0x212>
 8003eaa:	2500      	movs	r5, #0
 8003eac:	f104 0619 	add.w	r6, r4, #25
 8003eb0:	e7f5      	b.n	8003e9e <_printf_i+0x22e>
 8003eb2:	bf00      	nop
 8003eb4:	0800732a 	.word	0x0800732a
 8003eb8:	0800733b 	.word	0x0800733b

08003ebc <siprintf>:
 8003ebc:	b40e      	push	{r1, r2, r3}
 8003ebe:	b500      	push	{lr}
 8003ec0:	b09c      	sub	sp, #112	; 0x70
 8003ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ec4:	9002      	str	r0, [sp, #8]
 8003ec6:	9006      	str	r0, [sp, #24]
 8003ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ecc:	4809      	ldr	r0, [pc, #36]	; (8003ef4 <siprintf+0x38>)
 8003ece:	9107      	str	r1, [sp, #28]
 8003ed0:	9104      	str	r1, [sp, #16]
 8003ed2:	4909      	ldr	r1, [pc, #36]	; (8003ef8 <siprintf+0x3c>)
 8003ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ed8:	9105      	str	r1, [sp, #20]
 8003eda:	6800      	ldr	r0, [r0, #0]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	a902      	add	r1, sp, #8
 8003ee0:	f001 fb34 	bl	800554c <_svfiprintf_r>
 8003ee4:	9b02      	ldr	r3, [sp, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	b01c      	add	sp, #112	; 0x70
 8003eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef0:	b003      	add	sp, #12
 8003ef2:	4770      	bx	lr
 8003ef4:	20000008 	.word	0x20000008
 8003ef8:	ffff0208 	.word	0xffff0208

08003efc <quorem>:
 8003efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	6903      	ldr	r3, [r0, #16]
 8003f02:	690c      	ldr	r4, [r1, #16]
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	4607      	mov	r7, r0
 8003f08:	f2c0 8081 	blt.w	800400e <quorem+0x112>
 8003f0c:	3c01      	subs	r4, #1
 8003f0e:	f101 0814 	add.w	r8, r1, #20
 8003f12:	f100 0514 	add.w	r5, r0, #20
 8003f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f24:	3301      	adds	r3, #1
 8003f26:	429a      	cmp	r2, r3
 8003f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f34:	d331      	bcc.n	8003f9a <quorem+0x9e>
 8003f36:	f04f 0e00 	mov.w	lr, #0
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	46ac      	mov	ip, r5
 8003f3e:	46f2      	mov	sl, lr
 8003f40:	f850 2b04 	ldr.w	r2, [r0], #4
 8003f44:	b293      	uxth	r3, r2
 8003f46:	fb06 e303 	mla	r3, r6, r3, lr
 8003f4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ebaa 0303 	sub.w	r3, sl, r3
 8003f54:	0c12      	lsrs	r2, r2, #16
 8003f56:	f8dc a000 	ldr.w	sl, [ip]
 8003f5a:	fb06 e202 	mla	r2, r6, r2, lr
 8003f5e:	fa13 f38a 	uxtah	r3, r3, sl
 8003f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003f66:	fa1f fa82 	uxth.w	sl, r2
 8003f6a:	f8dc 2000 	ldr.w	r2, [ip]
 8003f6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f7c:	4581      	cmp	r9, r0
 8003f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f86:	d2db      	bcs.n	8003f40 <quorem+0x44>
 8003f88:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f8c:	b92b      	cbnz	r3, 8003f9a <quorem+0x9e>
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	429d      	cmp	r5, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	d32e      	bcc.n	8003ff6 <quorem+0xfa>
 8003f98:	613c      	str	r4, [r7, #16]
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f001 f8c0 	bl	8005120 <__mcmp>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	db24      	blt.n	8003fee <quorem+0xf2>
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f04f 0c00 	mov.w	ip, #0
 8003fac:	f858 2b04 	ldr.w	r2, [r8], #4
 8003fb0:	f8d0 e000 	ldr.w	lr, [r0]
 8003fb4:	b293      	uxth	r3, r2
 8003fb6:	ebac 0303 	sub.w	r3, ip, r3
 8003fba:	0c12      	lsrs	r2, r2, #16
 8003fbc:	fa13 f38e 	uxtah	r3, r3, lr
 8003fc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fce:	45c1      	cmp	r9, r8
 8003fd0:	f840 3b04 	str.w	r3, [r0], #4
 8003fd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003fd8:	d2e8      	bcs.n	8003fac <quorem+0xb0>
 8003fda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fe2:	b922      	cbnz	r2, 8003fee <quorem+0xf2>
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	429d      	cmp	r5, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	d30a      	bcc.n	8004002 <quorem+0x106>
 8003fec:	613c      	str	r4, [r7, #16]
 8003fee:	4630      	mov	r0, r6
 8003ff0:	b003      	add	sp, #12
 8003ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d1cc      	bne.n	8003f98 <quorem+0x9c>
 8003ffe:	3c01      	subs	r4, #1
 8004000:	e7c7      	b.n	8003f92 <quorem+0x96>
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	3b04      	subs	r3, #4
 8004006:	2a00      	cmp	r2, #0
 8004008:	d1f0      	bne.n	8003fec <quorem+0xf0>
 800400a:	3c01      	subs	r4, #1
 800400c:	e7eb      	b.n	8003fe6 <quorem+0xea>
 800400e:	2000      	movs	r0, #0
 8004010:	e7ee      	b.n	8003ff0 <quorem+0xf4>
 8004012:	0000      	movs	r0, r0
 8004014:	0000      	movs	r0, r0
	...

08004018 <_dtoa_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	ed2d 8b02 	vpush	{d8}
 8004020:	ec57 6b10 	vmov	r6, r7, d0
 8004024:	b095      	sub	sp, #84	; 0x54
 8004026:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004028:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800402c:	9105      	str	r1, [sp, #20]
 800402e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004032:	4604      	mov	r4, r0
 8004034:	9209      	str	r2, [sp, #36]	; 0x24
 8004036:	930f      	str	r3, [sp, #60]	; 0x3c
 8004038:	b975      	cbnz	r5, 8004058 <_dtoa_r+0x40>
 800403a:	2010      	movs	r0, #16
 800403c:	f000 fddc 	bl	8004bf8 <malloc>
 8004040:	4602      	mov	r2, r0
 8004042:	6260      	str	r0, [r4, #36]	; 0x24
 8004044:	b920      	cbnz	r0, 8004050 <_dtoa_r+0x38>
 8004046:	4bb2      	ldr	r3, [pc, #712]	; (8004310 <_dtoa_r+0x2f8>)
 8004048:	21ea      	movs	r1, #234	; 0xea
 800404a:	48b2      	ldr	r0, [pc, #712]	; (8004314 <_dtoa_r+0x2fc>)
 800404c:	f001 fb8e 	bl	800576c <__assert_func>
 8004050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004054:	6005      	str	r5, [r0, #0]
 8004056:	60c5      	str	r5, [r0, #12]
 8004058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800405a:	6819      	ldr	r1, [r3, #0]
 800405c:	b151      	cbz	r1, 8004074 <_dtoa_r+0x5c>
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	604a      	str	r2, [r1, #4]
 8004062:	2301      	movs	r3, #1
 8004064:	4093      	lsls	r3, r2
 8004066:	608b      	str	r3, [r1, #8]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 fe1b 	bl	8004ca4 <_Bfree>
 800406e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	1e3b      	subs	r3, r7, #0
 8004076:	bfb9      	ittee	lt
 8004078:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800407c:	9303      	strlt	r3, [sp, #12]
 800407e:	2300      	movge	r3, #0
 8004080:	f8c8 3000 	strge.w	r3, [r8]
 8004084:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004088:	4ba3      	ldr	r3, [pc, #652]	; (8004318 <_dtoa_r+0x300>)
 800408a:	bfbc      	itt	lt
 800408c:	2201      	movlt	r2, #1
 800408e:	f8c8 2000 	strlt.w	r2, [r8]
 8004092:	ea33 0309 	bics.w	r3, r3, r9
 8004096:	d11b      	bne.n	80040d0 <_dtoa_r+0xb8>
 8004098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800409a:	f242 730f 	movw	r3, #9999	; 0x270f
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040a4:	4333      	orrs	r3, r6
 80040a6:	f000 857a 	beq.w	8004b9e <_dtoa_r+0xb86>
 80040aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040ac:	b963      	cbnz	r3, 80040c8 <_dtoa_r+0xb0>
 80040ae:	4b9b      	ldr	r3, [pc, #620]	; (800431c <_dtoa_r+0x304>)
 80040b0:	e024      	b.n	80040fc <_dtoa_r+0xe4>
 80040b2:	4b9b      	ldr	r3, [pc, #620]	; (8004320 <_dtoa_r+0x308>)
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	9800      	ldr	r0, [sp, #0]
 80040be:	b015      	add	sp, #84	; 0x54
 80040c0:	ecbd 8b02 	vpop	{d8}
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	4b94      	ldr	r3, [pc, #592]	; (800431c <_dtoa_r+0x304>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	3303      	adds	r3, #3
 80040ce:	e7f3      	b.n	80040b8 <_dtoa_r+0xa0>
 80040d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	ec51 0b17 	vmov	r0, r1, d7
 80040da:	2300      	movs	r3, #0
 80040dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80040e0:	f7fc fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80040e4:	4680      	mov	r8, r0
 80040e6:	b158      	cbz	r0, 8004100 <_dtoa_r+0xe8>
 80040e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040ea:	2301      	movs	r3, #1
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8551 	beq.w	8004b98 <_dtoa_r+0xb80>
 80040f6:	488b      	ldr	r0, [pc, #556]	; (8004324 <_dtoa_r+0x30c>)
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	1e43      	subs	r3, r0, #1
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	e7dd      	b.n	80040bc <_dtoa_r+0xa4>
 8004100:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004104:	aa12      	add	r2, sp, #72	; 0x48
 8004106:	a913      	add	r1, sp, #76	; 0x4c
 8004108:	4620      	mov	r0, r4
 800410a:	f001 f8ad 	bl	8005268 <__d2b>
 800410e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004112:	4683      	mov	fp, r0
 8004114:	2d00      	cmp	r5, #0
 8004116:	d07c      	beq.n	8004212 <_dtoa_r+0x1fa>
 8004118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800411a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800411e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004122:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004126:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800412a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800412e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004132:	4b7d      	ldr	r3, [pc, #500]	; (8004328 <_dtoa_r+0x310>)
 8004134:	2200      	movs	r2, #0
 8004136:	4630      	mov	r0, r6
 8004138:	4639      	mov	r1, r7
 800413a:	f7fc f8a5 	bl	8000288 <__aeabi_dsub>
 800413e:	a36e      	add	r3, pc, #440	; (adr r3, 80042f8 <_dtoa_r+0x2e0>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	a36d      	add	r3, pc, #436	; (adr r3, 8004300 <_dtoa_r+0x2e8>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f89d 	bl	800028c <__adddf3>
 8004152:	4606      	mov	r6, r0
 8004154:	4628      	mov	r0, r5
 8004156:	460f      	mov	r7, r1
 8004158:	f7fc f9e4 	bl	8000524 <__aeabi_i2d>
 800415c:	a36a      	add	r3, pc, #424	; (adr r3, 8004308 <_dtoa_r+0x2f0>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f7fc fa49 	bl	80005f8 <__aeabi_dmul>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4630      	mov	r0, r6
 800416c:	4639      	mov	r1, r7
 800416e:	f7fc f88d 	bl	800028c <__adddf3>
 8004172:	4606      	mov	r6, r0
 8004174:	460f      	mov	r7, r1
 8004176:	f7fc fcef 	bl	8000b58 <__aeabi_d2iz>
 800417a:	2200      	movs	r2, #0
 800417c:	4682      	mov	sl, r0
 800417e:	2300      	movs	r3, #0
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc fcaa 	bl	8000adc <__aeabi_dcmplt>
 8004188:	b148      	cbz	r0, 800419e <_dtoa_r+0x186>
 800418a:	4650      	mov	r0, sl
 800418c:	f7fc f9ca 	bl	8000524 <__aeabi_i2d>
 8004190:	4632      	mov	r2, r6
 8004192:	463b      	mov	r3, r7
 8004194:	f7fc fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004198:	b908      	cbnz	r0, 800419e <_dtoa_r+0x186>
 800419a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800419e:	f1ba 0f16 	cmp.w	sl, #22
 80041a2:	d854      	bhi.n	800424e <_dtoa_r+0x236>
 80041a4:	4b61      	ldr	r3, [pc, #388]	; (800432c <_dtoa_r+0x314>)
 80041a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041b2:	f7fc fc93 	bl	8000adc <__aeabi_dcmplt>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d04b      	beq.n	8004252 <_dtoa_r+0x23a>
 80041ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041be:	2300      	movs	r3, #0
 80041c0:	930e      	str	r3, [sp, #56]	; 0x38
 80041c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041c4:	1b5d      	subs	r5, r3, r5
 80041c6:	1e6b      	subs	r3, r5, #1
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	bf43      	ittte	mi
 80041cc:	2300      	movmi	r3, #0
 80041ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80041d2:	9304      	strmi	r3, [sp, #16]
 80041d4:	f04f 0800 	movpl.w	r8, #0
 80041d8:	f1ba 0f00 	cmp.w	sl, #0
 80041dc:	db3b      	blt.n	8004256 <_dtoa_r+0x23e>
 80041de:	9b04      	ldr	r3, [sp, #16]
 80041e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80041e4:	4453      	add	r3, sl
 80041e6:	9304      	str	r3, [sp, #16]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9306      	str	r3, [sp, #24]
 80041ec:	9b05      	ldr	r3, [sp, #20]
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	d869      	bhi.n	80042c6 <_dtoa_r+0x2ae>
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	bfc4      	itt	gt
 80041f6:	3b04      	subgt	r3, #4
 80041f8:	9305      	strgt	r3, [sp, #20]
 80041fa:	9b05      	ldr	r3, [sp, #20]
 80041fc:	f1a3 0302 	sub.w	r3, r3, #2
 8004200:	bfcc      	ite	gt
 8004202:	2500      	movgt	r5, #0
 8004204:	2501      	movle	r5, #1
 8004206:	2b03      	cmp	r3, #3
 8004208:	d869      	bhi.n	80042de <_dtoa_r+0x2c6>
 800420a:	e8df f003 	tbb	[pc, r3]
 800420e:	4e2c      	.short	0x4e2c
 8004210:	5a4c      	.short	0x5a4c
 8004212:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004216:	441d      	add	r5, r3
 8004218:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800421c:	2b20      	cmp	r3, #32
 800421e:	bfc1      	itttt	gt
 8004220:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004224:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004228:	fa09 f303 	lslgt.w	r3, r9, r3
 800422c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004230:	bfda      	itte	le
 8004232:	f1c3 0320 	rsble	r3, r3, #32
 8004236:	fa06 f003 	lslle.w	r0, r6, r3
 800423a:	4318      	orrgt	r0, r3
 800423c:	f7fc f962 	bl	8000504 <__aeabi_ui2d>
 8004240:	2301      	movs	r3, #1
 8004242:	4606      	mov	r6, r0
 8004244:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004248:	3d01      	subs	r5, #1
 800424a:	9310      	str	r3, [sp, #64]	; 0x40
 800424c:	e771      	b.n	8004132 <_dtoa_r+0x11a>
 800424e:	2301      	movs	r3, #1
 8004250:	e7b6      	b.n	80041c0 <_dtoa_r+0x1a8>
 8004252:	900e      	str	r0, [sp, #56]	; 0x38
 8004254:	e7b5      	b.n	80041c2 <_dtoa_r+0x1aa>
 8004256:	f1ca 0300 	rsb	r3, sl, #0
 800425a:	9306      	str	r3, [sp, #24]
 800425c:	2300      	movs	r3, #0
 800425e:	eba8 080a 	sub.w	r8, r8, sl
 8004262:	930d      	str	r3, [sp, #52]	; 0x34
 8004264:	e7c2      	b.n	80041ec <_dtoa_r+0x1d4>
 8004266:	2300      	movs	r3, #0
 8004268:	9308      	str	r3, [sp, #32]
 800426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426c:	2b00      	cmp	r3, #0
 800426e:	dc39      	bgt.n	80042e4 <_dtoa_r+0x2cc>
 8004270:	f04f 0901 	mov.w	r9, #1
 8004274:	f8cd 9004 	str.w	r9, [sp, #4]
 8004278:	464b      	mov	r3, r9
 800427a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800427e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004280:	2200      	movs	r2, #0
 8004282:	6042      	str	r2, [r0, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	f102 0614 	add.w	r6, r2, #20
 800428a:	429e      	cmp	r6, r3
 800428c:	6841      	ldr	r1, [r0, #4]
 800428e:	d92f      	bls.n	80042f0 <_dtoa_r+0x2d8>
 8004290:	4620      	mov	r0, r4
 8004292:	f000 fcc7 	bl	8004c24 <_Balloc>
 8004296:	9000      	str	r0, [sp, #0]
 8004298:	2800      	cmp	r0, #0
 800429a:	d14b      	bne.n	8004334 <_dtoa_r+0x31c>
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <_dtoa_r+0x318>)
 800429e:	4602      	mov	r2, r0
 80042a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80042a4:	e6d1      	b.n	800404a <_dtoa_r+0x32>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e7de      	b.n	8004268 <_dtoa_r+0x250>
 80042aa:	2300      	movs	r3, #0
 80042ac:	9308      	str	r3, [sp, #32]
 80042ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b0:	eb0a 0903 	add.w	r9, sl, r3
 80042b4:	f109 0301 	add.w	r3, r9, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	bfb8      	it	lt
 80042be:	2301      	movlt	r3, #1
 80042c0:	e7dd      	b.n	800427e <_dtoa_r+0x266>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7f2      	b.n	80042ac <_dtoa_r+0x294>
 80042c6:	2501      	movs	r5, #1
 80042c8:	2300      	movs	r3, #0
 80042ca:	9305      	str	r3, [sp, #20]
 80042cc:	9508      	str	r5, [sp, #32]
 80042ce:	f04f 39ff 	mov.w	r9, #4294967295
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80042d8:	2312      	movs	r3, #18
 80042da:	9209      	str	r2, [sp, #36]	; 0x24
 80042dc:	e7cf      	b.n	800427e <_dtoa_r+0x266>
 80042de:	2301      	movs	r3, #1
 80042e0:	9308      	str	r3, [sp, #32]
 80042e2:	e7f4      	b.n	80042ce <_dtoa_r+0x2b6>
 80042e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80042e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80042ec:	464b      	mov	r3, r9
 80042ee:	e7c6      	b.n	800427e <_dtoa_r+0x266>
 80042f0:	3101      	adds	r1, #1
 80042f2:	6041      	str	r1, [r0, #4]
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	e7c6      	b.n	8004286 <_dtoa_r+0x26e>
 80042f8:	636f4361 	.word	0x636f4361
 80042fc:	3fd287a7 	.word	0x3fd287a7
 8004300:	8b60c8b3 	.word	0x8b60c8b3
 8004304:	3fc68a28 	.word	0x3fc68a28
 8004308:	509f79fb 	.word	0x509f79fb
 800430c:	3fd34413 	.word	0x3fd34413
 8004310:	08007359 	.word	0x08007359
 8004314:	08007370 	.word	0x08007370
 8004318:	7ff00000 	.word	0x7ff00000
 800431c:	08007355 	.word	0x08007355
 8004320:	0800734c 	.word	0x0800734c
 8004324:	08007329 	.word	0x08007329
 8004328:	3ff80000 	.word	0x3ff80000
 800432c:	08007468 	.word	0x08007468
 8004330:	080073cf 	.word	0x080073cf
 8004334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004336:	9a00      	ldr	r2, [sp, #0]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	2b0e      	cmp	r3, #14
 800433e:	f200 80ad 	bhi.w	800449c <_dtoa_r+0x484>
 8004342:	2d00      	cmp	r5, #0
 8004344:	f000 80aa 	beq.w	800449c <_dtoa_r+0x484>
 8004348:	f1ba 0f00 	cmp.w	sl, #0
 800434c:	dd36      	ble.n	80043bc <_dtoa_r+0x3a4>
 800434e:	4ac3      	ldr	r2, [pc, #780]	; (800465c <_dtoa_r+0x644>)
 8004350:	f00a 030f 	and.w	r3, sl, #15
 8004354:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004358:	ed93 7b00 	vldr	d7, [r3]
 800435c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004360:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004364:	eeb0 8a47 	vmov.f32	s16, s14
 8004368:	eef0 8a67 	vmov.f32	s17, s15
 800436c:	d016      	beq.n	800439c <_dtoa_r+0x384>
 800436e:	4bbc      	ldr	r3, [pc, #752]	; (8004660 <_dtoa_r+0x648>)
 8004370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004378:	f7fc fa68 	bl	800084c <__aeabi_ddiv>
 800437c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004380:	f007 070f 	and.w	r7, r7, #15
 8004384:	2503      	movs	r5, #3
 8004386:	4eb6      	ldr	r6, [pc, #728]	; (8004660 <_dtoa_r+0x648>)
 8004388:	b957      	cbnz	r7, 80043a0 <_dtoa_r+0x388>
 800438a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438e:	ec53 2b18 	vmov	r2, r3, d8
 8004392:	f7fc fa5b 	bl	800084c <__aeabi_ddiv>
 8004396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800439a:	e029      	b.n	80043f0 <_dtoa_r+0x3d8>
 800439c:	2502      	movs	r5, #2
 800439e:	e7f2      	b.n	8004386 <_dtoa_r+0x36e>
 80043a0:	07f9      	lsls	r1, r7, #31
 80043a2:	d508      	bpl.n	80043b6 <_dtoa_r+0x39e>
 80043a4:	ec51 0b18 	vmov	r0, r1, d8
 80043a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80043ac:	f7fc f924 	bl	80005f8 <__aeabi_dmul>
 80043b0:	ec41 0b18 	vmov	d8, r0, r1
 80043b4:	3501      	adds	r5, #1
 80043b6:	107f      	asrs	r7, r7, #1
 80043b8:	3608      	adds	r6, #8
 80043ba:	e7e5      	b.n	8004388 <_dtoa_r+0x370>
 80043bc:	f000 80a6 	beq.w	800450c <_dtoa_r+0x4f4>
 80043c0:	f1ca 0600 	rsb	r6, sl, #0
 80043c4:	4ba5      	ldr	r3, [pc, #660]	; (800465c <_dtoa_r+0x644>)
 80043c6:	4fa6      	ldr	r7, [pc, #664]	; (8004660 <_dtoa_r+0x648>)
 80043c8:	f006 020f 	and.w	r2, r6, #15
 80043cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043d8:	f7fc f90e 	bl	80005f8 <__aeabi_dmul>
 80043dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e0:	1136      	asrs	r6, r6, #4
 80043e2:	2300      	movs	r3, #0
 80043e4:	2502      	movs	r5, #2
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	f040 8085 	bne.w	80044f6 <_dtoa_r+0x4de>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1d2      	bne.n	8004396 <_dtoa_r+0x37e>
 80043f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 808c 	beq.w	8004510 <_dtoa_r+0x4f8>
 80043f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043fc:	4b99      	ldr	r3, [pc, #612]	; (8004664 <_dtoa_r+0x64c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	4630      	mov	r0, r6
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc fb6a 	bl	8000adc <__aeabi_dcmplt>
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 8081 	beq.w	8004510 <_dtoa_r+0x4f8>
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d07d      	beq.n	8004510 <_dtoa_r+0x4f8>
 8004414:	f1b9 0f00 	cmp.w	r9, #0
 8004418:	dd3c      	ble.n	8004494 <_dtoa_r+0x47c>
 800441a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800441e:	9307      	str	r3, [sp, #28]
 8004420:	2200      	movs	r2, #0
 8004422:	4b91      	ldr	r3, [pc, #580]	; (8004668 <_dtoa_r+0x650>)
 8004424:	4630      	mov	r0, r6
 8004426:	4639      	mov	r1, r7
 8004428:	f7fc f8e6 	bl	80005f8 <__aeabi_dmul>
 800442c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004430:	3501      	adds	r5, #1
 8004432:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004436:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800443a:	4628      	mov	r0, r5
 800443c:	f7fc f872 	bl	8000524 <__aeabi_i2d>
 8004440:	4632      	mov	r2, r6
 8004442:	463b      	mov	r3, r7
 8004444:	f7fc f8d8 	bl	80005f8 <__aeabi_dmul>
 8004448:	4b88      	ldr	r3, [pc, #544]	; (800466c <_dtoa_r+0x654>)
 800444a:	2200      	movs	r2, #0
 800444c:	f7fb ff1e 	bl	800028c <__adddf3>
 8004450:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15c      	bne.n	800451a <_dtoa_r+0x502>
 8004460:	4b83      	ldr	r3, [pc, #524]	; (8004670 <_dtoa_r+0x658>)
 8004462:	2200      	movs	r2, #0
 8004464:	4630      	mov	r0, r6
 8004466:	4639      	mov	r1, r7
 8004468:	f7fb ff0e 	bl	8000288 <__aeabi_dsub>
 800446c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	f7fc fb50 	bl	8000b18 <__aeabi_dcmpgt>
 8004478:	2800      	cmp	r0, #0
 800447a:	f040 8296 	bne.w	80049aa <_dtoa_r+0x992>
 800447e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004482:	4630      	mov	r0, r6
 8004484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004488:	4639      	mov	r1, r7
 800448a:	f7fc fb27 	bl	8000adc <__aeabi_dcmplt>
 800448e:	2800      	cmp	r0, #0
 8004490:	f040 8288 	bne.w	80049a4 <_dtoa_r+0x98c>
 8004494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004498:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800449c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f2c0 8158 	blt.w	8004754 <_dtoa_r+0x73c>
 80044a4:	f1ba 0f0e 	cmp.w	sl, #14
 80044a8:	f300 8154 	bgt.w	8004754 <_dtoa_r+0x73c>
 80044ac:	4b6b      	ldr	r3, [pc, #428]	; (800465c <_dtoa_r+0x644>)
 80044ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f280 80e3 	bge.w	8004684 <_dtoa_r+0x66c>
 80044be:	9b01      	ldr	r3, [sp, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f300 80df 	bgt.w	8004684 <_dtoa_r+0x66c>
 80044c6:	f040 826d 	bne.w	80049a4 <_dtoa_r+0x98c>
 80044ca:	4b69      	ldr	r3, [pc, #420]	; (8004670 <_dtoa_r+0x658>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fc f891 	bl	80005f8 <__aeabi_dmul>
 80044d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044da:	f7fc fb13 	bl	8000b04 <__aeabi_dcmpge>
 80044de:	9e01      	ldr	r6, [sp, #4]
 80044e0:	4637      	mov	r7, r6
 80044e2:	2800      	cmp	r0, #0
 80044e4:	f040 8243 	bne.w	800496e <_dtoa_r+0x956>
 80044e8:	9d00      	ldr	r5, [sp, #0]
 80044ea:	2331      	movs	r3, #49	; 0x31
 80044ec:	f805 3b01 	strb.w	r3, [r5], #1
 80044f0:	f10a 0a01 	add.w	sl, sl, #1
 80044f4:	e23f      	b.n	8004976 <_dtoa_r+0x95e>
 80044f6:	07f2      	lsls	r2, r6, #31
 80044f8:	d505      	bpl.n	8004506 <_dtoa_r+0x4ee>
 80044fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fe:	f7fc f87b 	bl	80005f8 <__aeabi_dmul>
 8004502:	3501      	adds	r5, #1
 8004504:	2301      	movs	r3, #1
 8004506:	1076      	asrs	r6, r6, #1
 8004508:	3708      	adds	r7, #8
 800450a:	e76c      	b.n	80043e6 <_dtoa_r+0x3ce>
 800450c:	2502      	movs	r5, #2
 800450e:	e76f      	b.n	80043f0 <_dtoa_r+0x3d8>
 8004510:	9b01      	ldr	r3, [sp, #4]
 8004512:	f8cd a01c 	str.w	sl, [sp, #28]
 8004516:	930c      	str	r3, [sp, #48]	; 0x30
 8004518:	e78d      	b.n	8004436 <_dtoa_r+0x41e>
 800451a:	9900      	ldr	r1, [sp, #0]
 800451c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800451e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <_dtoa_r+0x644>)
 8004522:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004526:	4401      	add	r1, r0
 8004528:	9102      	str	r1, [sp, #8]
 800452a:	9908      	ldr	r1, [sp, #32]
 800452c:	eeb0 8a47 	vmov.f32	s16, s14
 8004530:	eef0 8a67 	vmov.f32	s17, s15
 8004534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800453c:	2900      	cmp	r1, #0
 800453e:	d045      	beq.n	80045cc <_dtoa_r+0x5b4>
 8004540:	494c      	ldr	r1, [pc, #304]	; (8004674 <_dtoa_r+0x65c>)
 8004542:	2000      	movs	r0, #0
 8004544:	f7fc f982 	bl	800084c <__aeabi_ddiv>
 8004548:	ec53 2b18 	vmov	r2, r3, d8
 800454c:	f7fb fe9c 	bl	8000288 <__aeabi_dsub>
 8004550:	9d00      	ldr	r5, [sp, #0]
 8004552:	ec41 0b18 	vmov	d8, r0, r1
 8004556:	4639      	mov	r1, r7
 8004558:	4630      	mov	r0, r6
 800455a:	f7fc fafd 	bl	8000b58 <__aeabi_d2iz>
 800455e:	900c      	str	r0, [sp, #48]	; 0x30
 8004560:	f7fb ffe0 	bl	8000524 <__aeabi_i2d>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4630      	mov	r0, r6
 800456a:	4639      	mov	r1, r7
 800456c:	f7fb fe8c 	bl	8000288 <__aeabi_dsub>
 8004570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004572:	3330      	adds	r3, #48	; 0x30
 8004574:	f805 3b01 	strb.w	r3, [r5], #1
 8004578:	ec53 2b18 	vmov	r2, r3, d8
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	f7fc faac 	bl	8000adc <__aeabi_dcmplt>
 8004584:	2800      	cmp	r0, #0
 8004586:	d165      	bne.n	8004654 <_dtoa_r+0x63c>
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4935      	ldr	r1, [pc, #212]	; (8004664 <_dtoa_r+0x64c>)
 800458e:	2000      	movs	r0, #0
 8004590:	f7fb fe7a 	bl	8000288 <__aeabi_dsub>
 8004594:	ec53 2b18 	vmov	r2, r3, d8
 8004598:	f7fc faa0 	bl	8000adc <__aeabi_dcmplt>
 800459c:	2800      	cmp	r0, #0
 800459e:	f040 80b9 	bne.w	8004714 <_dtoa_r+0x6fc>
 80045a2:	9b02      	ldr	r3, [sp, #8]
 80045a4:	429d      	cmp	r5, r3
 80045a6:	f43f af75 	beq.w	8004494 <_dtoa_r+0x47c>
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <_dtoa_r+0x650>)
 80045ac:	ec51 0b18 	vmov	r0, r1, d8
 80045b0:	2200      	movs	r2, #0
 80045b2:	f7fc f821 	bl	80005f8 <__aeabi_dmul>
 80045b6:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <_dtoa_r+0x650>)
 80045b8:	ec41 0b18 	vmov	d8, r0, r1
 80045bc:	2200      	movs	r2, #0
 80045be:	4630      	mov	r0, r6
 80045c0:	4639      	mov	r1, r7
 80045c2:	f7fc f819 	bl	80005f8 <__aeabi_dmul>
 80045c6:	4606      	mov	r6, r0
 80045c8:	460f      	mov	r7, r1
 80045ca:	e7c4      	b.n	8004556 <_dtoa_r+0x53e>
 80045cc:	ec51 0b17 	vmov	r0, r1, d7
 80045d0:	f7fc f812 	bl	80005f8 <__aeabi_dmul>
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	9d00      	ldr	r5, [sp, #0]
 80045d8:	930c      	str	r3, [sp, #48]	; 0x30
 80045da:	ec41 0b18 	vmov	d8, r0, r1
 80045de:	4639      	mov	r1, r7
 80045e0:	4630      	mov	r0, r6
 80045e2:	f7fc fab9 	bl	8000b58 <__aeabi_d2iz>
 80045e6:	9011      	str	r0, [sp, #68]	; 0x44
 80045e8:	f7fb ff9c 	bl	8000524 <__aeabi_i2d>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4630      	mov	r0, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	f7fb fe48 	bl	8000288 <__aeabi_dsub>
 80045f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045fa:	3330      	adds	r3, #48	; 0x30
 80045fc:	f805 3b01 	strb.w	r3, [r5], #1
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	429d      	cmp	r5, r3
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	d134      	bne.n	8004678 <_dtoa_r+0x660>
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <_dtoa_r+0x65c>)
 8004610:	ec51 0b18 	vmov	r0, r1, d8
 8004614:	f7fb fe3a 	bl	800028c <__adddf3>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	f7fc fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 8004624:	2800      	cmp	r0, #0
 8004626:	d175      	bne.n	8004714 <_dtoa_r+0x6fc>
 8004628:	ec53 2b18 	vmov	r2, r3, d8
 800462c:	4911      	ldr	r1, [pc, #68]	; (8004674 <_dtoa_r+0x65c>)
 800462e:	2000      	movs	r0, #0
 8004630:	f7fb fe2a 	bl	8000288 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	f7fc fa4e 	bl	8000adc <__aeabi_dcmplt>
 8004640:	2800      	cmp	r0, #0
 8004642:	f43f af27 	beq.w	8004494 <_dtoa_r+0x47c>
 8004646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004648:	1e6b      	subs	r3, r5, #1
 800464a:	930c      	str	r3, [sp, #48]	; 0x30
 800464c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004650:	2b30      	cmp	r3, #48	; 0x30
 8004652:	d0f8      	beq.n	8004646 <_dtoa_r+0x62e>
 8004654:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004658:	e04a      	b.n	80046f0 <_dtoa_r+0x6d8>
 800465a:	bf00      	nop
 800465c:	08007468 	.word	0x08007468
 8004660:	08007440 	.word	0x08007440
 8004664:	3ff00000 	.word	0x3ff00000
 8004668:	40240000 	.word	0x40240000
 800466c:	401c0000 	.word	0x401c0000
 8004670:	40140000 	.word	0x40140000
 8004674:	3fe00000 	.word	0x3fe00000
 8004678:	4baf      	ldr	r3, [pc, #700]	; (8004938 <_dtoa_r+0x920>)
 800467a:	f7fb ffbd 	bl	80005f8 <__aeabi_dmul>
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	e7ac      	b.n	80045de <_dtoa_r+0x5c6>
 8004684:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004688:	9d00      	ldr	r5, [sp, #0]
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	4630      	mov	r0, r6
 8004690:	4639      	mov	r1, r7
 8004692:	f7fc f8db 	bl	800084c <__aeabi_ddiv>
 8004696:	f7fc fa5f 	bl	8000b58 <__aeabi_d2iz>
 800469a:	9002      	str	r0, [sp, #8]
 800469c:	f7fb ff42 	bl	8000524 <__aeabi_i2d>
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	f7fb ffa8 	bl	80005f8 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4630      	mov	r0, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	f7fb fdea 	bl	8000288 <__aeabi_dsub>
 80046b4:	9e02      	ldr	r6, [sp, #8]
 80046b6:	9f01      	ldr	r7, [sp, #4]
 80046b8:	3630      	adds	r6, #48	; 0x30
 80046ba:	f805 6b01 	strb.w	r6, [r5], #1
 80046be:	9e00      	ldr	r6, [sp, #0]
 80046c0:	1bae      	subs	r6, r5, r6
 80046c2:	42b7      	cmp	r7, r6
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	d137      	bne.n	800473a <_dtoa_r+0x722>
 80046ca:	f7fb fddf 	bl	800028c <__adddf3>
 80046ce:	4642      	mov	r2, r8
 80046d0:	464b      	mov	r3, r9
 80046d2:	4606      	mov	r6, r0
 80046d4:	460f      	mov	r7, r1
 80046d6:	f7fc fa1f 	bl	8000b18 <__aeabi_dcmpgt>
 80046da:	b9c8      	cbnz	r0, 8004710 <_dtoa_r+0x6f8>
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	4630      	mov	r0, r6
 80046e2:	4639      	mov	r1, r7
 80046e4:	f7fc f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80046e8:	b110      	cbz	r0, 80046f0 <_dtoa_r+0x6d8>
 80046ea:	9b02      	ldr	r3, [sp, #8]
 80046ec:	07d9      	lsls	r1, r3, #31
 80046ee:	d40f      	bmi.n	8004710 <_dtoa_r+0x6f8>
 80046f0:	4620      	mov	r0, r4
 80046f2:	4659      	mov	r1, fp
 80046f4:	f000 fad6 	bl	8004ca4 <_Bfree>
 80046f8:	2300      	movs	r3, #0
 80046fa:	702b      	strb	r3, [r5, #0]
 80046fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046fe:	f10a 0001 	add.w	r0, sl, #1
 8004702:	6018      	str	r0, [r3, #0]
 8004704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f acd8 	beq.w	80040bc <_dtoa_r+0xa4>
 800470c:	601d      	str	r5, [r3, #0]
 800470e:	e4d5      	b.n	80040bc <_dtoa_r+0xa4>
 8004710:	f8cd a01c 	str.w	sl, [sp, #28]
 8004714:	462b      	mov	r3, r5
 8004716:	461d      	mov	r5, r3
 8004718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800471c:	2a39      	cmp	r2, #57	; 0x39
 800471e:	d108      	bne.n	8004732 <_dtoa_r+0x71a>
 8004720:	9a00      	ldr	r2, [sp, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d1f7      	bne.n	8004716 <_dtoa_r+0x6fe>
 8004726:	9a07      	ldr	r2, [sp, #28]
 8004728:	9900      	ldr	r1, [sp, #0]
 800472a:	3201      	adds	r2, #1
 800472c:	9207      	str	r2, [sp, #28]
 800472e:	2230      	movs	r2, #48	; 0x30
 8004730:	700a      	strb	r2, [r1, #0]
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	3201      	adds	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e78c      	b.n	8004654 <_dtoa_r+0x63c>
 800473a:	4b7f      	ldr	r3, [pc, #508]	; (8004938 <_dtoa_r+0x920>)
 800473c:	2200      	movs	r2, #0
 800473e:	f7fb ff5b 	bl	80005f8 <__aeabi_dmul>
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	4606      	mov	r6, r0
 8004748:	460f      	mov	r7, r1
 800474a:	f7fc f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800474e:	2800      	cmp	r0, #0
 8004750:	d09b      	beq.n	800468a <_dtoa_r+0x672>
 8004752:	e7cd      	b.n	80046f0 <_dtoa_r+0x6d8>
 8004754:	9a08      	ldr	r2, [sp, #32]
 8004756:	2a00      	cmp	r2, #0
 8004758:	f000 80c4 	beq.w	80048e4 <_dtoa_r+0x8cc>
 800475c:	9a05      	ldr	r2, [sp, #20]
 800475e:	2a01      	cmp	r2, #1
 8004760:	f300 80a8 	bgt.w	80048b4 <_dtoa_r+0x89c>
 8004764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004766:	2a00      	cmp	r2, #0
 8004768:	f000 80a0 	beq.w	80048ac <_dtoa_r+0x894>
 800476c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004770:	9e06      	ldr	r6, [sp, #24]
 8004772:	4645      	mov	r5, r8
 8004774:	9a04      	ldr	r2, [sp, #16]
 8004776:	2101      	movs	r1, #1
 8004778:	441a      	add	r2, r3
 800477a:	4620      	mov	r0, r4
 800477c:	4498      	add	r8, r3
 800477e:	9204      	str	r2, [sp, #16]
 8004780:	f000 fb4c 	bl	8004e1c <__i2b>
 8004784:	4607      	mov	r7, r0
 8004786:	2d00      	cmp	r5, #0
 8004788:	dd0b      	ble.n	80047a2 <_dtoa_r+0x78a>
 800478a:	9b04      	ldr	r3, [sp, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	dd08      	ble.n	80047a2 <_dtoa_r+0x78a>
 8004790:	42ab      	cmp	r3, r5
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	bfa8      	it	ge
 8004796:	462b      	movge	r3, r5
 8004798:	eba8 0803 	sub.w	r8, r8, r3
 800479c:	1aed      	subs	r5, r5, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	9b06      	ldr	r3, [sp, #24]
 80047a4:	b1fb      	cbz	r3, 80047e6 <_dtoa_r+0x7ce>
 80047a6:	9b08      	ldr	r3, [sp, #32]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 809f 	beq.w	80048ec <_dtoa_r+0x8d4>
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	dd11      	ble.n	80047d6 <_dtoa_r+0x7be>
 80047b2:	4639      	mov	r1, r7
 80047b4:	4632      	mov	r2, r6
 80047b6:	4620      	mov	r0, r4
 80047b8:	f000 fbec 	bl	8004f94 <__pow5mult>
 80047bc:	465a      	mov	r2, fp
 80047be:	4601      	mov	r1, r0
 80047c0:	4607      	mov	r7, r0
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fb40 	bl	8004e48 <__multiply>
 80047c8:	4659      	mov	r1, fp
 80047ca:	9007      	str	r0, [sp, #28]
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fa69 	bl	8004ca4 <_Bfree>
 80047d2:	9b07      	ldr	r3, [sp, #28]
 80047d4:	469b      	mov	fp, r3
 80047d6:	9b06      	ldr	r3, [sp, #24]
 80047d8:	1b9a      	subs	r2, r3, r6
 80047da:	d004      	beq.n	80047e6 <_dtoa_r+0x7ce>
 80047dc:	4659      	mov	r1, fp
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 fbd8 	bl	8004f94 <__pow5mult>
 80047e4:	4683      	mov	fp, r0
 80047e6:	2101      	movs	r1, #1
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 fb17 	bl	8004e1c <__i2b>
 80047ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	4606      	mov	r6, r0
 80047f4:	dd7c      	ble.n	80048f0 <_dtoa_r+0x8d8>
 80047f6:	461a      	mov	r2, r3
 80047f8:	4601      	mov	r1, r0
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fbca 	bl	8004f94 <__pow5mult>
 8004800:	9b05      	ldr	r3, [sp, #20]
 8004802:	2b01      	cmp	r3, #1
 8004804:	4606      	mov	r6, r0
 8004806:	dd76      	ble.n	80048f6 <_dtoa_r+0x8de>
 8004808:	2300      	movs	r3, #0
 800480a:	9306      	str	r3, [sp, #24]
 800480c:	6933      	ldr	r3, [r6, #16]
 800480e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004812:	6918      	ldr	r0, [r3, #16]
 8004814:	f000 fab2 	bl	8004d7c <__hi0bits>
 8004818:	f1c0 0020 	rsb	r0, r0, #32
 800481c:	9b04      	ldr	r3, [sp, #16]
 800481e:	4418      	add	r0, r3
 8004820:	f010 001f 	ands.w	r0, r0, #31
 8004824:	f000 8086 	beq.w	8004934 <_dtoa_r+0x91c>
 8004828:	f1c0 0320 	rsb	r3, r0, #32
 800482c:	2b04      	cmp	r3, #4
 800482e:	dd7f      	ble.n	8004930 <_dtoa_r+0x918>
 8004830:	f1c0 001c 	rsb	r0, r0, #28
 8004834:	9b04      	ldr	r3, [sp, #16]
 8004836:	4403      	add	r3, r0
 8004838:	4480      	add	r8, r0
 800483a:	4405      	add	r5, r0
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	f1b8 0f00 	cmp.w	r8, #0
 8004842:	dd05      	ble.n	8004850 <_dtoa_r+0x838>
 8004844:	4659      	mov	r1, fp
 8004846:	4642      	mov	r2, r8
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fbfd 	bl	8005048 <__lshift>
 800484e:	4683      	mov	fp, r0
 8004850:	9b04      	ldr	r3, [sp, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	dd05      	ble.n	8004862 <_dtoa_r+0x84a>
 8004856:	4631      	mov	r1, r6
 8004858:	461a      	mov	r2, r3
 800485a:	4620      	mov	r0, r4
 800485c:	f000 fbf4 	bl	8005048 <__lshift>
 8004860:	4606      	mov	r6, r0
 8004862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d069      	beq.n	800493c <_dtoa_r+0x924>
 8004868:	4631      	mov	r1, r6
 800486a:	4658      	mov	r0, fp
 800486c:	f000 fc58 	bl	8005120 <__mcmp>
 8004870:	2800      	cmp	r0, #0
 8004872:	da63      	bge.n	800493c <_dtoa_r+0x924>
 8004874:	2300      	movs	r3, #0
 8004876:	4659      	mov	r1, fp
 8004878:	220a      	movs	r2, #10
 800487a:	4620      	mov	r0, r4
 800487c:	f000 fa34 	bl	8004ce8 <__multadd>
 8004880:	9b08      	ldr	r3, [sp, #32]
 8004882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004886:	4683      	mov	fp, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 818f 	beq.w	8004bac <_dtoa_r+0xb94>
 800488e:	4639      	mov	r1, r7
 8004890:	2300      	movs	r3, #0
 8004892:	220a      	movs	r2, #10
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fa27 	bl	8004ce8 <__multadd>
 800489a:	f1b9 0f00 	cmp.w	r9, #0
 800489e:	4607      	mov	r7, r0
 80048a0:	f300 808e 	bgt.w	80049c0 <_dtoa_r+0x9a8>
 80048a4:	9b05      	ldr	r3, [sp, #20]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	dc50      	bgt.n	800494c <_dtoa_r+0x934>
 80048aa:	e089      	b.n	80049c0 <_dtoa_r+0x9a8>
 80048ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048b2:	e75d      	b.n	8004770 <_dtoa_r+0x758>
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	1e5e      	subs	r6, r3, #1
 80048b8:	9b06      	ldr	r3, [sp, #24]
 80048ba:	42b3      	cmp	r3, r6
 80048bc:	bfbf      	itttt	lt
 80048be:	9b06      	ldrlt	r3, [sp, #24]
 80048c0:	9606      	strlt	r6, [sp, #24]
 80048c2:	1af2      	sublt	r2, r6, r3
 80048c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80048c6:	bfb6      	itet	lt
 80048c8:	189b      	addlt	r3, r3, r2
 80048ca:	1b9e      	subge	r6, r3, r6
 80048cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80048ce:	9b01      	ldr	r3, [sp, #4]
 80048d0:	bfb8      	it	lt
 80048d2:	2600      	movlt	r6, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bfb5      	itete	lt
 80048d8:	eba8 0503 	sublt.w	r5, r8, r3
 80048dc:	9b01      	ldrge	r3, [sp, #4]
 80048de:	2300      	movlt	r3, #0
 80048e0:	4645      	movge	r5, r8
 80048e2:	e747      	b.n	8004774 <_dtoa_r+0x75c>
 80048e4:	9e06      	ldr	r6, [sp, #24]
 80048e6:	9f08      	ldr	r7, [sp, #32]
 80048e8:	4645      	mov	r5, r8
 80048ea:	e74c      	b.n	8004786 <_dtoa_r+0x76e>
 80048ec:	9a06      	ldr	r2, [sp, #24]
 80048ee:	e775      	b.n	80047dc <_dtoa_r+0x7c4>
 80048f0:	9b05      	ldr	r3, [sp, #20]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	dc18      	bgt.n	8004928 <_dtoa_r+0x910>
 80048f6:	9b02      	ldr	r3, [sp, #8]
 80048f8:	b9b3      	cbnz	r3, 8004928 <_dtoa_r+0x910>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004900:	b9a3      	cbnz	r3, 800492c <_dtoa_r+0x914>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004908:	0d1b      	lsrs	r3, r3, #20
 800490a:	051b      	lsls	r3, r3, #20
 800490c:	b12b      	cbz	r3, 800491a <_dtoa_r+0x902>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	3301      	adds	r3, #1
 8004912:	9304      	str	r3, [sp, #16]
 8004914:	f108 0801 	add.w	r8, r8, #1
 8004918:	2301      	movs	r3, #1
 800491a:	9306      	str	r3, [sp, #24]
 800491c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	f47f af74 	bne.w	800480c <_dtoa_r+0x7f4>
 8004924:	2001      	movs	r0, #1
 8004926:	e779      	b.n	800481c <_dtoa_r+0x804>
 8004928:	2300      	movs	r3, #0
 800492a:	e7f6      	b.n	800491a <_dtoa_r+0x902>
 800492c:	9b02      	ldr	r3, [sp, #8]
 800492e:	e7f4      	b.n	800491a <_dtoa_r+0x902>
 8004930:	d085      	beq.n	800483e <_dtoa_r+0x826>
 8004932:	4618      	mov	r0, r3
 8004934:	301c      	adds	r0, #28
 8004936:	e77d      	b.n	8004834 <_dtoa_r+0x81c>
 8004938:	40240000 	.word	0x40240000
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	dc38      	bgt.n	80049b4 <_dtoa_r+0x99c>
 8004942:	9b05      	ldr	r3, [sp, #20]
 8004944:	2b02      	cmp	r3, #2
 8004946:	dd35      	ble.n	80049b4 <_dtoa_r+0x99c>
 8004948:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800494c:	f1b9 0f00 	cmp.w	r9, #0
 8004950:	d10d      	bne.n	800496e <_dtoa_r+0x956>
 8004952:	4631      	mov	r1, r6
 8004954:	464b      	mov	r3, r9
 8004956:	2205      	movs	r2, #5
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f9c5 	bl	8004ce8 <__multadd>
 800495e:	4601      	mov	r1, r0
 8004960:	4606      	mov	r6, r0
 8004962:	4658      	mov	r0, fp
 8004964:	f000 fbdc 	bl	8005120 <__mcmp>
 8004968:	2800      	cmp	r0, #0
 800496a:	f73f adbd 	bgt.w	80044e8 <_dtoa_r+0x4d0>
 800496e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004970:	9d00      	ldr	r5, [sp, #0]
 8004972:	ea6f 0a03 	mvn.w	sl, r3
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	4631      	mov	r1, r6
 800497c:	4620      	mov	r0, r4
 800497e:	f000 f991 	bl	8004ca4 <_Bfree>
 8004982:	2f00      	cmp	r7, #0
 8004984:	f43f aeb4 	beq.w	80046f0 <_dtoa_r+0x6d8>
 8004988:	f1b8 0f00 	cmp.w	r8, #0
 800498c:	d005      	beq.n	800499a <_dtoa_r+0x982>
 800498e:	45b8      	cmp	r8, r7
 8004990:	d003      	beq.n	800499a <_dtoa_r+0x982>
 8004992:	4641      	mov	r1, r8
 8004994:	4620      	mov	r0, r4
 8004996:	f000 f985 	bl	8004ca4 <_Bfree>
 800499a:	4639      	mov	r1, r7
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f981 	bl	8004ca4 <_Bfree>
 80049a2:	e6a5      	b.n	80046f0 <_dtoa_r+0x6d8>
 80049a4:	2600      	movs	r6, #0
 80049a6:	4637      	mov	r7, r6
 80049a8:	e7e1      	b.n	800496e <_dtoa_r+0x956>
 80049aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80049ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80049b0:	4637      	mov	r7, r6
 80049b2:	e599      	b.n	80044e8 <_dtoa_r+0x4d0>
 80049b4:	9b08      	ldr	r3, [sp, #32]
 80049b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80fd 	beq.w	8004bba <_dtoa_r+0xba2>
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	dd05      	ble.n	80049d0 <_dtoa_r+0x9b8>
 80049c4:	4639      	mov	r1, r7
 80049c6:	462a      	mov	r2, r5
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fb3d 	bl	8005048 <__lshift>
 80049ce:	4607      	mov	r7, r0
 80049d0:	9b06      	ldr	r3, [sp, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d05c      	beq.n	8004a90 <_dtoa_r+0xa78>
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 f923 	bl	8004c24 <_Balloc>
 80049de:	4605      	mov	r5, r0
 80049e0:	b928      	cbnz	r0, 80049ee <_dtoa_r+0x9d6>
 80049e2:	4b80      	ldr	r3, [pc, #512]	; (8004be4 <_dtoa_r+0xbcc>)
 80049e4:	4602      	mov	r2, r0
 80049e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80049ea:	f7ff bb2e 	b.w	800404a <_dtoa_r+0x32>
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	3202      	adds	r2, #2
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	f107 010c 	add.w	r1, r7, #12
 80049f8:	300c      	adds	r0, #12
 80049fa:	f000 f905 	bl	8004c08 <memcpy>
 80049fe:	2201      	movs	r2, #1
 8004a00:	4629      	mov	r1, r5
 8004a02:	4620      	mov	r0, r4
 8004a04:	f000 fb20 	bl	8005048 <__lshift>
 8004a08:	9b00      	ldr	r3, [sp, #0]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	9b00      	ldr	r3, [sp, #0]
 8004a10:	444b      	add	r3, r9
 8004a12:	9307      	str	r3, [sp, #28]
 8004a14:	9b02      	ldr	r3, [sp, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	46b8      	mov	r8, r7
 8004a1c:	9306      	str	r3, [sp, #24]
 8004a1e:	4607      	mov	r7, r0
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	4631      	mov	r1, r6
 8004a24:	3b01      	subs	r3, #1
 8004a26:	4658      	mov	r0, fp
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	f7ff fa67 	bl	8003efc <quorem>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	3330      	adds	r3, #48	; 0x30
 8004a32:	9004      	str	r0, [sp, #16]
 8004a34:	4641      	mov	r1, r8
 8004a36:	4658      	mov	r0, fp
 8004a38:	9308      	str	r3, [sp, #32]
 8004a3a:	f000 fb71 	bl	8005120 <__mcmp>
 8004a3e:	463a      	mov	r2, r7
 8004a40:	4681      	mov	r9, r0
 8004a42:	4631      	mov	r1, r6
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fb87 	bl	8005158 <__mdiff>
 8004a4a:	68c2      	ldr	r2, [r0, #12]
 8004a4c:	9b08      	ldr	r3, [sp, #32]
 8004a4e:	4605      	mov	r5, r0
 8004a50:	bb02      	cbnz	r2, 8004a94 <_dtoa_r+0xa7c>
 8004a52:	4601      	mov	r1, r0
 8004a54:	4658      	mov	r0, fp
 8004a56:	f000 fb63 	bl	8005120 <__mcmp>
 8004a5a:	9b08      	ldr	r3, [sp, #32]
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004a66:	f000 f91d 	bl	8004ca4 <_Bfree>
 8004a6a:	9b05      	ldr	r3, [sp, #20]
 8004a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a6e:	9d01      	ldr	r5, [sp, #4]
 8004a70:	ea43 0102 	orr.w	r1, r3, r2
 8004a74:	9b06      	ldr	r3, [sp, #24]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	9b08      	ldr	r3, [sp, #32]
 8004a7a:	d10d      	bne.n	8004a98 <_dtoa_r+0xa80>
 8004a7c:	2b39      	cmp	r3, #57	; 0x39
 8004a7e:	d029      	beq.n	8004ad4 <_dtoa_r+0xabc>
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	dd01      	ble.n	8004a8a <_dtoa_r+0xa72>
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	3331      	adds	r3, #49	; 0x31
 8004a8a:	9a02      	ldr	r2, [sp, #8]
 8004a8c:	7013      	strb	r3, [r2, #0]
 8004a8e:	e774      	b.n	800497a <_dtoa_r+0x962>
 8004a90:	4638      	mov	r0, r7
 8004a92:	e7b9      	b.n	8004a08 <_dtoa_r+0x9f0>
 8004a94:	2201      	movs	r2, #1
 8004a96:	e7e2      	b.n	8004a5e <_dtoa_r+0xa46>
 8004a98:	f1b9 0f00 	cmp.w	r9, #0
 8004a9c:	db06      	blt.n	8004aac <_dtoa_r+0xa94>
 8004a9e:	9905      	ldr	r1, [sp, #20]
 8004aa0:	ea41 0909 	orr.w	r9, r1, r9
 8004aa4:	9906      	ldr	r1, [sp, #24]
 8004aa6:	ea59 0101 	orrs.w	r1, r9, r1
 8004aaa:	d120      	bne.n	8004aee <_dtoa_r+0xad6>
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	ddec      	ble.n	8004a8a <_dtoa_r+0xa72>
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	f000 fac6 	bl	8005048 <__lshift>
 8004abc:	4631      	mov	r1, r6
 8004abe:	4683      	mov	fp, r0
 8004ac0:	f000 fb2e 	bl	8005120 <__mcmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	9b01      	ldr	r3, [sp, #4]
 8004ac8:	dc02      	bgt.n	8004ad0 <_dtoa_r+0xab8>
 8004aca:	d1de      	bne.n	8004a8a <_dtoa_r+0xa72>
 8004acc:	07da      	lsls	r2, r3, #31
 8004ace:	d5dc      	bpl.n	8004a8a <_dtoa_r+0xa72>
 8004ad0:	2b39      	cmp	r3, #57	; 0x39
 8004ad2:	d1d8      	bne.n	8004a86 <_dtoa_r+0xa6e>
 8004ad4:	9a02      	ldr	r2, [sp, #8]
 8004ad6:	2339      	movs	r3, #57	; 0x39
 8004ad8:	7013      	strb	r3, [r2, #0]
 8004ada:	462b      	mov	r3, r5
 8004adc:	461d      	mov	r5, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004ae4:	2a39      	cmp	r2, #57	; 0x39
 8004ae6:	d050      	beq.n	8004b8a <_dtoa_r+0xb72>
 8004ae8:	3201      	adds	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e745      	b.n	800497a <_dtoa_r+0x962>
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	dd03      	ble.n	8004afa <_dtoa_r+0xae2>
 8004af2:	2b39      	cmp	r3, #57	; 0x39
 8004af4:	d0ee      	beq.n	8004ad4 <_dtoa_r+0xabc>
 8004af6:	3301      	adds	r3, #1
 8004af8:	e7c7      	b.n	8004a8a <_dtoa_r+0xa72>
 8004afa:	9a01      	ldr	r2, [sp, #4]
 8004afc:	9907      	ldr	r1, [sp, #28]
 8004afe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b02:	428a      	cmp	r2, r1
 8004b04:	d02a      	beq.n	8004b5c <_dtoa_r+0xb44>
 8004b06:	4659      	mov	r1, fp
 8004b08:	2300      	movs	r3, #0
 8004b0a:	220a      	movs	r2, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f8eb 	bl	8004ce8 <__multadd>
 8004b12:	45b8      	cmp	r8, r7
 8004b14:	4683      	mov	fp, r0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f04f 020a 	mov.w	r2, #10
 8004b1e:	4641      	mov	r1, r8
 8004b20:	4620      	mov	r0, r4
 8004b22:	d107      	bne.n	8004b34 <_dtoa_r+0xb1c>
 8004b24:	f000 f8e0 	bl	8004ce8 <__multadd>
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	9b01      	ldr	r3, [sp, #4]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	e775      	b.n	8004a20 <_dtoa_r+0xa08>
 8004b34:	f000 f8d8 	bl	8004ce8 <__multadd>
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	220a      	movs	r2, #10
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 f8d1 	bl	8004ce8 <__multadd>
 8004b46:	4607      	mov	r7, r0
 8004b48:	e7f0      	b.n	8004b2c <_dtoa_r+0xb14>
 8004b4a:	f1b9 0f00 	cmp.w	r9, #0
 8004b4e:	9a00      	ldr	r2, [sp, #0]
 8004b50:	bfcc      	ite	gt
 8004b52:	464d      	movgt	r5, r9
 8004b54:	2501      	movle	r5, #1
 8004b56:	4415      	add	r5, r2
 8004b58:	f04f 0800 	mov.w	r8, #0
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4620      	mov	r0, r4
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	f000 fa70 	bl	8005048 <__lshift>
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4683      	mov	fp, r0
 8004b6c:	f000 fad8 	bl	8005120 <__mcmp>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	dcb2      	bgt.n	8004ada <_dtoa_r+0xac2>
 8004b74:	d102      	bne.n	8004b7c <_dtoa_r+0xb64>
 8004b76:	9b01      	ldr	r3, [sp, #4]
 8004b78:	07db      	lsls	r3, r3, #31
 8004b7a:	d4ae      	bmi.n	8004ada <_dtoa_r+0xac2>
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	461d      	mov	r5, r3
 8004b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b84:	2a30      	cmp	r2, #48	; 0x30
 8004b86:	d0fa      	beq.n	8004b7e <_dtoa_r+0xb66>
 8004b88:	e6f7      	b.n	800497a <_dtoa_r+0x962>
 8004b8a:	9a00      	ldr	r2, [sp, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1a5      	bne.n	8004adc <_dtoa_r+0xac4>
 8004b90:	f10a 0a01 	add.w	sl, sl, #1
 8004b94:	2331      	movs	r3, #49	; 0x31
 8004b96:	e779      	b.n	8004a8c <_dtoa_r+0xa74>
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <_dtoa_r+0xbd0>)
 8004b9a:	f7ff baaf 	b.w	80040fc <_dtoa_r+0xe4>
 8004b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f aa86 	bne.w	80040b2 <_dtoa_r+0x9a>
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <_dtoa_r+0xbd4>)
 8004ba8:	f7ff baa8 	b.w	80040fc <_dtoa_r+0xe4>
 8004bac:	f1b9 0f00 	cmp.w	r9, #0
 8004bb0:	dc03      	bgt.n	8004bba <_dtoa_r+0xba2>
 8004bb2:	9b05      	ldr	r3, [sp, #20]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	f73f aec9 	bgt.w	800494c <_dtoa_r+0x934>
 8004bba:	9d00      	ldr	r5, [sp, #0]
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f7ff f99c 	bl	8003efc <quorem>
 8004bc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004bc8:	f805 3b01 	strb.w	r3, [r5], #1
 8004bcc:	9a00      	ldr	r2, [sp, #0]
 8004bce:	1aaa      	subs	r2, r5, r2
 8004bd0:	4591      	cmp	r9, r2
 8004bd2:	ddba      	ble.n	8004b4a <_dtoa_r+0xb32>
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	220a      	movs	r2, #10
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 f884 	bl	8004ce8 <__multadd>
 8004be0:	4683      	mov	fp, r0
 8004be2:	e7eb      	b.n	8004bbc <_dtoa_r+0xba4>
 8004be4:	080073cf 	.word	0x080073cf
 8004be8:	08007328 	.word	0x08007328
 8004bec:	0800734c 	.word	0x0800734c

08004bf0 <_localeconv_r>:
 8004bf0:	4800      	ldr	r0, [pc, #0]	; (8004bf4 <_localeconv_r+0x4>)
 8004bf2:	4770      	bx	lr
 8004bf4:	2000015c 	.word	0x2000015c

08004bf8 <malloc>:
 8004bf8:	4b02      	ldr	r3, [pc, #8]	; (8004c04 <malloc+0xc>)
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	f000 bbef 	b.w	80053e0 <_malloc_r>
 8004c02:	bf00      	nop
 8004c04:	20000008 	.word	0x20000008

08004c08 <memcpy>:
 8004c08:	440a      	add	r2, r1
 8004c0a:	4291      	cmp	r1, r2
 8004c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c10:	d100      	bne.n	8004c14 <memcpy+0xc>
 8004c12:	4770      	bx	lr
 8004c14:	b510      	push	{r4, lr}
 8004c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c1e:	4291      	cmp	r1, r2
 8004c20:	d1f9      	bne.n	8004c16 <memcpy+0xe>
 8004c22:	bd10      	pop	{r4, pc}

08004c24 <_Balloc>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c28:	4604      	mov	r4, r0
 8004c2a:	460d      	mov	r5, r1
 8004c2c:	b976      	cbnz	r6, 8004c4c <_Balloc+0x28>
 8004c2e:	2010      	movs	r0, #16
 8004c30:	f7ff ffe2 	bl	8004bf8 <malloc>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6260      	str	r0, [r4, #36]	; 0x24
 8004c38:	b920      	cbnz	r0, 8004c44 <_Balloc+0x20>
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <_Balloc+0x78>)
 8004c3c:	4818      	ldr	r0, [pc, #96]	; (8004ca0 <_Balloc+0x7c>)
 8004c3e:	2166      	movs	r1, #102	; 0x66
 8004c40:	f000 fd94 	bl	800576c <__assert_func>
 8004c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c48:	6006      	str	r6, [r0, #0]
 8004c4a:	60c6      	str	r6, [r0, #12]
 8004c4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c4e:	68f3      	ldr	r3, [r6, #12]
 8004c50:	b183      	cbz	r3, 8004c74 <_Balloc+0x50>
 8004c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c5a:	b9b8      	cbnz	r0, 8004c8c <_Balloc+0x68>
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004c62:	1d72      	adds	r2, r6, #5
 8004c64:	0092      	lsls	r2, r2, #2
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 fb5a 	bl	8005320 <_calloc_r>
 8004c6c:	b160      	cbz	r0, 8004c88 <_Balloc+0x64>
 8004c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c72:	e00e      	b.n	8004c92 <_Balloc+0x6e>
 8004c74:	2221      	movs	r2, #33	; 0x21
 8004c76:	2104      	movs	r1, #4
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 fb51 	bl	8005320 <_calloc_r>
 8004c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c80:	60f0      	str	r0, [r6, #12]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e4      	bne.n	8004c52 <_Balloc+0x2e>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	6802      	ldr	r2, [r0, #0]
 8004c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c92:	2300      	movs	r3, #0
 8004c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c98:	e7f7      	b.n	8004c8a <_Balloc+0x66>
 8004c9a:	bf00      	nop
 8004c9c:	08007359 	.word	0x08007359
 8004ca0:	080073e0 	.word	0x080073e0

08004ca4 <_Bfree>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ca8:	4605      	mov	r5, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	b976      	cbnz	r6, 8004ccc <_Bfree+0x28>
 8004cae:	2010      	movs	r0, #16
 8004cb0:	f7ff ffa2 	bl	8004bf8 <malloc>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6268      	str	r0, [r5, #36]	; 0x24
 8004cb8:	b920      	cbnz	r0, 8004cc4 <_Bfree+0x20>
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <_Bfree+0x3c>)
 8004cbc:	4809      	ldr	r0, [pc, #36]	; (8004ce4 <_Bfree+0x40>)
 8004cbe:	218a      	movs	r1, #138	; 0x8a
 8004cc0:	f000 fd54 	bl	800576c <__assert_func>
 8004cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004cc8:	6006      	str	r6, [r0, #0]
 8004cca:	60c6      	str	r6, [r0, #12]
 8004ccc:	b13c      	cbz	r4, 8004cde <_Bfree+0x3a>
 8004cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd0:	6862      	ldr	r2, [r4, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cd8:	6021      	str	r1, [r4, #0]
 8004cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	08007359 	.word	0x08007359
 8004ce4:	080073e0 	.word	0x080073e0

08004ce8 <__multadd>:
 8004ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	690e      	ldr	r6, [r1, #16]
 8004cee:	4607      	mov	r7, r0
 8004cf0:	4698      	mov	r8, r3
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	f101 0014 	add.w	r0, r1, #20
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6805      	ldr	r5, [r0, #0]
 8004cfc:	b2a9      	uxth	r1, r5
 8004cfe:	fb02 8101 	mla	r1, r2, r1, r8
 8004d02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004d06:	0c2d      	lsrs	r5, r5, #16
 8004d08:	fb02 c505 	mla	r5, r2, r5, ip
 8004d0c:	b289      	uxth	r1, r1
 8004d0e:	3301      	adds	r3, #1
 8004d10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004d14:	429e      	cmp	r6, r3
 8004d16:	f840 1b04 	str.w	r1, [r0], #4
 8004d1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004d1e:	dcec      	bgt.n	8004cfa <__multadd+0x12>
 8004d20:	f1b8 0f00 	cmp.w	r8, #0
 8004d24:	d022      	beq.n	8004d6c <__multadd+0x84>
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	42b3      	cmp	r3, r6
 8004d2a:	dc19      	bgt.n	8004d60 <__multadd+0x78>
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4638      	mov	r0, r7
 8004d30:	3101      	adds	r1, #1
 8004d32:	f7ff ff77 	bl	8004c24 <_Balloc>
 8004d36:	4605      	mov	r5, r0
 8004d38:	b928      	cbnz	r0, 8004d46 <__multadd+0x5e>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <__multadd+0x8c>)
 8004d3e:	480e      	ldr	r0, [pc, #56]	; (8004d78 <__multadd+0x90>)
 8004d40:	21b5      	movs	r1, #181	; 0xb5
 8004d42:	f000 fd13 	bl	800576c <__assert_func>
 8004d46:	6922      	ldr	r2, [r4, #16]
 8004d48:	3202      	adds	r2, #2
 8004d4a:	f104 010c 	add.w	r1, r4, #12
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	300c      	adds	r0, #12
 8004d52:	f7ff ff59 	bl	8004c08 <memcpy>
 8004d56:	4621      	mov	r1, r4
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ffa3 	bl	8004ca4 <_Bfree>
 8004d5e:	462c      	mov	r4, r5
 8004d60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004d64:	3601      	adds	r6, #1
 8004d66:	f8c3 8014 	str.w	r8, [r3, #20]
 8004d6a:	6126      	str	r6, [r4, #16]
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d72:	bf00      	nop
 8004d74:	080073cf 	.word	0x080073cf
 8004d78:	080073e0 	.word	0x080073e0

08004d7c <__hi0bits>:
 8004d7c:	0c03      	lsrs	r3, r0, #16
 8004d7e:	041b      	lsls	r3, r3, #16
 8004d80:	b9d3      	cbnz	r3, 8004db8 <__hi0bits+0x3c>
 8004d82:	0400      	lsls	r0, r0, #16
 8004d84:	2310      	movs	r3, #16
 8004d86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d8a:	bf04      	itt	eq
 8004d8c:	0200      	lsleq	r0, r0, #8
 8004d8e:	3308      	addeq	r3, #8
 8004d90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d94:	bf04      	itt	eq
 8004d96:	0100      	lsleq	r0, r0, #4
 8004d98:	3304      	addeq	r3, #4
 8004d9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d9e:	bf04      	itt	eq
 8004da0:	0080      	lsleq	r0, r0, #2
 8004da2:	3302      	addeq	r3, #2
 8004da4:	2800      	cmp	r0, #0
 8004da6:	db05      	blt.n	8004db4 <__hi0bits+0x38>
 8004da8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004dac:	f103 0301 	add.w	r3, r3, #1
 8004db0:	bf08      	it	eq
 8004db2:	2320      	moveq	r3, #32
 8004db4:	4618      	mov	r0, r3
 8004db6:	4770      	bx	lr
 8004db8:	2300      	movs	r3, #0
 8004dba:	e7e4      	b.n	8004d86 <__hi0bits+0xa>

08004dbc <__lo0bits>:
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	f013 0207 	ands.w	r2, r3, #7
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	d00b      	beq.n	8004dde <__lo0bits+0x22>
 8004dc6:	07da      	lsls	r2, r3, #31
 8004dc8:	d424      	bmi.n	8004e14 <__lo0bits+0x58>
 8004dca:	0798      	lsls	r0, r3, #30
 8004dcc:	bf49      	itett	mi
 8004dce:	085b      	lsrmi	r3, r3, #1
 8004dd0:	089b      	lsrpl	r3, r3, #2
 8004dd2:	2001      	movmi	r0, #1
 8004dd4:	600b      	strmi	r3, [r1, #0]
 8004dd6:	bf5c      	itt	pl
 8004dd8:	600b      	strpl	r3, [r1, #0]
 8004dda:	2002      	movpl	r0, #2
 8004ddc:	4770      	bx	lr
 8004dde:	b298      	uxth	r0, r3
 8004de0:	b9b0      	cbnz	r0, 8004e10 <__lo0bits+0x54>
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	2010      	movs	r0, #16
 8004de6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004dea:	bf04      	itt	eq
 8004dec:	0a1b      	lsreq	r3, r3, #8
 8004dee:	3008      	addeq	r0, #8
 8004df0:	071a      	lsls	r2, r3, #28
 8004df2:	bf04      	itt	eq
 8004df4:	091b      	lsreq	r3, r3, #4
 8004df6:	3004      	addeq	r0, #4
 8004df8:	079a      	lsls	r2, r3, #30
 8004dfa:	bf04      	itt	eq
 8004dfc:	089b      	lsreq	r3, r3, #2
 8004dfe:	3002      	addeq	r0, #2
 8004e00:	07da      	lsls	r2, r3, #31
 8004e02:	d403      	bmi.n	8004e0c <__lo0bits+0x50>
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f100 0001 	add.w	r0, r0, #1
 8004e0a:	d005      	beq.n	8004e18 <__lo0bits+0x5c>
 8004e0c:	600b      	str	r3, [r1, #0]
 8004e0e:	4770      	bx	lr
 8004e10:	4610      	mov	r0, r2
 8004e12:	e7e8      	b.n	8004de6 <__lo0bits+0x2a>
 8004e14:	2000      	movs	r0, #0
 8004e16:	4770      	bx	lr
 8004e18:	2020      	movs	r0, #32
 8004e1a:	4770      	bx	lr

08004e1c <__i2b>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	460c      	mov	r4, r1
 8004e20:	2101      	movs	r1, #1
 8004e22:	f7ff feff 	bl	8004c24 <_Balloc>
 8004e26:	4602      	mov	r2, r0
 8004e28:	b928      	cbnz	r0, 8004e36 <__i2b+0x1a>
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <__i2b+0x24>)
 8004e2c:	4805      	ldr	r0, [pc, #20]	; (8004e44 <__i2b+0x28>)
 8004e2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e32:	f000 fc9b 	bl	800576c <__assert_func>
 8004e36:	2301      	movs	r3, #1
 8004e38:	6144      	str	r4, [r0, #20]
 8004e3a:	6103      	str	r3, [r0, #16]
 8004e3c:	bd10      	pop	{r4, pc}
 8004e3e:	bf00      	nop
 8004e40:	080073cf 	.word	0x080073cf
 8004e44:	080073e0 	.word	0x080073e0

08004e48 <__multiply>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	690a      	ldr	r2, [r1, #16]
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bfb8      	it	lt
 8004e56:	460b      	movlt	r3, r1
 8004e58:	460d      	mov	r5, r1
 8004e5a:	bfbc      	itt	lt
 8004e5c:	4625      	movlt	r5, r4
 8004e5e:	461c      	movlt	r4, r3
 8004e60:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004e64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004e68:	68ab      	ldr	r3, [r5, #8]
 8004e6a:	6869      	ldr	r1, [r5, #4]
 8004e6c:	eb0a 0709 	add.w	r7, sl, r9
 8004e70:	42bb      	cmp	r3, r7
 8004e72:	b085      	sub	sp, #20
 8004e74:	bfb8      	it	lt
 8004e76:	3101      	addlt	r1, #1
 8004e78:	f7ff fed4 	bl	8004c24 <_Balloc>
 8004e7c:	b930      	cbnz	r0, 8004e8c <__multiply+0x44>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b42      	ldr	r3, [pc, #264]	; (8004f8c <__multiply+0x144>)
 8004e82:	4843      	ldr	r0, [pc, #268]	; (8004f90 <__multiply+0x148>)
 8004e84:	f240 115d 	movw	r1, #349	; 0x15d
 8004e88:	f000 fc70 	bl	800576c <__assert_func>
 8004e8c:	f100 0614 	add.w	r6, r0, #20
 8004e90:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004e94:	4633      	mov	r3, r6
 8004e96:	2200      	movs	r2, #0
 8004e98:	4543      	cmp	r3, r8
 8004e9a:	d31e      	bcc.n	8004eda <__multiply+0x92>
 8004e9c:	f105 0c14 	add.w	ip, r5, #20
 8004ea0:	f104 0314 	add.w	r3, r4, #20
 8004ea4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ea8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004eac:	9202      	str	r2, [sp, #8]
 8004eae:	ebac 0205 	sub.w	r2, ip, r5
 8004eb2:	3a15      	subs	r2, #21
 8004eb4:	f022 0203 	bic.w	r2, r2, #3
 8004eb8:	3204      	adds	r2, #4
 8004eba:	f105 0115 	add.w	r1, r5, #21
 8004ebe:	458c      	cmp	ip, r1
 8004ec0:	bf38      	it	cc
 8004ec2:	2204      	movcc	r2, #4
 8004ec4:	9201      	str	r2, [sp, #4]
 8004ec6:	9a02      	ldr	r2, [sp, #8]
 8004ec8:	9303      	str	r3, [sp, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d808      	bhi.n	8004ee0 <__multiply+0x98>
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	dc55      	bgt.n	8004f7e <__multiply+0x136>
 8004ed2:	6107      	str	r7, [r0, #16]
 8004ed4:	b005      	add	sp, #20
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	f843 2b04 	str.w	r2, [r3], #4
 8004ede:	e7db      	b.n	8004e98 <__multiply+0x50>
 8004ee0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004ee4:	f1ba 0f00 	cmp.w	sl, #0
 8004ee8:	d020      	beq.n	8004f2c <__multiply+0xe4>
 8004eea:	f105 0e14 	add.w	lr, r5, #20
 8004eee:	46b1      	mov	r9, r6
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004ef6:	f8d9 b000 	ldr.w	fp, [r9]
 8004efa:	b2a1      	uxth	r1, r4
 8004efc:	fa1f fb8b 	uxth.w	fp, fp
 8004f00:	fb0a b101 	mla	r1, sl, r1, fp
 8004f04:	4411      	add	r1, r2
 8004f06:	f8d9 2000 	ldr.w	r2, [r9]
 8004f0a:	0c24      	lsrs	r4, r4, #16
 8004f0c:	0c12      	lsrs	r2, r2, #16
 8004f0e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004f12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004f16:	b289      	uxth	r1, r1
 8004f18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004f1c:	45f4      	cmp	ip, lr
 8004f1e:	f849 1b04 	str.w	r1, [r9], #4
 8004f22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004f26:	d8e4      	bhi.n	8004ef2 <__multiply+0xaa>
 8004f28:	9901      	ldr	r1, [sp, #4]
 8004f2a:	5072      	str	r2, [r6, r1]
 8004f2c:	9a03      	ldr	r2, [sp, #12]
 8004f2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f32:	3304      	adds	r3, #4
 8004f34:	f1b9 0f00 	cmp.w	r9, #0
 8004f38:	d01f      	beq.n	8004f7a <__multiply+0x132>
 8004f3a:	6834      	ldr	r4, [r6, #0]
 8004f3c:	f105 0114 	add.w	r1, r5, #20
 8004f40:	46b6      	mov	lr, r6
 8004f42:	f04f 0a00 	mov.w	sl, #0
 8004f46:	880a      	ldrh	r2, [r1, #0]
 8004f48:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004f4c:	fb09 b202 	mla	r2, r9, r2, fp
 8004f50:	4492      	add	sl, r2
 8004f52:	b2a4      	uxth	r4, r4
 8004f54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004f58:	f84e 4b04 	str.w	r4, [lr], #4
 8004f5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004f60:	f8be 2000 	ldrh.w	r2, [lr]
 8004f64:	0c24      	lsrs	r4, r4, #16
 8004f66:	fb09 2404 	mla	r4, r9, r4, r2
 8004f6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004f6e:	458c      	cmp	ip, r1
 8004f70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004f74:	d8e7      	bhi.n	8004f46 <__multiply+0xfe>
 8004f76:	9a01      	ldr	r2, [sp, #4]
 8004f78:	50b4      	str	r4, [r6, r2]
 8004f7a:	3604      	adds	r6, #4
 8004f7c:	e7a3      	b.n	8004ec6 <__multiply+0x7e>
 8004f7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1a5      	bne.n	8004ed2 <__multiply+0x8a>
 8004f86:	3f01      	subs	r7, #1
 8004f88:	e7a1      	b.n	8004ece <__multiply+0x86>
 8004f8a:	bf00      	nop
 8004f8c:	080073cf 	.word	0x080073cf
 8004f90:	080073e0 	.word	0x080073e0

08004f94 <__pow5mult>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	4615      	mov	r5, r2
 8004f9a:	f012 0203 	ands.w	r2, r2, #3
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	d007      	beq.n	8004fb4 <__pow5mult+0x20>
 8004fa4:	4c25      	ldr	r4, [pc, #148]	; (800503c <__pow5mult+0xa8>)
 8004fa6:	3a01      	subs	r2, #1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fae:	f7ff fe9b 	bl	8004ce8 <__multadd>
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	10ad      	asrs	r5, r5, #2
 8004fb6:	d03d      	beq.n	8005034 <__pow5mult+0xa0>
 8004fb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004fba:	b97c      	cbnz	r4, 8004fdc <__pow5mult+0x48>
 8004fbc:	2010      	movs	r0, #16
 8004fbe:	f7ff fe1b 	bl	8004bf8 <malloc>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6270      	str	r0, [r6, #36]	; 0x24
 8004fc6:	b928      	cbnz	r0, 8004fd4 <__pow5mult+0x40>
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <__pow5mult+0xac>)
 8004fca:	481e      	ldr	r0, [pc, #120]	; (8005044 <__pow5mult+0xb0>)
 8004fcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004fd0:	f000 fbcc 	bl	800576c <__assert_func>
 8004fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fd8:	6004      	str	r4, [r0, #0]
 8004fda:	60c4      	str	r4, [r0, #12]
 8004fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fe4:	b94c      	cbnz	r4, 8004ffa <__pow5mult+0x66>
 8004fe6:	f240 2171 	movw	r1, #625	; 0x271
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff ff16 	bl	8004e1c <__i2b>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	6003      	str	r3, [r0, #0]
 8004ffa:	f04f 0900 	mov.w	r9, #0
 8004ffe:	07eb      	lsls	r3, r5, #31
 8005000:	d50a      	bpl.n	8005018 <__pow5mult+0x84>
 8005002:	4639      	mov	r1, r7
 8005004:	4622      	mov	r2, r4
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff ff1e 	bl	8004e48 <__multiply>
 800500c:	4639      	mov	r1, r7
 800500e:	4680      	mov	r8, r0
 8005010:	4630      	mov	r0, r6
 8005012:	f7ff fe47 	bl	8004ca4 <_Bfree>
 8005016:	4647      	mov	r7, r8
 8005018:	106d      	asrs	r5, r5, #1
 800501a:	d00b      	beq.n	8005034 <__pow5mult+0xa0>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	b938      	cbnz	r0, 8005030 <__pow5mult+0x9c>
 8005020:	4622      	mov	r2, r4
 8005022:	4621      	mov	r1, r4
 8005024:	4630      	mov	r0, r6
 8005026:	f7ff ff0f 	bl	8004e48 <__multiply>
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	f8c0 9000 	str.w	r9, [r0]
 8005030:	4604      	mov	r4, r0
 8005032:	e7e4      	b.n	8004ffe <__pow5mult+0x6a>
 8005034:	4638      	mov	r0, r7
 8005036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503a:	bf00      	nop
 800503c:	08007530 	.word	0x08007530
 8005040:	08007359 	.word	0x08007359
 8005044:	080073e0 	.word	0x080073e0

08005048 <__lshift>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	460c      	mov	r4, r1
 800504e:	6849      	ldr	r1, [r1, #4]
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005056:	68a3      	ldr	r3, [r4, #8]
 8005058:	4607      	mov	r7, r0
 800505a:	4691      	mov	r9, r2
 800505c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005060:	f108 0601 	add.w	r6, r8, #1
 8005064:	42b3      	cmp	r3, r6
 8005066:	db0b      	blt.n	8005080 <__lshift+0x38>
 8005068:	4638      	mov	r0, r7
 800506a:	f7ff fddb 	bl	8004c24 <_Balloc>
 800506e:	4605      	mov	r5, r0
 8005070:	b948      	cbnz	r0, 8005086 <__lshift+0x3e>
 8005072:	4602      	mov	r2, r0
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <__lshift+0xd0>)
 8005076:	4829      	ldr	r0, [pc, #164]	; (800511c <__lshift+0xd4>)
 8005078:	f240 11d9 	movw	r1, #473	; 0x1d9
 800507c:	f000 fb76 	bl	800576c <__assert_func>
 8005080:	3101      	adds	r1, #1
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	e7ee      	b.n	8005064 <__lshift+0x1c>
 8005086:	2300      	movs	r3, #0
 8005088:	f100 0114 	add.w	r1, r0, #20
 800508c:	f100 0210 	add.w	r2, r0, #16
 8005090:	4618      	mov	r0, r3
 8005092:	4553      	cmp	r3, sl
 8005094:	db33      	blt.n	80050fe <__lshift+0xb6>
 8005096:	6920      	ldr	r0, [r4, #16]
 8005098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800509c:	f104 0314 	add.w	r3, r4, #20
 80050a0:	f019 091f 	ands.w	r9, r9, #31
 80050a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050ac:	d02b      	beq.n	8005106 <__lshift+0xbe>
 80050ae:	f1c9 0e20 	rsb	lr, r9, #32
 80050b2:	468a      	mov	sl, r1
 80050b4:	2200      	movs	r2, #0
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	fa00 f009 	lsl.w	r0, r0, r9
 80050bc:	4302      	orrs	r2, r0
 80050be:	f84a 2b04 	str.w	r2, [sl], #4
 80050c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c6:	459c      	cmp	ip, r3
 80050c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80050cc:	d8f3      	bhi.n	80050b6 <__lshift+0x6e>
 80050ce:	ebac 0304 	sub.w	r3, ip, r4
 80050d2:	3b15      	subs	r3, #21
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	3304      	adds	r3, #4
 80050da:	f104 0015 	add.w	r0, r4, #21
 80050de:	4584      	cmp	ip, r0
 80050e0:	bf38      	it	cc
 80050e2:	2304      	movcc	r3, #4
 80050e4:	50ca      	str	r2, [r1, r3]
 80050e6:	b10a      	cbz	r2, 80050ec <__lshift+0xa4>
 80050e8:	f108 0602 	add.w	r6, r8, #2
 80050ec:	3e01      	subs	r6, #1
 80050ee:	4638      	mov	r0, r7
 80050f0:	612e      	str	r6, [r5, #16]
 80050f2:	4621      	mov	r1, r4
 80050f4:	f7ff fdd6 	bl	8004ca4 <_Bfree>
 80050f8:	4628      	mov	r0, r5
 80050fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005102:	3301      	adds	r3, #1
 8005104:	e7c5      	b.n	8005092 <__lshift+0x4a>
 8005106:	3904      	subs	r1, #4
 8005108:	f853 2b04 	ldr.w	r2, [r3], #4
 800510c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005110:	459c      	cmp	ip, r3
 8005112:	d8f9      	bhi.n	8005108 <__lshift+0xc0>
 8005114:	e7ea      	b.n	80050ec <__lshift+0xa4>
 8005116:	bf00      	nop
 8005118:	080073cf 	.word	0x080073cf
 800511c:	080073e0 	.word	0x080073e0

08005120 <__mcmp>:
 8005120:	b530      	push	{r4, r5, lr}
 8005122:	6902      	ldr	r2, [r0, #16]
 8005124:	690c      	ldr	r4, [r1, #16]
 8005126:	1b12      	subs	r2, r2, r4
 8005128:	d10e      	bne.n	8005148 <__mcmp+0x28>
 800512a:	f100 0314 	add.w	r3, r0, #20
 800512e:	3114      	adds	r1, #20
 8005130:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005134:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005138:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800513c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005140:	42a5      	cmp	r5, r4
 8005142:	d003      	beq.n	800514c <__mcmp+0x2c>
 8005144:	d305      	bcc.n	8005152 <__mcmp+0x32>
 8005146:	2201      	movs	r2, #1
 8005148:	4610      	mov	r0, r2
 800514a:	bd30      	pop	{r4, r5, pc}
 800514c:	4283      	cmp	r3, r0
 800514e:	d3f3      	bcc.n	8005138 <__mcmp+0x18>
 8005150:	e7fa      	b.n	8005148 <__mcmp+0x28>
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	e7f7      	b.n	8005148 <__mcmp+0x28>

08005158 <__mdiff>:
 8005158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	460c      	mov	r4, r1
 800515e:	4606      	mov	r6, r0
 8005160:	4611      	mov	r1, r2
 8005162:	4620      	mov	r0, r4
 8005164:	4617      	mov	r7, r2
 8005166:	f7ff ffdb 	bl	8005120 <__mcmp>
 800516a:	1e05      	subs	r5, r0, #0
 800516c:	d110      	bne.n	8005190 <__mdiff+0x38>
 800516e:	4629      	mov	r1, r5
 8005170:	4630      	mov	r0, r6
 8005172:	f7ff fd57 	bl	8004c24 <_Balloc>
 8005176:	b930      	cbnz	r0, 8005186 <__mdiff+0x2e>
 8005178:	4b39      	ldr	r3, [pc, #228]	; (8005260 <__mdiff+0x108>)
 800517a:	4602      	mov	r2, r0
 800517c:	f240 2132 	movw	r1, #562	; 0x232
 8005180:	4838      	ldr	r0, [pc, #224]	; (8005264 <__mdiff+0x10c>)
 8005182:	f000 faf3 	bl	800576c <__assert_func>
 8005186:	2301      	movs	r3, #1
 8005188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800518c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	bfa4      	itt	ge
 8005192:	463b      	movge	r3, r7
 8005194:	4627      	movge	r7, r4
 8005196:	4630      	mov	r0, r6
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	bfa6      	itte	ge
 800519c:	461c      	movge	r4, r3
 800519e:	2500      	movge	r5, #0
 80051a0:	2501      	movlt	r5, #1
 80051a2:	f7ff fd3f 	bl	8004c24 <_Balloc>
 80051a6:	b920      	cbnz	r0, 80051b2 <__mdiff+0x5a>
 80051a8:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <__mdiff+0x108>)
 80051aa:	4602      	mov	r2, r0
 80051ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80051b0:	e7e6      	b.n	8005180 <__mdiff+0x28>
 80051b2:	693e      	ldr	r6, [r7, #16]
 80051b4:	60c5      	str	r5, [r0, #12]
 80051b6:	6925      	ldr	r5, [r4, #16]
 80051b8:	f107 0114 	add.w	r1, r7, #20
 80051bc:	f104 0914 	add.w	r9, r4, #20
 80051c0:	f100 0e14 	add.w	lr, r0, #20
 80051c4:	f107 0210 	add.w	r2, r7, #16
 80051c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80051cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80051d0:	46f2      	mov	sl, lr
 80051d2:	2700      	movs	r7, #0
 80051d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80051d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80051dc:	fa1f f883 	uxth.w	r8, r3
 80051e0:	fa17 f78b 	uxtah	r7, r7, fp
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	eba7 0808 	sub.w	r8, r7, r8
 80051ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80051ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80051f2:	fa1f f888 	uxth.w	r8, r8
 80051f6:	141f      	asrs	r7, r3, #16
 80051f8:	454d      	cmp	r5, r9
 80051fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80051fe:	f84a 3b04 	str.w	r3, [sl], #4
 8005202:	d8e7      	bhi.n	80051d4 <__mdiff+0x7c>
 8005204:	1b2b      	subs	r3, r5, r4
 8005206:	3b15      	subs	r3, #21
 8005208:	f023 0303 	bic.w	r3, r3, #3
 800520c:	3304      	adds	r3, #4
 800520e:	3415      	adds	r4, #21
 8005210:	42a5      	cmp	r5, r4
 8005212:	bf38      	it	cc
 8005214:	2304      	movcc	r3, #4
 8005216:	4419      	add	r1, r3
 8005218:	4473      	add	r3, lr
 800521a:	469e      	mov	lr, r3
 800521c:	460d      	mov	r5, r1
 800521e:	4565      	cmp	r5, ip
 8005220:	d30e      	bcc.n	8005240 <__mdiff+0xe8>
 8005222:	f10c 0203 	add.w	r2, ip, #3
 8005226:	1a52      	subs	r2, r2, r1
 8005228:	f022 0203 	bic.w	r2, r2, #3
 800522c:	3903      	subs	r1, #3
 800522e:	458c      	cmp	ip, r1
 8005230:	bf38      	it	cc
 8005232:	2200      	movcc	r2, #0
 8005234:	441a      	add	r2, r3
 8005236:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800523a:	b17b      	cbz	r3, 800525c <__mdiff+0x104>
 800523c:	6106      	str	r6, [r0, #16]
 800523e:	e7a5      	b.n	800518c <__mdiff+0x34>
 8005240:	f855 8b04 	ldr.w	r8, [r5], #4
 8005244:	fa17 f488 	uxtah	r4, r7, r8
 8005248:	1422      	asrs	r2, r4, #16
 800524a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800524e:	b2a4      	uxth	r4, r4
 8005250:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005254:	f84e 4b04 	str.w	r4, [lr], #4
 8005258:	1417      	asrs	r7, r2, #16
 800525a:	e7e0      	b.n	800521e <__mdiff+0xc6>
 800525c:	3e01      	subs	r6, #1
 800525e:	e7ea      	b.n	8005236 <__mdiff+0xde>
 8005260:	080073cf 	.word	0x080073cf
 8005264:	080073e0 	.word	0x080073e0

08005268 <__d2b>:
 8005268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4689      	mov	r9, r1
 800526e:	2101      	movs	r1, #1
 8005270:	ec57 6b10 	vmov	r6, r7, d0
 8005274:	4690      	mov	r8, r2
 8005276:	f7ff fcd5 	bl	8004c24 <_Balloc>
 800527a:	4604      	mov	r4, r0
 800527c:	b930      	cbnz	r0, 800528c <__d2b+0x24>
 800527e:	4602      	mov	r2, r0
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <__d2b+0xb0>)
 8005282:	4826      	ldr	r0, [pc, #152]	; (800531c <__d2b+0xb4>)
 8005284:	f240 310a 	movw	r1, #778	; 0x30a
 8005288:	f000 fa70 	bl	800576c <__assert_func>
 800528c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005294:	bb35      	cbnz	r5, 80052e4 <__d2b+0x7c>
 8005296:	2e00      	cmp	r6, #0
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	d028      	beq.n	80052ee <__d2b+0x86>
 800529c:	4668      	mov	r0, sp
 800529e:	9600      	str	r6, [sp, #0]
 80052a0:	f7ff fd8c 	bl	8004dbc <__lo0bits>
 80052a4:	9900      	ldr	r1, [sp, #0]
 80052a6:	b300      	cbz	r0, 80052ea <__d2b+0x82>
 80052a8:	9a01      	ldr	r2, [sp, #4]
 80052aa:	f1c0 0320 	rsb	r3, r0, #32
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	430b      	orrs	r3, r1
 80052b4:	40c2      	lsrs	r2, r0
 80052b6:	6163      	str	r3, [r4, #20]
 80052b8:	9201      	str	r2, [sp, #4]
 80052ba:	9b01      	ldr	r3, [sp, #4]
 80052bc:	61a3      	str	r3, [r4, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2202      	movne	r2, #2
 80052c4:	2201      	moveq	r2, #1
 80052c6:	6122      	str	r2, [r4, #16]
 80052c8:	b1d5      	cbz	r5, 8005300 <__d2b+0x98>
 80052ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80052ce:	4405      	add	r5, r0
 80052d0:	f8c9 5000 	str.w	r5, [r9]
 80052d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052d8:	f8c8 0000 	str.w	r0, [r8]
 80052dc:	4620      	mov	r0, r4
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e8:	e7d5      	b.n	8005296 <__d2b+0x2e>
 80052ea:	6161      	str	r1, [r4, #20]
 80052ec:	e7e5      	b.n	80052ba <__d2b+0x52>
 80052ee:	a801      	add	r0, sp, #4
 80052f0:	f7ff fd64 	bl	8004dbc <__lo0bits>
 80052f4:	9b01      	ldr	r3, [sp, #4]
 80052f6:	6163      	str	r3, [r4, #20]
 80052f8:	2201      	movs	r2, #1
 80052fa:	6122      	str	r2, [r4, #16]
 80052fc:	3020      	adds	r0, #32
 80052fe:	e7e3      	b.n	80052c8 <__d2b+0x60>
 8005300:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005308:	f8c9 0000 	str.w	r0, [r9]
 800530c:	6918      	ldr	r0, [r3, #16]
 800530e:	f7ff fd35 	bl	8004d7c <__hi0bits>
 8005312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005316:	e7df      	b.n	80052d8 <__d2b+0x70>
 8005318:	080073cf 	.word	0x080073cf
 800531c:	080073e0 	.word	0x080073e0

08005320 <_calloc_r>:
 8005320:	b513      	push	{r0, r1, r4, lr}
 8005322:	434a      	muls	r2, r1
 8005324:	4611      	mov	r1, r2
 8005326:	9201      	str	r2, [sp, #4]
 8005328:	f000 f85a 	bl	80053e0 <_malloc_r>
 800532c:	4604      	mov	r4, r0
 800532e:	b118      	cbz	r0, 8005338 <_calloc_r+0x18>
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	2100      	movs	r1, #0
 8005334:	f7fe f950 	bl	80035d8 <memset>
 8005338:	4620      	mov	r0, r4
 800533a:	b002      	add	sp, #8
 800533c:	bd10      	pop	{r4, pc}
	...

08005340 <_free_r>:
 8005340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005342:	2900      	cmp	r1, #0
 8005344:	d048      	beq.n	80053d8 <_free_r+0x98>
 8005346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534a:	9001      	str	r0, [sp, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f1a1 0404 	sub.w	r4, r1, #4
 8005352:	bfb8      	it	lt
 8005354:	18e4      	addlt	r4, r4, r3
 8005356:	f000 fa65 	bl	8005824 <__malloc_lock>
 800535a:	4a20      	ldr	r2, [pc, #128]	; (80053dc <_free_r+0x9c>)
 800535c:	9801      	ldr	r0, [sp, #4]
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	4615      	mov	r5, r2
 8005362:	b933      	cbnz	r3, 8005372 <_free_r+0x32>
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	6014      	str	r4, [r2, #0]
 8005368:	b003      	add	sp, #12
 800536a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800536e:	f000 ba5f 	b.w	8005830 <__malloc_unlock>
 8005372:	42a3      	cmp	r3, r4
 8005374:	d90b      	bls.n	800538e <_free_r+0x4e>
 8005376:	6821      	ldr	r1, [r4, #0]
 8005378:	1862      	adds	r2, r4, r1
 800537a:	4293      	cmp	r3, r2
 800537c:	bf04      	itt	eq
 800537e:	681a      	ldreq	r2, [r3, #0]
 8005380:	685b      	ldreq	r3, [r3, #4]
 8005382:	6063      	str	r3, [r4, #4]
 8005384:	bf04      	itt	eq
 8005386:	1852      	addeq	r2, r2, r1
 8005388:	6022      	streq	r2, [r4, #0]
 800538a:	602c      	str	r4, [r5, #0]
 800538c:	e7ec      	b.n	8005368 <_free_r+0x28>
 800538e:	461a      	mov	r2, r3
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	b10b      	cbz	r3, 8005398 <_free_r+0x58>
 8005394:	42a3      	cmp	r3, r4
 8005396:	d9fa      	bls.n	800538e <_free_r+0x4e>
 8005398:	6811      	ldr	r1, [r2, #0]
 800539a:	1855      	adds	r5, r2, r1
 800539c:	42a5      	cmp	r5, r4
 800539e:	d10b      	bne.n	80053b8 <_free_r+0x78>
 80053a0:	6824      	ldr	r4, [r4, #0]
 80053a2:	4421      	add	r1, r4
 80053a4:	1854      	adds	r4, r2, r1
 80053a6:	42a3      	cmp	r3, r4
 80053a8:	6011      	str	r1, [r2, #0]
 80053aa:	d1dd      	bne.n	8005368 <_free_r+0x28>
 80053ac:	681c      	ldr	r4, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	6053      	str	r3, [r2, #4]
 80053b2:	4421      	add	r1, r4
 80053b4:	6011      	str	r1, [r2, #0]
 80053b6:	e7d7      	b.n	8005368 <_free_r+0x28>
 80053b8:	d902      	bls.n	80053c0 <_free_r+0x80>
 80053ba:	230c      	movs	r3, #12
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	e7d3      	b.n	8005368 <_free_r+0x28>
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	1961      	adds	r1, r4, r5
 80053c4:	428b      	cmp	r3, r1
 80053c6:	bf04      	itt	eq
 80053c8:	6819      	ldreq	r1, [r3, #0]
 80053ca:	685b      	ldreq	r3, [r3, #4]
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	bf04      	itt	eq
 80053d0:	1949      	addeq	r1, r1, r5
 80053d2:	6021      	streq	r1, [r4, #0]
 80053d4:	6054      	str	r4, [r2, #4]
 80053d6:	e7c7      	b.n	8005368 <_free_r+0x28>
 80053d8:	b003      	add	sp, #12
 80053da:	bd30      	pop	{r4, r5, pc}
 80053dc:	20000234 	.word	0x20000234

080053e0 <_malloc_r>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	1ccd      	adds	r5, r1, #3
 80053e4:	f025 0503 	bic.w	r5, r5, #3
 80053e8:	3508      	adds	r5, #8
 80053ea:	2d0c      	cmp	r5, #12
 80053ec:	bf38      	it	cc
 80053ee:	250c      	movcc	r5, #12
 80053f0:	2d00      	cmp	r5, #0
 80053f2:	4606      	mov	r6, r0
 80053f4:	db01      	blt.n	80053fa <_malloc_r+0x1a>
 80053f6:	42a9      	cmp	r1, r5
 80053f8:	d903      	bls.n	8005402 <_malloc_r+0x22>
 80053fa:	230c      	movs	r3, #12
 80053fc:	6033      	str	r3, [r6, #0]
 80053fe:	2000      	movs	r0, #0
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005402:	f000 fa0f 	bl	8005824 <__malloc_lock>
 8005406:	4921      	ldr	r1, [pc, #132]	; (800548c <_malloc_r+0xac>)
 8005408:	680a      	ldr	r2, [r1, #0]
 800540a:	4614      	mov	r4, r2
 800540c:	b99c      	cbnz	r4, 8005436 <_malloc_r+0x56>
 800540e:	4f20      	ldr	r7, [pc, #128]	; (8005490 <_malloc_r+0xb0>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	b923      	cbnz	r3, 800541e <_malloc_r+0x3e>
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f000 f998 	bl	800574c <_sbrk_r>
 800541c:	6038      	str	r0, [r7, #0]
 800541e:	4629      	mov	r1, r5
 8005420:	4630      	mov	r0, r6
 8005422:	f000 f993 	bl	800574c <_sbrk_r>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d123      	bne.n	8005472 <_malloc_r+0x92>
 800542a:	230c      	movs	r3, #12
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	4630      	mov	r0, r6
 8005430:	f000 f9fe 	bl	8005830 <__malloc_unlock>
 8005434:	e7e3      	b.n	80053fe <_malloc_r+0x1e>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	1b5b      	subs	r3, r3, r5
 800543a:	d417      	bmi.n	800546c <_malloc_r+0x8c>
 800543c:	2b0b      	cmp	r3, #11
 800543e:	d903      	bls.n	8005448 <_malloc_r+0x68>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	441c      	add	r4, r3
 8005444:	6025      	str	r5, [r4, #0]
 8005446:	e004      	b.n	8005452 <_malloc_r+0x72>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	42a2      	cmp	r2, r4
 800544c:	bf0c      	ite	eq
 800544e:	600b      	streq	r3, [r1, #0]
 8005450:	6053      	strne	r3, [r2, #4]
 8005452:	4630      	mov	r0, r6
 8005454:	f000 f9ec 	bl	8005830 <__malloc_unlock>
 8005458:	f104 000b 	add.w	r0, r4, #11
 800545c:	1d23      	adds	r3, r4, #4
 800545e:	f020 0007 	bic.w	r0, r0, #7
 8005462:	1ac2      	subs	r2, r0, r3
 8005464:	d0cc      	beq.n	8005400 <_malloc_r+0x20>
 8005466:	1a1b      	subs	r3, r3, r0
 8005468:	50a3      	str	r3, [r4, r2]
 800546a:	e7c9      	b.n	8005400 <_malloc_r+0x20>
 800546c:	4622      	mov	r2, r4
 800546e:	6864      	ldr	r4, [r4, #4]
 8005470:	e7cc      	b.n	800540c <_malloc_r+0x2c>
 8005472:	1cc4      	adds	r4, r0, #3
 8005474:	f024 0403 	bic.w	r4, r4, #3
 8005478:	42a0      	cmp	r0, r4
 800547a:	d0e3      	beq.n	8005444 <_malloc_r+0x64>
 800547c:	1a21      	subs	r1, r4, r0
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f964 	bl	800574c <_sbrk_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d1dd      	bne.n	8005444 <_malloc_r+0x64>
 8005488:	e7cf      	b.n	800542a <_malloc_r+0x4a>
 800548a:	bf00      	nop
 800548c:	20000234 	.word	0x20000234
 8005490:	20000238 	.word	0x20000238

08005494 <__ssputs_r>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	688e      	ldr	r6, [r1, #8]
 800549a:	429e      	cmp	r6, r3
 800549c:	4682      	mov	sl, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4690      	mov	r8, r2
 80054a2:	461f      	mov	r7, r3
 80054a4:	d838      	bhi.n	8005518 <__ssputs_r+0x84>
 80054a6:	898a      	ldrh	r2, [r1, #12]
 80054a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054ac:	d032      	beq.n	8005514 <__ssputs_r+0x80>
 80054ae:	6825      	ldr	r5, [r4, #0]
 80054b0:	6909      	ldr	r1, [r1, #16]
 80054b2:	eba5 0901 	sub.w	r9, r5, r1
 80054b6:	6965      	ldr	r5, [r4, #20]
 80054b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c0:	3301      	adds	r3, #1
 80054c2:	444b      	add	r3, r9
 80054c4:	106d      	asrs	r5, r5, #1
 80054c6:	429d      	cmp	r5, r3
 80054c8:	bf38      	it	cc
 80054ca:	461d      	movcc	r5, r3
 80054cc:	0553      	lsls	r3, r2, #21
 80054ce:	d531      	bpl.n	8005534 <__ssputs_r+0xa0>
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7ff ff85 	bl	80053e0 <_malloc_r>
 80054d6:	4606      	mov	r6, r0
 80054d8:	b950      	cbnz	r0, 80054f0 <__ssputs_r+0x5c>
 80054da:	230c      	movs	r3, #12
 80054dc:	f8ca 3000 	str.w	r3, [sl]
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	464a      	mov	r2, r9
 80054f4:	f7ff fb88 	bl	8004c08 <memcpy>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005502:	81a3      	strh	r3, [r4, #12]
 8005504:	6126      	str	r6, [r4, #16]
 8005506:	6165      	str	r5, [r4, #20]
 8005508:	444e      	add	r6, r9
 800550a:	eba5 0509 	sub.w	r5, r5, r9
 800550e:	6026      	str	r6, [r4, #0]
 8005510:	60a5      	str	r5, [r4, #8]
 8005512:	463e      	mov	r6, r7
 8005514:	42be      	cmp	r6, r7
 8005516:	d900      	bls.n	800551a <__ssputs_r+0x86>
 8005518:	463e      	mov	r6, r7
 800551a:	4632      	mov	r2, r6
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	4641      	mov	r1, r8
 8005520:	f000 f966 	bl	80057f0 <memmove>
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	1b9b      	subs	r3, r3, r6
 800552a:	4432      	add	r2, r6
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	6022      	str	r2, [r4, #0]
 8005530:	2000      	movs	r0, #0
 8005532:	e7db      	b.n	80054ec <__ssputs_r+0x58>
 8005534:	462a      	mov	r2, r5
 8005536:	f000 f981 	bl	800583c <_realloc_r>
 800553a:	4606      	mov	r6, r0
 800553c:	2800      	cmp	r0, #0
 800553e:	d1e1      	bne.n	8005504 <__ssputs_r+0x70>
 8005540:	6921      	ldr	r1, [r4, #16]
 8005542:	4650      	mov	r0, sl
 8005544:	f7ff fefc 	bl	8005340 <_free_r>
 8005548:	e7c7      	b.n	80054da <__ssputs_r+0x46>
	...

0800554c <_svfiprintf_r>:
 800554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4698      	mov	r8, r3
 8005552:	898b      	ldrh	r3, [r1, #12]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	b09d      	sub	sp, #116	; 0x74
 8005558:	4607      	mov	r7, r0
 800555a:	460d      	mov	r5, r1
 800555c:	4614      	mov	r4, r2
 800555e:	d50e      	bpl.n	800557e <_svfiprintf_r+0x32>
 8005560:	690b      	ldr	r3, [r1, #16]
 8005562:	b963      	cbnz	r3, 800557e <_svfiprintf_r+0x32>
 8005564:	2140      	movs	r1, #64	; 0x40
 8005566:	f7ff ff3b 	bl	80053e0 <_malloc_r>
 800556a:	6028      	str	r0, [r5, #0]
 800556c:	6128      	str	r0, [r5, #16]
 800556e:	b920      	cbnz	r0, 800557a <_svfiprintf_r+0x2e>
 8005570:	230c      	movs	r3, #12
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	e0d1      	b.n	800571e <_svfiprintf_r+0x1d2>
 800557a:	2340      	movs	r3, #64	; 0x40
 800557c:	616b      	str	r3, [r5, #20]
 800557e:	2300      	movs	r3, #0
 8005580:	9309      	str	r3, [sp, #36]	; 0x24
 8005582:	2320      	movs	r3, #32
 8005584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005588:	f8cd 800c 	str.w	r8, [sp, #12]
 800558c:	2330      	movs	r3, #48	; 0x30
 800558e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005738 <_svfiprintf_r+0x1ec>
 8005592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005596:	f04f 0901 	mov.w	r9, #1
 800559a:	4623      	mov	r3, r4
 800559c:	469a      	mov	sl, r3
 800559e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a2:	b10a      	cbz	r2, 80055a8 <_svfiprintf_r+0x5c>
 80055a4:	2a25      	cmp	r2, #37	; 0x25
 80055a6:	d1f9      	bne.n	800559c <_svfiprintf_r+0x50>
 80055a8:	ebba 0b04 	subs.w	fp, sl, r4
 80055ac:	d00b      	beq.n	80055c6 <_svfiprintf_r+0x7a>
 80055ae:	465b      	mov	r3, fp
 80055b0:	4622      	mov	r2, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ff6d 	bl	8005494 <__ssputs_r>
 80055ba:	3001      	adds	r0, #1
 80055bc:	f000 80aa 	beq.w	8005714 <_svfiprintf_r+0x1c8>
 80055c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c2:	445a      	add	r2, fp
 80055c4:	9209      	str	r2, [sp, #36]	; 0x24
 80055c6:	f89a 3000 	ldrb.w	r3, [sl]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80a2 	beq.w	8005714 <_svfiprintf_r+0x1c8>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055da:	f10a 0a01 	add.w	sl, sl, #1
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e6:	931a      	str	r3, [sp, #104]	; 0x68
 80055e8:	4654      	mov	r4, sl
 80055ea:	2205      	movs	r2, #5
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	4851      	ldr	r0, [pc, #324]	; (8005738 <_svfiprintf_r+0x1ec>)
 80055f2:	f7fa fdf5 	bl	80001e0 <memchr>
 80055f6:	9a04      	ldr	r2, [sp, #16]
 80055f8:	b9d8      	cbnz	r0, 8005632 <_svfiprintf_r+0xe6>
 80055fa:	06d0      	lsls	r0, r2, #27
 80055fc:	bf44      	itt	mi
 80055fe:	2320      	movmi	r3, #32
 8005600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005604:	0711      	lsls	r1, r2, #28
 8005606:	bf44      	itt	mi
 8005608:	232b      	movmi	r3, #43	; 0x2b
 800560a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560e:	f89a 3000 	ldrb.w	r3, [sl]
 8005612:	2b2a      	cmp	r3, #42	; 0x2a
 8005614:	d015      	beq.n	8005642 <_svfiprintf_r+0xf6>
 8005616:	9a07      	ldr	r2, [sp, #28]
 8005618:	4654      	mov	r4, sl
 800561a:	2000      	movs	r0, #0
 800561c:	f04f 0c0a 	mov.w	ip, #10
 8005620:	4621      	mov	r1, r4
 8005622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	2b09      	cmp	r3, #9
 800562a:	d94e      	bls.n	80056ca <_svfiprintf_r+0x17e>
 800562c:	b1b0      	cbz	r0, 800565c <_svfiprintf_r+0x110>
 800562e:	9207      	str	r2, [sp, #28]
 8005630:	e014      	b.n	800565c <_svfiprintf_r+0x110>
 8005632:	eba0 0308 	sub.w	r3, r0, r8
 8005636:	fa09 f303 	lsl.w	r3, r9, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	46a2      	mov	sl, r4
 8005640:	e7d2      	b.n	80055e8 <_svfiprintf_r+0x9c>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9103      	str	r1, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfbb      	ittet	lt
 800564e:	425b      	neglt	r3, r3
 8005650:	f042 0202 	orrlt.w	r2, r2, #2
 8005654:	9307      	strge	r3, [sp, #28]
 8005656:	9307      	strlt	r3, [sp, #28]
 8005658:	bfb8      	it	lt
 800565a:	9204      	strlt	r2, [sp, #16]
 800565c:	7823      	ldrb	r3, [r4, #0]
 800565e:	2b2e      	cmp	r3, #46	; 0x2e
 8005660:	d10c      	bne.n	800567c <_svfiprintf_r+0x130>
 8005662:	7863      	ldrb	r3, [r4, #1]
 8005664:	2b2a      	cmp	r3, #42	; 0x2a
 8005666:	d135      	bne.n	80056d4 <_svfiprintf_r+0x188>
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	9203      	str	r2, [sp, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	bfb8      	it	lt
 8005674:	f04f 33ff 	movlt.w	r3, #4294967295
 8005678:	3402      	adds	r4, #2
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005748 <_svfiprintf_r+0x1fc>
 8005680:	7821      	ldrb	r1, [r4, #0]
 8005682:	2203      	movs	r2, #3
 8005684:	4650      	mov	r0, sl
 8005686:	f7fa fdab 	bl	80001e0 <memchr>
 800568a:	b140      	cbz	r0, 800569e <_svfiprintf_r+0x152>
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	eba0 000a 	sub.w	r0, r0, sl
 8005692:	fa03 f000 	lsl.w	r0, r3, r0
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	4303      	orrs	r3, r0
 800569a:	3401      	adds	r4, #1
 800569c:	9304      	str	r3, [sp, #16]
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4826      	ldr	r0, [pc, #152]	; (800573c <_svfiprintf_r+0x1f0>)
 80056a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056a8:	2206      	movs	r2, #6
 80056aa:	f7fa fd99 	bl	80001e0 <memchr>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d038      	beq.n	8005724 <_svfiprintf_r+0x1d8>
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <_svfiprintf_r+0x1f4>)
 80056b4:	bb1b      	cbnz	r3, 80056fe <_svfiprintf_r+0x1b2>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	3307      	adds	r3, #7
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	3308      	adds	r3, #8
 80056c0:	9303      	str	r3, [sp, #12]
 80056c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c4:	4433      	add	r3, r6
 80056c6:	9309      	str	r3, [sp, #36]	; 0x24
 80056c8:	e767      	b.n	800559a <_svfiprintf_r+0x4e>
 80056ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ce:	460c      	mov	r4, r1
 80056d0:	2001      	movs	r0, #1
 80056d2:	e7a5      	b.n	8005620 <_svfiprintf_r+0xd4>
 80056d4:	2300      	movs	r3, #0
 80056d6:	3401      	adds	r4, #1
 80056d8:	9305      	str	r3, [sp, #20]
 80056da:	4619      	mov	r1, r3
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4620      	mov	r0, r4
 80056e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e6:	3a30      	subs	r2, #48	; 0x30
 80056e8:	2a09      	cmp	r2, #9
 80056ea:	d903      	bls.n	80056f4 <_svfiprintf_r+0x1a8>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0c5      	beq.n	800567c <_svfiprintf_r+0x130>
 80056f0:	9105      	str	r1, [sp, #20]
 80056f2:	e7c3      	b.n	800567c <_svfiprintf_r+0x130>
 80056f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f8:	4604      	mov	r4, r0
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7f0      	b.n	80056e0 <_svfiprintf_r+0x194>
 80056fe:	ab03      	add	r3, sp, #12
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	462a      	mov	r2, r5
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <_svfiprintf_r+0x1f8>)
 8005706:	a904      	add	r1, sp, #16
 8005708:	4638      	mov	r0, r7
 800570a:	f7fe f80d 	bl	8003728 <_printf_float>
 800570e:	1c42      	adds	r2, r0, #1
 8005710:	4606      	mov	r6, r0
 8005712:	d1d6      	bne.n	80056c2 <_svfiprintf_r+0x176>
 8005714:	89ab      	ldrh	r3, [r5, #12]
 8005716:	065b      	lsls	r3, r3, #25
 8005718:	f53f af2c 	bmi.w	8005574 <_svfiprintf_r+0x28>
 800571c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800571e:	b01d      	add	sp, #116	; 0x74
 8005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005724:	ab03      	add	r3, sp, #12
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	462a      	mov	r2, r5
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <_svfiprintf_r+0x1f8>)
 800572c:	a904      	add	r1, sp, #16
 800572e:	4638      	mov	r0, r7
 8005730:	f7fe fa9e 	bl	8003c70 <_printf_i>
 8005734:	e7eb      	b.n	800570e <_svfiprintf_r+0x1c2>
 8005736:	bf00      	nop
 8005738:	0800753c 	.word	0x0800753c
 800573c:	08007546 	.word	0x08007546
 8005740:	08003729 	.word	0x08003729
 8005744:	08005495 	.word	0x08005495
 8005748:	08007542 	.word	0x08007542

0800574c <_sbrk_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d06      	ldr	r5, [pc, #24]	; (8005768 <_sbrk_r+0x1c>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fc fff4 	bl	8002744 <_sbrk>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_sbrk_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_sbrk_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000254 	.word	0x20000254

0800576c <__assert_func>:
 800576c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800576e:	4614      	mov	r4, r2
 8005770:	461a      	mov	r2, r3
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <__assert_func+0x2c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4605      	mov	r5, r0
 8005778:	68d8      	ldr	r0, [r3, #12]
 800577a:	b14c      	cbz	r4, 8005790 <__assert_func+0x24>
 800577c:	4b07      	ldr	r3, [pc, #28]	; (800579c <__assert_func+0x30>)
 800577e:	9100      	str	r1, [sp, #0]
 8005780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005784:	4906      	ldr	r1, [pc, #24]	; (80057a0 <__assert_func+0x34>)
 8005786:	462b      	mov	r3, r5
 8005788:	f000 f80e 	bl	80057a8 <fiprintf>
 800578c:	f000 faa4 	bl	8005cd8 <abort>
 8005790:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <__assert_func+0x38>)
 8005792:	461c      	mov	r4, r3
 8005794:	e7f3      	b.n	800577e <__assert_func+0x12>
 8005796:	bf00      	nop
 8005798:	20000008 	.word	0x20000008
 800579c:	0800754d 	.word	0x0800754d
 80057a0:	0800755a 	.word	0x0800755a
 80057a4:	08007588 	.word	0x08007588

080057a8 <fiprintf>:
 80057a8:	b40e      	push	{r1, r2, r3}
 80057aa:	b503      	push	{r0, r1, lr}
 80057ac:	4601      	mov	r1, r0
 80057ae:	ab03      	add	r3, sp, #12
 80057b0:	4805      	ldr	r0, [pc, #20]	; (80057c8 <fiprintf+0x20>)
 80057b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b6:	6800      	ldr	r0, [r0, #0]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	f000 f88f 	bl	80058dc <_vfiprintf_r>
 80057be:	b002      	add	sp, #8
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	20000008 	.word	0x20000008

080057cc <__ascii_mbtowc>:
 80057cc:	b082      	sub	sp, #8
 80057ce:	b901      	cbnz	r1, 80057d2 <__ascii_mbtowc+0x6>
 80057d0:	a901      	add	r1, sp, #4
 80057d2:	b142      	cbz	r2, 80057e6 <__ascii_mbtowc+0x1a>
 80057d4:	b14b      	cbz	r3, 80057ea <__ascii_mbtowc+0x1e>
 80057d6:	7813      	ldrb	r3, [r2, #0]
 80057d8:	600b      	str	r3, [r1, #0]
 80057da:	7812      	ldrb	r2, [r2, #0]
 80057dc:	1e10      	subs	r0, r2, #0
 80057de:	bf18      	it	ne
 80057e0:	2001      	movne	r0, #1
 80057e2:	b002      	add	sp, #8
 80057e4:	4770      	bx	lr
 80057e6:	4610      	mov	r0, r2
 80057e8:	e7fb      	b.n	80057e2 <__ascii_mbtowc+0x16>
 80057ea:	f06f 0001 	mvn.w	r0, #1
 80057ee:	e7f8      	b.n	80057e2 <__ascii_mbtowc+0x16>

080057f0 <memmove>:
 80057f0:	4288      	cmp	r0, r1
 80057f2:	b510      	push	{r4, lr}
 80057f4:	eb01 0402 	add.w	r4, r1, r2
 80057f8:	d902      	bls.n	8005800 <memmove+0x10>
 80057fa:	4284      	cmp	r4, r0
 80057fc:	4623      	mov	r3, r4
 80057fe:	d807      	bhi.n	8005810 <memmove+0x20>
 8005800:	1e43      	subs	r3, r0, #1
 8005802:	42a1      	cmp	r1, r4
 8005804:	d008      	beq.n	8005818 <memmove+0x28>
 8005806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800580a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800580e:	e7f8      	b.n	8005802 <memmove+0x12>
 8005810:	4402      	add	r2, r0
 8005812:	4601      	mov	r1, r0
 8005814:	428a      	cmp	r2, r1
 8005816:	d100      	bne.n	800581a <memmove+0x2a>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800581e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005822:	e7f7      	b.n	8005814 <memmove+0x24>

08005824 <__malloc_lock>:
 8005824:	4801      	ldr	r0, [pc, #4]	; (800582c <__malloc_lock+0x8>)
 8005826:	f000 bc17 	b.w	8006058 <__retarget_lock_acquire_recursive>
 800582a:	bf00      	nop
 800582c:	2000025c 	.word	0x2000025c

08005830 <__malloc_unlock>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__malloc_unlock+0x8>)
 8005832:	f000 bc12 	b.w	800605a <__retarget_lock_release_recursive>
 8005836:	bf00      	nop
 8005838:	2000025c 	.word	0x2000025c

0800583c <_realloc_r>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	4607      	mov	r7, r0
 8005840:	4614      	mov	r4, r2
 8005842:	460e      	mov	r6, r1
 8005844:	b921      	cbnz	r1, 8005850 <_realloc_r+0x14>
 8005846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800584a:	4611      	mov	r1, r2
 800584c:	f7ff bdc8 	b.w	80053e0 <_malloc_r>
 8005850:	b922      	cbnz	r2, 800585c <_realloc_r+0x20>
 8005852:	f7ff fd75 	bl	8005340 <_free_r>
 8005856:	4625      	mov	r5, r4
 8005858:	4628      	mov	r0, r5
 800585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585c:	f000 fc62 	bl	8006124 <_malloc_usable_size_r>
 8005860:	42a0      	cmp	r0, r4
 8005862:	d20f      	bcs.n	8005884 <_realloc_r+0x48>
 8005864:	4621      	mov	r1, r4
 8005866:	4638      	mov	r0, r7
 8005868:	f7ff fdba 	bl	80053e0 <_malloc_r>
 800586c:	4605      	mov	r5, r0
 800586e:	2800      	cmp	r0, #0
 8005870:	d0f2      	beq.n	8005858 <_realloc_r+0x1c>
 8005872:	4631      	mov	r1, r6
 8005874:	4622      	mov	r2, r4
 8005876:	f7ff f9c7 	bl	8004c08 <memcpy>
 800587a:	4631      	mov	r1, r6
 800587c:	4638      	mov	r0, r7
 800587e:	f7ff fd5f 	bl	8005340 <_free_r>
 8005882:	e7e9      	b.n	8005858 <_realloc_r+0x1c>
 8005884:	4635      	mov	r5, r6
 8005886:	e7e7      	b.n	8005858 <_realloc_r+0x1c>

08005888 <__sfputc_r>:
 8005888:	6893      	ldr	r3, [r2, #8]
 800588a:	3b01      	subs	r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	b410      	push	{r4}
 8005890:	6093      	str	r3, [r2, #8]
 8005892:	da08      	bge.n	80058a6 <__sfputc_r+0x1e>
 8005894:	6994      	ldr	r4, [r2, #24]
 8005896:	42a3      	cmp	r3, r4
 8005898:	db01      	blt.n	800589e <__sfputc_r+0x16>
 800589a:	290a      	cmp	r1, #10
 800589c:	d103      	bne.n	80058a6 <__sfputc_r+0x1e>
 800589e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a2:	f000 b94b 	b.w	8005b3c <__swbuf_r>
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	1c58      	adds	r0, r3, #1
 80058aa:	6010      	str	r0, [r2, #0]
 80058ac:	7019      	strb	r1, [r3, #0]
 80058ae:	4608      	mov	r0, r1
 80058b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <__sfputs_r>:
 80058b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	4614      	mov	r4, r2
 80058be:	18d5      	adds	r5, r2, r3
 80058c0:	42ac      	cmp	r4, r5
 80058c2:	d101      	bne.n	80058c8 <__sfputs_r+0x12>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e007      	b.n	80058d8 <__sfputs_r+0x22>
 80058c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058cc:	463a      	mov	r2, r7
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ffda 	bl	8005888 <__sfputc_r>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d1f3      	bne.n	80058c0 <__sfputs_r+0xa>
 80058d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058dc <_vfiprintf_r>:
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	460d      	mov	r5, r1
 80058e2:	b09d      	sub	sp, #116	; 0x74
 80058e4:	4614      	mov	r4, r2
 80058e6:	4698      	mov	r8, r3
 80058e8:	4606      	mov	r6, r0
 80058ea:	b118      	cbz	r0, 80058f4 <_vfiprintf_r+0x18>
 80058ec:	6983      	ldr	r3, [r0, #24]
 80058ee:	b90b      	cbnz	r3, 80058f4 <_vfiprintf_r+0x18>
 80058f0:	f000 fb14 	bl	8005f1c <__sinit>
 80058f4:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <_vfiprintf_r+0x240>)
 80058f6:	429d      	cmp	r5, r3
 80058f8:	d11b      	bne.n	8005932 <_vfiprintf_r+0x56>
 80058fa:	6875      	ldr	r5, [r6, #4]
 80058fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058fe:	07d9      	lsls	r1, r3, #31
 8005900:	d405      	bmi.n	800590e <_vfiprintf_r+0x32>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	059a      	lsls	r2, r3, #22
 8005906:	d402      	bmi.n	800590e <_vfiprintf_r+0x32>
 8005908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800590a:	f000 fba5 	bl	8006058 <__retarget_lock_acquire_recursive>
 800590e:	89ab      	ldrh	r3, [r5, #12]
 8005910:	071b      	lsls	r3, r3, #28
 8005912:	d501      	bpl.n	8005918 <_vfiprintf_r+0x3c>
 8005914:	692b      	ldr	r3, [r5, #16]
 8005916:	b9eb      	cbnz	r3, 8005954 <_vfiprintf_r+0x78>
 8005918:	4629      	mov	r1, r5
 800591a:	4630      	mov	r0, r6
 800591c:	f000 f96e 	bl	8005bfc <__swsetup_r>
 8005920:	b1c0      	cbz	r0, 8005954 <_vfiprintf_r+0x78>
 8005922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005924:	07dc      	lsls	r4, r3, #31
 8005926:	d50e      	bpl.n	8005946 <_vfiprintf_r+0x6a>
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	b01d      	add	sp, #116	; 0x74
 800592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005932:	4b7b      	ldr	r3, [pc, #492]	; (8005b20 <_vfiprintf_r+0x244>)
 8005934:	429d      	cmp	r5, r3
 8005936:	d101      	bne.n	800593c <_vfiprintf_r+0x60>
 8005938:	68b5      	ldr	r5, [r6, #8]
 800593a:	e7df      	b.n	80058fc <_vfiprintf_r+0x20>
 800593c:	4b79      	ldr	r3, [pc, #484]	; (8005b24 <_vfiprintf_r+0x248>)
 800593e:	429d      	cmp	r5, r3
 8005940:	bf08      	it	eq
 8005942:	68f5      	ldreq	r5, [r6, #12]
 8005944:	e7da      	b.n	80058fc <_vfiprintf_r+0x20>
 8005946:	89ab      	ldrh	r3, [r5, #12]
 8005948:	0598      	lsls	r0, r3, #22
 800594a:	d4ed      	bmi.n	8005928 <_vfiprintf_r+0x4c>
 800594c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800594e:	f000 fb84 	bl	800605a <__retarget_lock_release_recursive>
 8005952:	e7e9      	b.n	8005928 <_vfiprintf_r+0x4c>
 8005954:	2300      	movs	r3, #0
 8005956:	9309      	str	r3, [sp, #36]	; 0x24
 8005958:	2320      	movs	r3, #32
 800595a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800595e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005962:	2330      	movs	r3, #48	; 0x30
 8005964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b28 <_vfiprintf_r+0x24c>
 8005968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800596c:	f04f 0901 	mov.w	r9, #1
 8005970:	4623      	mov	r3, r4
 8005972:	469a      	mov	sl, r3
 8005974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005978:	b10a      	cbz	r2, 800597e <_vfiprintf_r+0xa2>
 800597a:	2a25      	cmp	r2, #37	; 0x25
 800597c:	d1f9      	bne.n	8005972 <_vfiprintf_r+0x96>
 800597e:	ebba 0b04 	subs.w	fp, sl, r4
 8005982:	d00b      	beq.n	800599c <_vfiprintf_r+0xc0>
 8005984:	465b      	mov	r3, fp
 8005986:	4622      	mov	r2, r4
 8005988:	4629      	mov	r1, r5
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff ff93 	bl	80058b6 <__sfputs_r>
 8005990:	3001      	adds	r0, #1
 8005992:	f000 80aa 	beq.w	8005aea <_vfiprintf_r+0x20e>
 8005996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005998:	445a      	add	r2, fp
 800599a:	9209      	str	r2, [sp, #36]	; 0x24
 800599c:	f89a 3000 	ldrb.w	r3, [sl]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a2 	beq.w	8005aea <_vfiprintf_r+0x20e>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b0:	f10a 0a01 	add.w	sl, sl, #1
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	9307      	str	r3, [sp, #28]
 80059b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059bc:	931a      	str	r3, [sp, #104]	; 0x68
 80059be:	4654      	mov	r4, sl
 80059c0:	2205      	movs	r2, #5
 80059c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c6:	4858      	ldr	r0, [pc, #352]	; (8005b28 <_vfiprintf_r+0x24c>)
 80059c8:	f7fa fc0a 	bl	80001e0 <memchr>
 80059cc:	9a04      	ldr	r2, [sp, #16]
 80059ce:	b9d8      	cbnz	r0, 8005a08 <_vfiprintf_r+0x12c>
 80059d0:	06d1      	lsls	r1, r2, #27
 80059d2:	bf44      	itt	mi
 80059d4:	2320      	movmi	r3, #32
 80059d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059da:	0713      	lsls	r3, r2, #28
 80059dc:	bf44      	itt	mi
 80059de:	232b      	movmi	r3, #43	; 0x2b
 80059e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e4:	f89a 3000 	ldrb.w	r3, [sl]
 80059e8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ea:	d015      	beq.n	8005a18 <_vfiprintf_r+0x13c>
 80059ec:	9a07      	ldr	r2, [sp, #28]
 80059ee:	4654      	mov	r4, sl
 80059f0:	2000      	movs	r0, #0
 80059f2:	f04f 0c0a 	mov.w	ip, #10
 80059f6:	4621      	mov	r1, r4
 80059f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059fc:	3b30      	subs	r3, #48	; 0x30
 80059fe:	2b09      	cmp	r3, #9
 8005a00:	d94e      	bls.n	8005aa0 <_vfiprintf_r+0x1c4>
 8005a02:	b1b0      	cbz	r0, 8005a32 <_vfiprintf_r+0x156>
 8005a04:	9207      	str	r2, [sp, #28]
 8005a06:	e014      	b.n	8005a32 <_vfiprintf_r+0x156>
 8005a08:	eba0 0308 	sub.w	r3, r0, r8
 8005a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a10:	4313      	orrs	r3, r2
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	46a2      	mov	sl, r4
 8005a16:	e7d2      	b.n	80059be <_vfiprintf_r+0xe2>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	1d19      	adds	r1, r3, #4
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	9103      	str	r1, [sp, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfbb      	ittet	lt
 8005a24:	425b      	neglt	r3, r3
 8005a26:	f042 0202 	orrlt.w	r2, r2, #2
 8005a2a:	9307      	strge	r3, [sp, #28]
 8005a2c:	9307      	strlt	r3, [sp, #28]
 8005a2e:	bfb8      	it	lt
 8005a30:	9204      	strlt	r2, [sp, #16]
 8005a32:	7823      	ldrb	r3, [r4, #0]
 8005a34:	2b2e      	cmp	r3, #46	; 0x2e
 8005a36:	d10c      	bne.n	8005a52 <_vfiprintf_r+0x176>
 8005a38:	7863      	ldrb	r3, [r4, #1]
 8005a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3c:	d135      	bne.n	8005aaa <_vfiprintf_r+0x1ce>
 8005a3e:	9b03      	ldr	r3, [sp, #12]
 8005a40:	1d1a      	adds	r2, r3, #4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	9203      	str	r2, [sp, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bfb8      	it	lt
 8005a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a4e:	3402      	adds	r4, #2
 8005a50:	9305      	str	r3, [sp, #20]
 8005a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b38 <_vfiprintf_r+0x25c>
 8005a56:	7821      	ldrb	r1, [r4, #0]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	f7fa fbc0 	bl	80001e0 <memchr>
 8005a60:	b140      	cbz	r0, 8005a74 <_vfiprintf_r+0x198>
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	eba0 000a 	sub.w	r0, r0, sl
 8005a68:	fa03 f000 	lsl.w	r0, r3, r0
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	4303      	orrs	r3, r0
 8005a70:	3401      	adds	r4, #1
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a78:	482c      	ldr	r0, [pc, #176]	; (8005b2c <_vfiprintf_r+0x250>)
 8005a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a7e:	2206      	movs	r2, #6
 8005a80:	f7fa fbae 	bl	80001e0 <memchr>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d03f      	beq.n	8005b08 <_vfiprintf_r+0x22c>
 8005a88:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <_vfiprintf_r+0x254>)
 8005a8a:	bb1b      	cbnz	r3, 8005ad4 <_vfiprintf_r+0x1f8>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	3307      	adds	r3, #7
 8005a90:	f023 0307 	bic.w	r3, r3, #7
 8005a94:	3308      	adds	r3, #8
 8005a96:	9303      	str	r3, [sp, #12]
 8005a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9a:	443b      	add	r3, r7
 8005a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9e:	e767      	b.n	8005970 <_vfiprintf_r+0x94>
 8005aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	e7a5      	b.n	80059f6 <_vfiprintf_r+0x11a>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	3401      	adds	r4, #1
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005abc:	3a30      	subs	r2, #48	; 0x30
 8005abe:	2a09      	cmp	r2, #9
 8005ac0:	d903      	bls.n	8005aca <_vfiprintf_r+0x1ee>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0c5      	beq.n	8005a52 <_vfiprintf_r+0x176>
 8005ac6:	9105      	str	r1, [sp, #20]
 8005ac8:	e7c3      	b.n	8005a52 <_vfiprintf_r+0x176>
 8005aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ace:	4604      	mov	r4, r0
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e7f0      	b.n	8005ab6 <_vfiprintf_r+0x1da>
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <_vfiprintf_r+0x258>)
 8005adc:	a904      	add	r1, sp, #16
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7fd fe22 	bl	8003728 <_printf_float>
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	1c78      	adds	r0, r7, #1
 8005ae8:	d1d6      	bne.n	8005a98 <_vfiprintf_r+0x1bc>
 8005aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aec:	07d9      	lsls	r1, r3, #31
 8005aee:	d405      	bmi.n	8005afc <_vfiprintf_r+0x220>
 8005af0:	89ab      	ldrh	r3, [r5, #12]
 8005af2:	059a      	lsls	r2, r3, #22
 8005af4:	d402      	bmi.n	8005afc <_vfiprintf_r+0x220>
 8005af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005af8:	f000 faaf 	bl	800605a <__retarget_lock_release_recursive>
 8005afc:	89ab      	ldrh	r3, [r5, #12]
 8005afe:	065b      	lsls	r3, r3, #25
 8005b00:	f53f af12 	bmi.w	8005928 <_vfiprintf_r+0x4c>
 8005b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b06:	e711      	b.n	800592c <_vfiprintf_r+0x50>
 8005b08:	ab03      	add	r3, sp, #12
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <_vfiprintf_r+0x258>)
 8005b10:	a904      	add	r1, sp, #16
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7fe f8ac 	bl	8003c70 <_printf_i>
 8005b18:	e7e4      	b.n	8005ae4 <_vfiprintf_r+0x208>
 8005b1a:	bf00      	nop
 8005b1c:	080076b4 	.word	0x080076b4
 8005b20:	080076d4 	.word	0x080076d4
 8005b24:	08007694 	.word	0x08007694
 8005b28:	0800753c 	.word	0x0800753c
 8005b2c:	08007546 	.word	0x08007546
 8005b30:	08003729 	.word	0x08003729
 8005b34:	080058b7 	.word	0x080058b7
 8005b38:	08007542 	.word	0x08007542

08005b3c <__swbuf_r>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	460e      	mov	r6, r1
 8005b40:	4614      	mov	r4, r2
 8005b42:	4605      	mov	r5, r0
 8005b44:	b118      	cbz	r0, 8005b4e <__swbuf_r+0x12>
 8005b46:	6983      	ldr	r3, [r0, #24]
 8005b48:	b90b      	cbnz	r3, 8005b4e <__swbuf_r+0x12>
 8005b4a:	f000 f9e7 	bl	8005f1c <__sinit>
 8005b4e:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <__swbuf_r+0x98>)
 8005b50:	429c      	cmp	r4, r3
 8005b52:	d12b      	bne.n	8005bac <__swbuf_r+0x70>
 8005b54:	686c      	ldr	r4, [r5, #4]
 8005b56:	69a3      	ldr	r3, [r4, #24]
 8005b58:	60a3      	str	r3, [r4, #8]
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	071a      	lsls	r2, r3, #28
 8005b5e:	d52f      	bpl.n	8005bc0 <__swbuf_r+0x84>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	b36b      	cbz	r3, 8005bc0 <__swbuf_r+0x84>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	1ac0      	subs	r0, r0, r3
 8005b6a:	6963      	ldr	r3, [r4, #20]
 8005b6c:	b2f6      	uxtb	r6, r6
 8005b6e:	4283      	cmp	r3, r0
 8005b70:	4637      	mov	r7, r6
 8005b72:	dc04      	bgt.n	8005b7e <__swbuf_r+0x42>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 f93c 	bl	8005df4 <_fflush_r>
 8005b7c:	bb30      	cbnz	r0, 8005bcc <__swbuf_r+0x90>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60a3      	str	r3, [r4, #8]
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	701e      	strb	r6, [r3, #0]
 8005b8c:	6963      	ldr	r3, [r4, #20]
 8005b8e:	3001      	adds	r0, #1
 8005b90:	4283      	cmp	r3, r0
 8005b92:	d004      	beq.n	8005b9e <__swbuf_r+0x62>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	07db      	lsls	r3, r3, #31
 8005b98:	d506      	bpl.n	8005ba8 <__swbuf_r+0x6c>
 8005b9a:	2e0a      	cmp	r6, #10
 8005b9c:	d104      	bne.n	8005ba8 <__swbuf_r+0x6c>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f927 	bl	8005df4 <_fflush_r>
 8005ba6:	b988      	cbnz	r0, 8005bcc <__swbuf_r+0x90>
 8005ba8:	4638      	mov	r0, r7
 8005baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <__swbuf_r+0x9c>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d101      	bne.n	8005bb6 <__swbuf_r+0x7a>
 8005bb2:	68ac      	ldr	r4, [r5, #8]
 8005bb4:	e7cf      	b.n	8005b56 <__swbuf_r+0x1a>
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <__swbuf_r+0xa0>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	bf08      	it	eq
 8005bbc:	68ec      	ldreq	r4, [r5, #12]
 8005bbe:	e7ca      	b.n	8005b56 <__swbuf_r+0x1a>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 f81a 	bl	8005bfc <__swsetup_r>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d0cb      	beq.n	8005b64 <__swbuf_r+0x28>
 8005bcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd0:	e7ea      	b.n	8005ba8 <__swbuf_r+0x6c>
 8005bd2:	bf00      	nop
 8005bd4:	080076b4 	.word	0x080076b4
 8005bd8:	080076d4 	.word	0x080076d4
 8005bdc:	08007694 	.word	0x08007694

08005be0 <__ascii_wctomb>:
 8005be0:	b149      	cbz	r1, 8005bf6 <__ascii_wctomb+0x16>
 8005be2:	2aff      	cmp	r2, #255	; 0xff
 8005be4:	bf85      	ittet	hi
 8005be6:	238a      	movhi	r3, #138	; 0x8a
 8005be8:	6003      	strhi	r3, [r0, #0]
 8005bea:	700a      	strbls	r2, [r1, #0]
 8005bec:	f04f 30ff 	movhi.w	r0, #4294967295
 8005bf0:	bf98      	it	ls
 8005bf2:	2001      	movls	r0, #1
 8005bf4:	4770      	bx	lr
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4770      	bx	lr
	...

08005bfc <__swsetup_r>:
 8005bfc:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <__swsetup_r+0xcc>)
 8005bfe:	b570      	push	{r4, r5, r6, lr}
 8005c00:	681d      	ldr	r5, [r3, #0]
 8005c02:	4606      	mov	r6, r0
 8005c04:	460c      	mov	r4, r1
 8005c06:	b125      	cbz	r5, 8005c12 <__swsetup_r+0x16>
 8005c08:	69ab      	ldr	r3, [r5, #24]
 8005c0a:	b913      	cbnz	r3, 8005c12 <__swsetup_r+0x16>
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f985 	bl	8005f1c <__sinit>
 8005c12:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <__swsetup_r+0xd0>)
 8005c14:	429c      	cmp	r4, r3
 8005c16:	d10f      	bne.n	8005c38 <__swsetup_r+0x3c>
 8005c18:	686c      	ldr	r4, [r5, #4]
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c20:	0719      	lsls	r1, r3, #28
 8005c22:	d42c      	bmi.n	8005c7e <__swsetup_r+0x82>
 8005c24:	06dd      	lsls	r5, r3, #27
 8005c26:	d411      	bmi.n	8005c4c <__swsetup_r+0x50>
 8005c28:	2309      	movs	r3, #9
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	e03e      	b.n	8005cb6 <__swsetup_r+0xba>
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <__swsetup_r+0xd4>)
 8005c3a:	429c      	cmp	r4, r3
 8005c3c:	d101      	bne.n	8005c42 <__swsetup_r+0x46>
 8005c3e:	68ac      	ldr	r4, [r5, #8]
 8005c40:	e7eb      	b.n	8005c1a <__swsetup_r+0x1e>
 8005c42:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <__swsetup_r+0xd8>)
 8005c44:	429c      	cmp	r4, r3
 8005c46:	bf08      	it	eq
 8005c48:	68ec      	ldreq	r4, [r5, #12]
 8005c4a:	e7e6      	b.n	8005c1a <__swsetup_r+0x1e>
 8005c4c:	0758      	lsls	r0, r3, #29
 8005c4e:	d512      	bpl.n	8005c76 <__swsetup_r+0x7a>
 8005c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c52:	b141      	cbz	r1, 8005c66 <__swsetup_r+0x6a>
 8005c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	d002      	beq.n	8005c62 <__swsetup_r+0x66>
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff fb6f 	bl	8005340 <_free_r>
 8005c62:	2300      	movs	r3, #0
 8005c64:	6363      	str	r3, [r4, #52]	; 0x34
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6063      	str	r3, [r4, #4]
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f043 0308 	orr.w	r3, r3, #8
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	b94b      	cbnz	r3, 8005c96 <__swsetup_r+0x9a>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8c:	d003      	beq.n	8005c96 <__swsetup_r+0x9a>
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 fa07 	bl	80060a4 <__smakebuf_r>
 8005c96:	89a0      	ldrh	r0, [r4, #12]
 8005c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c9c:	f010 0301 	ands.w	r3, r0, #1
 8005ca0:	d00a      	beq.n	8005cb8 <__swsetup_r+0xbc>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6963      	ldr	r3, [r4, #20]
 8005ca8:	425b      	negs	r3, r3
 8005caa:	61a3      	str	r3, [r4, #24]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b943      	cbnz	r3, 8005cc2 <__swsetup_r+0xc6>
 8005cb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cb4:	d1ba      	bne.n	8005c2c <__swsetup_r+0x30>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	0781      	lsls	r1, r0, #30
 8005cba:	bf58      	it	pl
 8005cbc:	6963      	ldrpl	r3, [r4, #20]
 8005cbe:	60a3      	str	r3, [r4, #8]
 8005cc0:	e7f4      	b.n	8005cac <__swsetup_r+0xb0>
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	e7f7      	b.n	8005cb6 <__swsetup_r+0xba>
 8005cc6:	bf00      	nop
 8005cc8:	20000008 	.word	0x20000008
 8005ccc:	080076b4 	.word	0x080076b4
 8005cd0:	080076d4 	.word	0x080076d4
 8005cd4:	08007694 	.word	0x08007694

08005cd8 <abort>:
 8005cd8:	b508      	push	{r3, lr}
 8005cda:	2006      	movs	r0, #6
 8005cdc:	f000 fa52 	bl	8006184 <raise>
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f7fc fcb8 	bl	8002656 <_exit>
	...

08005ce8 <__sflush_r>:
 8005ce8:	898a      	ldrh	r2, [r1, #12]
 8005cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	0710      	lsls	r0, r2, #28
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	d458      	bmi.n	8005da8 <__sflush_r+0xc0>
 8005cf6:	684b      	ldr	r3, [r1, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dc05      	bgt.n	8005d08 <__sflush_r+0x20>
 8005cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dc02      	bgt.n	8005d08 <__sflush_r+0x20>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	d0f9      	beq.n	8005d02 <__sflush_r+0x1a>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d14:	682f      	ldr	r7, [r5, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	d032      	beq.n	8005d80 <__sflush_r+0x98>
 8005d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	075a      	lsls	r2, r3, #29
 8005d20:	d505      	bpl.n	8005d2e <__sflush_r+0x46>
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	1ac0      	subs	r0, r0, r3
 8005d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d28:	b10b      	cbz	r3, 8005d2e <__sflush_r+0x46>
 8005d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d2c:	1ac0      	subs	r0, r0, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4602      	mov	r2, r0
 8005d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d34:	6a21      	ldr	r1, [r4, #32]
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b0      	blx	r6
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	d106      	bne.n	8005d4e <__sflush_r+0x66>
 8005d40:	6829      	ldr	r1, [r5, #0]
 8005d42:	291d      	cmp	r1, #29
 8005d44:	d82c      	bhi.n	8005da0 <__sflush_r+0xb8>
 8005d46:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <__sflush_r+0x108>)
 8005d48:	40ca      	lsrs	r2, r1
 8005d4a:	07d6      	lsls	r6, r2, #31
 8005d4c:	d528      	bpl.n	8005da0 <__sflush_r+0xb8>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	6062      	str	r2, [r4, #4]
 8005d52:	04d9      	lsls	r1, r3, #19
 8005d54:	6922      	ldr	r2, [r4, #16]
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	d504      	bpl.n	8005d64 <__sflush_r+0x7c>
 8005d5a:	1c42      	adds	r2, r0, #1
 8005d5c:	d101      	bne.n	8005d62 <__sflush_r+0x7a>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	b903      	cbnz	r3, 8005d64 <__sflush_r+0x7c>
 8005d62:	6560      	str	r0, [r4, #84]	; 0x54
 8005d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d66:	602f      	str	r7, [r5, #0]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d0ca      	beq.n	8005d02 <__sflush_r+0x1a>
 8005d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d002      	beq.n	8005d7a <__sflush_r+0x92>
 8005d74:	4628      	mov	r0, r5
 8005d76:	f7ff fae3 	bl	8005340 <_free_r>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d7e:	e7c1      	b.n	8005d04 <__sflush_r+0x1c>
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	2301      	movs	r3, #1
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b0      	blx	r6
 8005d88:	1c41      	adds	r1, r0, #1
 8005d8a:	d1c7      	bne.n	8005d1c <__sflush_r+0x34>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0c4      	beq.n	8005d1c <__sflush_r+0x34>
 8005d92:	2b1d      	cmp	r3, #29
 8005d94:	d001      	beq.n	8005d9a <__sflush_r+0xb2>
 8005d96:	2b16      	cmp	r3, #22
 8005d98:	d101      	bne.n	8005d9e <__sflush_r+0xb6>
 8005d9a:	602f      	str	r7, [r5, #0]
 8005d9c:	e7b1      	b.n	8005d02 <__sflush_r+0x1a>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	e7ad      	b.n	8005d04 <__sflush_r+0x1c>
 8005da8:	690f      	ldr	r7, [r1, #16]
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d0a9      	beq.n	8005d02 <__sflush_r+0x1a>
 8005dae:	0793      	lsls	r3, r2, #30
 8005db0:	680e      	ldr	r6, [r1, #0]
 8005db2:	bf08      	it	eq
 8005db4:	694b      	ldreq	r3, [r1, #20]
 8005db6:	600f      	str	r7, [r1, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2300      	movne	r3, #0
 8005dbc:	eba6 0807 	sub.w	r8, r6, r7
 8005dc0:	608b      	str	r3, [r1, #8]
 8005dc2:	f1b8 0f00 	cmp.w	r8, #0
 8005dc6:	dd9c      	ble.n	8005d02 <__sflush_r+0x1a>
 8005dc8:	6a21      	ldr	r1, [r4, #32]
 8005dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dcc:	4643      	mov	r3, r8
 8005dce:	463a      	mov	r2, r7
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	dc06      	bgt.n	8005de6 <__sflush_r+0xfe>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	e78e      	b.n	8005d04 <__sflush_r+0x1c>
 8005de6:	4407      	add	r7, r0
 8005de8:	eba8 0800 	sub.w	r8, r8, r0
 8005dec:	e7e9      	b.n	8005dc2 <__sflush_r+0xda>
 8005dee:	bf00      	nop
 8005df0:	20400001 	.word	0x20400001

08005df4 <_fflush_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	4605      	mov	r5, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	b913      	cbnz	r3, 8005e04 <_fflush_r+0x10>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	4628      	mov	r0, r5
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	b118      	cbz	r0, 8005e0e <_fflush_r+0x1a>
 8005e06:	6983      	ldr	r3, [r0, #24]
 8005e08:	b90b      	cbnz	r3, 8005e0e <_fflush_r+0x1a>
 8005e0a:	f000 f887 	bl	8005f1c <__sinit>
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <_fflush_r+0x6c>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	d11b      	bne.n	8005e4c <_fflush_r+0x58>
 8005e14:	686c      	ldr	r4, [r5, #4]
 8005e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0ef      	beq.n	8005dfe <_fflush_r+0xa>
 8005e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e20:	07d0      	lsls	r0, r2, #31
 8005e22:	d404      	bmi.n	8005e2e <_fflush_r+0x3a>
 8005e24:	0599      	lsls	r1, r3, #22
 8005e26:	d402      	bmi.n	8005e2e <_fflush_r+0x3a>
 8005e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2a:	f000 f915 	bl	8006058 <__retarget_lock_acquire_recursive>
 8005e2e:	4628      	mov	r0, r5
 8005e30:	4621      	mov	r1, r4
 8005e32:	f7ff ff59 	bl	8005ce8 <__sflush_r>
 8005e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e38:	07da      	lsls	r2, r3, #31
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	d4e0      	bmi.n	8005e00 <_fflush_r+0xc>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	059b      	lsls	r3, r3, #22
 8005e42:	d4dd      	bmi.n	8005e00 <_fflush_r+0xc>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f000 f908 	bl	800605a <__retarget_lock_release_recursive>
 8005e4a:	e7d9      	b.n	8005e00 <_fflush_r+0xc>
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <_fflush_r+0x70>)
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	d101      	bne.n	8005e56 <_fflush_r+0x62>
 8005e52:	68ac      	ldr	r4, [r5, #8]
 8005e54:	e7df      	b.n	8005e16 <_fflush_r+0x22>
 8005e56:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <_fflush_r+0x74>)
 8005e58:	429c      	cmp	r4, r3
 8005e5a:	bf08      	it	eq
 8005e5c:	68ec      	ldreq	r4, [r5, #12]
 8005e5e:	e7da      	b.n	8005e16 <_fflush_r+0x22>
 8005e60:	080076b4 	.word	0x080076b4
 8005e64:	080076d4 	.word	0x080076d4
 8005e68:	08007694 	.word	0x08007694

08005e6c <std>:
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	e9c0 3300 	strd	r3, r3, [r0]
 8005e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7a:	6083      	str	r3, [r0, #8]
 8005e7c:	8181      	strh	r1, [r0, #12]
 8005e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e80:	81c2      	strh	r2, [r0, #14]
 8005e82:	6183      	str	r3, [r0, #24]
 8005e84:	4619      	mov	r1, r3
 8005e86:	2208      	movs	r2, #8
 8005e88:	305c      	adds	r0, #92	; 0x5c
 8005e8a:	f7fd fba5 	bl	80035d8 <memset>
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x38>)
 8005e90:	6263      	str	r3, [r4, #36]	; 0x24
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <std+0x3c>)
 8005e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <std+0x40>)
 8005e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <std+0x44>)
 8005e9c:	6224      	str	r4, [r4, #32]
 8005e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005ea0:	bd10      	pop	{r4, pc}
 8005ea2:	bf00      	nop
 8005ea4:	080061bd 	.word	0x080061bd
 8005ea8:	080061df 	.word	0x080061df
 8005eac:	08006217 	.word	0x08006217
 8005eb0:	0800623b 	.word	0x0800623b

08005eb4 <_cleanup_r>:
 8005eb4:	4901      	ldr	r1, [pc, #4]	; (8005ebc <_cleanup_r+0x8>)
 8005eb6:	f000 b8af 	b.w	8006018 <_fwalk_reent>
 8005eba:	bf00      	nop
 8005ebc:	08005df5 	.word	0x08005df5

08005ec0 <__sfmoreglue>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	1e4a      	subs	r2, r1, #1
 8005ec4:	2568      	movs	r5, #104	; 0x68
 8005ec6:	4355      	muls	r5, r2
 8005ec8:	460e      	mov	r6, r1
 8005eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ece:	f7ff fa87 	bl	80053e0 <_malloc_r>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	b140      	cbz	r0, 8005ee8 <__sfmoreglue+0x28>
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8005edc:	300c      	adds	r0, #12
 8005ede:	60a0      	str	r0, [r4, #8]
 8005ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ee4:	f7fd fb78 	bl	80035d8 <memset>
 8005ee8:	4620      	mov	r0, r4
 8005eea:	bd70      	pop	{r4, r5, r6, pc}

08005eec <__sfp_lock_acquire>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__sfp_lock_acquire+0x8>)
 8005eee:	f000 b8b3 	b.w	8006058 <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	20000260 	.word	0x20000260

08005ef8 <__sfp_lock_release>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__sfp_lock_release+0x8>)
 8005efa:	f000 b8ae 	b.w	800605a <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	20000260 	.word	0x20000260

08005f04 <__sinit_lock_acquire>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__sinit_lock_acquire+0x8>)
 8005f06:	f000 b8a7 	b.w	8006058 <__retarget_lock_acquire_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	2000025b 	.word	0x2000025b

08005f10 <__sinit_lock_release>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__sinit_lock_release+0x8>)
 8005f12:	f000 b8a2 	b.w	800605a <__retarget_lock_release_recursive>
 8005f16:	bf00      	nop
 8005f18:	2000025b 	.word	0x2000025b

08005f1c <__sinit>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f7ff fff0 	bl	8005f04 <__sinit_lock_acquire>
 8005f24:	69a3      	ldr	r3, [r4, #24]
 8005f26:	b11b      	cbz	r3, 8005f30 <__sinit+0x14>
 8005f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2c:	f7ff bff0 	b.w	8005f10 <__sinit_lock_release>
 8005f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f34:	6523      	str	r3, [r4, #80]	; 0x50
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <__sinit+0x68>)
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <__sinit+0x6c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	bf04      	itt	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	61a3      	streq	r3, [r4, #24]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f820 	bl	8005f8c <__sfp>
 8005f4c:	6060      	str	r0, [r4, #4]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 f81c 	bl	8005f8c <__sfp>
 8005f54:	60a0      	str	r0, [r4, #8]
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f818 	bl	8005f8c <__sfp>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60e0      	str	r0, [r4, #12]
 8005f60:	2104      	movs	r1, #4
 8005f62:	6860      	ldr	r0, [r4, #4]
 8005f64:	f7ff ff82 	bl	8005e6c <std>
 8005f68:	68a0      	ldr	r0, [r4, #8]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	2109      	movs	r1, #9
 8005f6e:	f7ff ff7d 	bl	8005e6c <std>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	2202      	movs	r2, #2
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff ff78 	bl	8005e6c <std>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	61a3      	str	r3, [r4, #24]
 8005f80:	e7d2      	b.n	8005f28 <__sinit+0xc>
 8005f82:	bf00      	nop
 8005f84:	08007314 	.word	0x08007314
 8005f88:	08005eb5 	.word	0x08005eb5

08005f8c <__sfp>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	4607      	mov	r7, r0
 8005f90:	f7ff ffac 	bl	8005eec <__sfp_lock_acquire>
 8005f94:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <__sfp+0x84>)
 8005f96:	681e      	ldr	r6, [r3, #0]
 8005f98:	69b3      	ldr	r3, [r6, #24]
 8005f9a:	b913      	cbnz	r3, 8005fa2 <__sfp+0x16>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff ffbd 	bl	8005f1c <__sinit>
 8005fa2:	3648      	adds	r6, #72	; 0x48
 8005fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	d503      	bpl.n	8005fb4 <__sfp+0x28>
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	b30b      	cbz	r3, 8005ff4 <__sfp+0x68>
 8005fb0:	6836      	ldr	r6, [r6, #0]
 8005fb2:	e7f7      	b.n	8005fa4 <__sfp+0x18>
 8005fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fb8:	b9d5      	cbnz	r5, 8005ff0 <__sfp+0x64>
 8005fba:	4b16      	ldr	r3, [pc, #88]	; (8006014 <__sfp+0x88>)
 8005fbc:	60e3      	str	r3, [r4, #12]
 8005fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8005fc4:	f000 f847 	bl	8006056 <__retarget_lock_init_recursive>
 8005fc8:	f7ff ff96 	bl	8005ef8 <__sfp_lock_release>
 8005fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	61a5      	str	r5, [r4, #24]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fe0:	f7fd fafa 	bl	80035d8 <memset>
 8005fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fec:	4620      	mov	r0, r4
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff0:	3468      	adds	r4, #104	; 0x68
 8005ff2:	e7d9      	b.n	8005fa8 <__sfp+0x1c>
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f7ff ff62 	bl	8005ec0 <__sfmoreglue>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	6030      	str	r0, [r6, #0]
 8006000:	2800      	cmp	r0, #0
 8006002:	d1d5      	bne.n	8005fb0 <__sfp+0x24>
 8006004:	f7ff ff78 	bl	8005ef8 <__sfp_lock_release>
 8006008:	230c      	movs	r3, #12
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	e7ee      	b.n	8005fec <__sfp+0x60>
 800600e:	bf00      	nop
 8006010:	08007314 	.word	0x08007314
 8006014:	ffff0001 	.word	0xffff0001

08006018 <_fwalk_reent>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	4606      	mov	r6, r0
 800601e:	4688      	mov	r8, r1
 8006020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006024:	2700      	movs	r7, #0
 8006026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800602a:	f1b9 0901 	subs.w	r9, r9, #1
 800602e:	d505      	bpl.n	800603c <_fwalk_reent+0x24>
 8006030:	6824      	ldr	r4, [r4, #0]
 8006032:	2c00      	cmp	r4, #0
 8006034:	d1f7      	bne.n	8006026 <_fwalk_reent+0xe>
 8006036:	4638      	mov	r0, r7
 8006038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603c:	89ab      	ldrh	r3, [r5, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d907      	bls.n	8006052 <_fwalk_reent+0x3a>
 8006042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006046:	3301      	adds	r3, #1
 8006048:	d003      	beq.n	8006052 <_fwalk_reent+0x3a>
 800604a:	4629      	mov	r1, r5
 800604c:	4630      	mov	r0, r6
 800604e:	47c0      	blx	r8
 8006050:	4307      	orrs	r7, r0
 8006052:	3568      	adds	r5, #104	; 0x68
 8006054:	e7e9      	b.n	800602a <_fwalk_reent+0x12>

08006056 <__retarget_lock_init_recursive>:
 8006056:	4770      	bx	lr

08006058 <__retarget_lock_acquire_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_release_recursive>:
 800605a:	4770      	bx	lr

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	460e      	mov	r6, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2900      	cmp	r1, #0
 8006066:	b096      	sub	sp, #88	; 0x58
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	da07      	bge.n	800607e <__swhatbuf_r+0x22>
 800606e:	2300      	movs	r3, #0
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	89b3      	ldrh	r3, [r6, #12]
 8006074:	061a      	lsls	r2, r3, #24
 8006076:	d410      	bmi.n	800609a <__swhatbuf_r+0x3e>
 8006078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607c:	e00e      	b.n	800609c <__swhatbuf_r+0x40>
 800607e:	466a      	mov	r2, sp
 8006080:	f000 f902 	bl	8006288 <_fstat_r>
 8006084:	2800      	cmp	r0, #0
 8006086:	dbf2      	blt.n	800606e <__swhatbuf_r+0x12>
 8006088:	9a01      	ldr	r2, [sp, #4]
 800608a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800608e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006092:	425a      	negs	r2, r3
 8006094:	415a      	adcs	r2, r3
 8006096:	602a      	str	r2, [r5, #0]
 8006098:	e7ee      	b.n	8006078 <__swhatbuf_r+0x1c>
 800609a:	2340      	movs	r3, #64	; 0x40
 800609c:	2000      	movs	r0, #0
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	b016      	add	sp, #88	; 0x58
 80060a2:	bd70      	pop	{r4, r5, r6, pc}

080060a4 <__smakebuf_r>:
 80060a4:	898b      	ldrh	r3, [r1, #12]
 80060a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a8:	079d      	lsls	r5, r3, #30
 80060aa:	4606      	mov	r6, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	d507      	bpl.n	80060c0 <__smakebuf_r+0x1c>
 80060b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2301      	movs	r3, #1
 80060ba:	6163      	str	r3, [r4, #20]
 80060bc:	b002      	add	sp, #8
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	ab01      	add	r3, sp, #4
 80060c2:	466a      	mov	r2, sp
 80060c4:	f7ff ffca 	bl	800605c <__swhatbuf_r>
 80060c8:	9900      	ldr	r1, [sp, #0]
 80060ca:	4605      	mov	r5, r0
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff f987 	bl	80053e0 <_malloc_r>
 80060d2:	b948      	cbnz	r0, 80060e8 <__smakebuf_r+0x44>
 80060d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d4ef      	bmi.n	80060bc <__smakebuf_r+0x18>
 80060dc:	f023 0303 	bic.w	r3, r3, #3
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	e7e3      	b.n	80060b0 <__smakebuf_r+0xc>
 80060e8:	4b0d      	ldr	r3, [pc, #52]	; (8006120 <__smakebuf_r+0x7c>)
 80060ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	6020      	str	r0, [r4, #0]
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	81a3      	strh	r3, [r4, #12]
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	6163      	str	r3, [r4, #20]
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	6120      	str	r0, [r4, #16]
 80060fe:	b15b      	cbz	r3, 8006118 <__smakebuf_r+0x74>
 8006100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006104:	4630      	mov	r0, r6
 8006106:	f000 f8d1 	bl	80062ac <_isatty_r>
 800610a:	b128      	cbz	r0, 8006118 <__smakebuf_r+0x74>
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	89a0      	ldrh	r0, [r4, #12]
 800611a:	4305      	orrs	r5, r0
 800611c:	81a5      	strh	r5, [r4, #12]
 800611e:	e7cd      	b.n	80060bc <__smakebuf_r+0x18>
 8006120:	08005eb5 	.word	0x08005eb5

08006124 <_malloc_usable_size_r>:
 8006124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006128:	1f18      	subs	r0, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	bfbc      	itt	lt
 800612e:	580b      	ldrlt	r3, [r1, r0]
 8006130:	18c0      	addlt	r0, r0, r3
 8006132:	4770      	bx	lr

08006134 <_raise_r>:
 8006134:	291f      	cmp	r1, #31
 8006136:	b538      	push	{r3, r4, r5, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	460d      	mov	r5, r1
 800613c:	d904      	bls.n	8006148 <_raise_r+0x14>
 800613e:	2316      	movs	r3, #22
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	f04f 30ff 	mov.w	r0, #4294967295
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800614a:	b112      	cbz	r2, 8006152 <_raise_r+0x1e>
 800614c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006150:	b94b      	cbnz	r3, 8006166 <_raise_r+0x32>
 8006152:	4620      	mov	r0, r4
 8006154:	f000 f830 	bl	80061b8 <_getpid_r>
 8006158:	462a      	mov	r2, r5
 800615a:	4601      	mov	r1, r0
 800615c:	4620      	mov	r0, r4
 800615e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006162:	f000 b817 	b.w	8006194 <_kill_r>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d00a      	beq.n	8006180 <_raise_r+0x4c>
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	d103      	bne.n	8006176 <_raise_r+0x42>
 800616e:	2316      	movs	r3, #22
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	2001      	movs	r0, #1
 8006174:	e7e7      	b.n	8006146 <_raise_r+0x12>
 8006176:	2400      	movs	r4, #0
 8006178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800617c:	4628      	mov	r0, r5
 800617e:	4798      	blx	r3
 8006180:	2000      	movs	r0, #0
 8006182:	e7e0      	b.n	8006146 <_raise_r+0x12>

08006184 <raise>:
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <raise+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f7ff bfd3 	b.w	8006134 <_raise_r>
 800618e:	bf00      	nop
 8006190:	20000008 	.word	0x20000008

08006194 <_kill_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_kill_r+0x20>)
 8006198:	2300      	movs	r3, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f7fc fa48 	bl	8002636 <_kill>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d102      	bne.n	80061b0 <_kill_r+0x1c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b103      	cbz	r3, 80061b0 <_kill_r+0x1c>
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	20000254 	.word	0x20000254

080061b8 <_getpid_r>:
 80061b8:	f7fc ba35 	b.w	8002626 <_getpid>

080061bc <__sread>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	460c      	mov	r4, r1
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	f000 f894 	bl	80062f0 <_read_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	bfab      	itete	ge
 80061cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ce:	89a3      	ldrhlt	r3, [r4, #12]
 80061d0:	181b      	addge	r3, r3, r0
 80061d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061d6:	bfac      	ite	ge
 80061d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061da:	81a3      	strhlt	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__swrite>:
 80061de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	461f      	mov	r7, r3
 80061e4:	898b      	ldrh	r3, [r1, #12]
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	4605      	mov	r5, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4616      	mov	r6, r2
 80061ee:	d505      	bpl.n	80061fc <__swrite+0x1e>
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	2302      	movs	r3, #2
 80061f6:	2200      	movs	r2, #0
 80061f8:	f000 f868 	bl	80062cc <_lseek_r>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	4632      	mov	r2, r6
 800620a:	463b      	mov	r3, r7
 800620c:	4628      	mov	r0, r5
 800620e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	f000 b817 	b.w	8006244 <_write_r>

08006216 <__sseek>:
 8006216:	b510      	push	{r4, lr}
 8006218:	460c      	mov	r4, r1
 800621a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621e:	f000 f855 	bl	80062cc <_lseek_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	bf15      	itete	ne
 8006228:	6560      	strne	r0, [r4, #84]	; 0x54
 800622a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800622e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006232:	81a3      	strheq	r3, [r4, #12]
 8006234:	bf18      	it	ne
 8006236:	81a3      	strhne	r3, [r4, #12]
 8006238:	bd10      	pop	{r4, pc}

0800623a <__sclose>:
 800623a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623e:	f000 b813 	b.w	8006268 <_close_r>
	...

08006244 <_write_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	; (8006264 <_write_r+0x20>)
 8006248:	4604      	mov	r4, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fc fa26 	bl	80026a4 <_write>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_write_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_write_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20000254 	.word	0x20000254

08006268 <_close_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d06      	ldr	r5, [pc, #24]	; (8006284 <_close_r+0x1c>)
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fc fa32 	bl	80026dc <_close>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_close_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_close_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	20000254 	.word	0x20000254

08006288 <_fstat_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d07      	ldr	r5, [pc, #28]	; (80062a8 <_fstat_r+0x20>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f7fc fa2d 	bl	80026f4 <_fstat>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d102      	bne.n	80062a4 <_fstat_r+0x1c>
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	b103      	cbz	r3, 80062a4 <_fstat_r+0x1c>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd38      	pop	{r3, r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	20000254 	.word	0x20000254

080062ac <_isatty_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	; (80062c8 <_isatty_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fc fa2c 	bl	8002714 <_isatty>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_isatty_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_isatty_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000254 	.word	0x20000254

080062cc <_lseek_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_lseek_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fc fa25 	bl	800272a <_lseek>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_lseek_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_lseek_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000254 	.word	0x20000254

080062f0 <_read_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	; (8006310 <_read_r+0x20>)
 80062f4:	4604      	mov	r4, r0
 80062f6:	4608      	mov	r0, r1
 80062f8:	4611      	mov	r1, r2
 80062fa:	2200      	movs	r2, #0
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7fc f9b3 	bl	800266a <_read>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_read_r+0x1e>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_read_r+0x1e>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	20000254 	.word	0x20000254

08006314 <pow>:
 8006314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006318:	ec59 8b10 	vmov	r8, r9, d0
 800631c:	ec57 6b11 	vmov	r6, r7, d1
 8006320:	f000 f8a6 	bl	8006470 <__ieee754_pow>
 8006324:	4b4e      	ldr	r3, [pc, #312]	; (8006460 <pow+0x14c>)
 8006326:	f993 3000 	ldrsb.w	r3, [r3]
 800632a:	3301      	adds	r3, #1
 800632c:	ec55 4b10 	vmov	r4, r5, d0
 8006330:	d015      	beq.n	800635e <pow+0x4a>
 8006332:	4632      	mov	r2, r6
 8006334:	463b      	mov	r3, r7
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa fbf7 	bl	8000b2c <__aeabi_dcmpun>
 800633e:	b970      	cbnz	r0, 800635e <pow+0x4a>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa fbf0 	bl	8000b2c <__aeabi_dcmpun>
 800634c:	2200      	movs	r2, #0
 800634e:	2300      	movs	r3, #0
 8006350:	b148      	cbz	r0, 8006366 <pow+0x52>
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7fa fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800635a:	2800      	cmp	r0, #0
 800635c:	d17d      	bne.n	800645a <pow+0x146>
 800635e:	ec45 4b10 	vmov	d0, r4, r5
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7fa fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800636e:	b1e0      	cbz	r0, 80063aa <pow+0x96>
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800637c:	2800      	cmp	r0, #0
 800637e:	d16c      	bne.n	800645a <pow+0x146>
 8006380:	ec47 6b10 	vmov	d0, r6, r7
 8006384:	f000 fe53 	bl	800702e <finite>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0e8      	beq.n	800635e <pow+0x4a>
 800638c:	2200      	movs	r2, #0
 800638e:	2300      	movs	r3, #0
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7fa fba2 	bl	8000adc <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0e0      	beq.n	800635e <pow+0x4a>
 800639c:	f7fd f8f2 	bl	8003584 <__errno>
 80063a0:	2321      	movs	r3, #33	; 0x21
 80063a2:	6003      	str	r3, [r0, #0]
 80063a4:	2400      	movs	r4, #0
 80063a6:	4d2f      	ldr	r5, [pc, #188]	; (8006464 <pow+0x150>)
 80063a8:	e7d9      	b.n	800635e <pow+0x4a>
 80063aa:	ec45 4b10 	vmov	d0, r4, r5
 80063ae:	f000 fe3e 	bl	800702e <finite>
 80063b2:	bbb8      	cbnz	r0, 8006424 <pow+0x110>
 80063b4:	ec49 8b10 	vmov	d0, r8, r9
 80063b8:	f000 fe39 	bl	800702e <finite>
 80063bc:	b390      	cbz	r0, 8006424 <pow+0x110>
 80063be:	ec47 6b10 	vmov	d0, r6, r7
 80063c2:	f000 fe34 	bl	800702e <finite>
 80063c6:	b368      	cbz	r0, 8006424 <pow+0x110>
 80063c8:	4622      	mov	r2, r4
 80063ca:	462b      	mov	r3, r5
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7fa fbac 	bl	8000b2c <__aeabi_dcmpun>
 80063d4:	b160      	cbz	r0, 80063f0 <pow+0xdc>
 80063d6:	f7fd f8d5 	bl	8003584 <__errno>
 80063da:	2321      	movs	r3, #33	; 0x21
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	4610      	mov	r0, r2
 80063e4:	4619      	mov	r1, r3
 80063e6:	f7fa fa31 	bl	800084c <__aeabi_ddiv>
 80063ea:	4604      	mov	r4, r0
 80063ec:	460d      	mov	r5, r1
 80063ee:	e7b6      	b.n	800635e <pow+0x4a>
 80063f0:	f7fd f8c8 	bl	8003584 <__errno>
 80063f4:	2322      	movs	r3, #34	; 0x22
 80063f6:	6003      	str	r3, [r0, #0]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2300      	movs	r3, #0
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa fb6c 	bl	8000adc <__aeabi_dcmplt>
 8006404:	2400      	movs	r4, #0
 8006406:	b158      	cbz	r0, 8006420 <pow+0x10c>
 8006408:	ec47 6b10 	vmov	d0, r6, r7
 800640c:	f000 fe24 	bl	8007058 <rint>
 8006410:	4632      	mov	r2, r6
 8006412:	ec51 0b10 	vmov	r0, r1, d0
 8006416:	463b      	mov	r3, r7
 8006418:	f7fa fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800641c:	2800      	cmp	r0, #0
 800641e:	d0c2      	beq.n	80063a6 <pow+0x92>
 8006420:	4d11      	ldr	r5, [pc, #68]	; (8006468 <pow+0x154>)
 8006422:	e79c      	b.n	800635e <pow+0x4a>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	4620      	mov	r0, r4
 800642a:	4629      	mov	r1, r5
 800642c:	f7fa fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006430:	2800      	cmp	r0, #0
 8006432:	d094      	beq.n	800635e <pow+0x4a>
 8006434:	ec49 8b10 	vmov	d0, r8, r9
 8006438:	f000 fdf9 	bl	800702e <finite>
 800643c:	2800      	cmp	r0, #0
 800643e:	d08e      	beq.n	800635e <pow+0x4a>
 8006440:	ec47 6b10 	vmov	d0, r6, r7
 8006444:	f000 fdf3 	bl	800702e <finite>
 8006448:	2800      	cmp	r0, #0
 800644a:	d088      	beq.n	800635e <pow+0x4a>
 800644c:	f7fd f89a 	bl	8003584 <__errno>
 8006450:	2322      	movs	r3, #34	; 0x22
 8006452:	6003      	str	r3, [r0, #0]
 8006454:	2400      	movs	r4, #0
 8006456:	2500      	movs	r5, #0
 8006458:	e781      	b.n	800635e <pow+0x4a>
 800645a:	4d04      	ldr	r5, [pc, #16]	; (800646c <pow+0x158>)
 800645c:	2400      	movs	r4, #0
 800645e:	e77e      	b.n	800635e <pow+0x4a>
 8006460:	200001d8 	.word	0x200001d8
 8006464:	fff00000 	.word	0xfff00000
 8006468:	7ff00000 	.word	0x7ff00000
 800646c:	3ff00000 	.word	0x3ff00000

08006470 <__ieee754_pow>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ed2d 8b06 	vpush	{d8-d10}
 8006478:	b08d      	sub	sp, #52	; 0x34
 800647a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800647e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006482:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006486:	ea56 0100 	orrs.w	r1, r6, r0
 800648a:	ec53 2b10 	vmov	r2, r3, d0
 800648e:	f000 84d1 	beq.w	8006e34 <__ieee754_pow+0x9c4>
 8006492:	497f      	ldr	r1, [pc, #508]	; (8006690 <__ieee754_pow+0x220>)
 8006494:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006498:	428c      	cmp	r4, r1
 800649a:	ee10 8a10 	vmov	r8, s0
 800649e:	4699      	mov	r9, r3
 80064a0:	dc09      	bgt.n	80064b6 <__ieee754_pow+0x46>
 80064a2:	d103      	bne.n	80064ac <__ieee754_pow+0x3c>
 80064a4:	b97a      	cbnz	r2, 80064c6 <__ieee754_pow+0x56>
 80064a6:	42a6      	cmp	r6, r4
 80064a8:	dd02      	ble.n	80064b0 <__ieee754_pow+0x40>
 80064aa:	e00c      	b.n	80064c6 <__ieee754_pow+0x56>
 80064ac:	428e      	cmp	r6, r1
 80064ae:	dc02      	bgt.n	80064b6 <__ieee754_pow+0x46>
 80064b0:	428e      	cmp	r6, r1
 80064b2:	d110      	bne.n	80064d6 <__ieee754_pow+0x66>
 80064b4:	b178      	cbz	r0, 80064d6 <__ieee754_pow+0x66>
 80064b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80064ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80064be:	ea54 0308 	orrs.w	r3, r4, r8
 80064c2:	f000 84b7 	beq.w	8006e34 <__ieee754_pow+0x9c4>
 80064c6:	4873      	ldr	r0, [pc, #460]	; (8006694 <__ieee754_pow+0x224>)
 80064c8:	b00d      	add	sp, #52	; 0x34
 80064ca:	ecbd 8b06 	vpop	{d8-d10}
 80064ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d2:	f000 bdb9 	b.w	8007048 <nan>
 80064d6:	f1b9 0f00 	cmp.w	r9, #0
 80064da:	da36      	bge.n	800654a <__ieee754_pow+0xda>
 80064dc:	496e      	ldr	r1, [pc, #440]	; (8006698 <__ieee754_pow+0x228>)
 80064de:	428e      	cmp	r6, r1
 80064e0:	dc51      	bgt.n	8006586 <__ieee754_pow+0x116>
 80064e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80064e6:	428e      	cmp	r6, r1
 80064e8:	f340 84af 	ble.w	8006e4a <__ieee754_pow+0x9da>
 80064ec:	1531      	asrs	r1, r6, #20
 80064ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80064f2:	2914      	cmp	r1, #20
 80064f4:	dd0f      	ble.n	8006516 <__ieee754_pow+0xa6>
 80064f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80064fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80064fe:	fa0c f101 	lsl.w	r1, ip, r1
 8006502:	4281      	cmp	r1, r0
 8006504:	f040 84a1 	bne.w	8006e4a <__ieee754_pow+0x9da>
 8006508:	f00c 0c01 	and.w	ip, ip, #1
 800650c:	f1cc 0102 	rsb	r1, ip, #2
 8006510:	9100      	str	r1, [sp, #0]
 8006512:	b180      	cbz	r0, 8006536 <__ieee754_pow+0xc6>
 8006514:	e059      	b.n	80065ca <__ieee754_pow+0x15a>
 8006516:	2800      	cmp	r0, #0
 8006518:	d155      	bne.n	80065c6 <__ieee754_pow+0x156>
 800651a:	f1c1 0114 	rsb	r1, r1, #20
 800651e:	fa46 fc01 	asr.w	ip, r6, r1
 8006522:	fa0c f101 	lsl.w	r1, ip, r1
 8006526:	42b1      	cmp	r1, r6
 8006528:	f040 848c 	bne.w	8006e44 <__ieee754_pow+0x9d4>
 800652c:	f00c 0c01 	and.w	ip, ip, #1
 8006530:	f1cc 0102 	rsb	r1, ip, #2
 8006534:	9100      	str	r1, [sp, #0]
 8006536:	4959      	ldr	r1, [pc, #356]	; (800669c <__ieee754_pow+0x22c>)
 8006538:	428e      	cmp	r6, r1
 800653a:	d12d      	bne.n	8006598 <__ieee754_pow+0x128>
 800653c:	2f00      	cmp	r7, #0
 800653e:	da79      	bge.n	8006634 <__ieee754_pow+0x1c4>
 8006540:	4956      	ldr	r1, [pc, #344]	; (800669c <__ieee754_pow+0x22c>)
 8006542:	2000      	movs	r0, #0
 8006544:	f7fa f982 	bl	800084c <__aeabi_ddiv>
 8006548:	e016      	b.n	8006578 <__ieee754_pow+0x108>
 800654a:	2100      	movs	r1, #0
 800654c:	9100      	str	r1, [sp, #0]
 800654e:	2800      	cmp	r0, #0
 8006550:	d13b      	bne.n	80065ca <__ieee754_pow+0x15a>
 8006552:	494f      	ldr	r1, [pc, #316]	; (8006690 <__ieee754_pow+0x220>)
 8006554:	428e      	cmp	r6, r1
 8006556:	d1ee      	bne.n	8006536 <__ieee754_pow+0xc6>
 8006558:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800655c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006560:	ea53 0308 	orrs.w	r3, r3, r8
 8006564:	f000 8466 	beq.w	8006e34 <__ieee754_pow+0x9c4>
 8006568:	4b4d      	ldr	r3, [pc, #308]	; (80066a0 <__ieee754_pow+0x230>)
 800656a:	429c      	cmp	r4, r3
 800656c:	dd0d      	ble.n	800658a <__ieee754_pow+0x11a>
 800656e:	2f00      	cmp	r7, #0
 8006570:	f280 8464 	bge.w	8006e3c <__ieee754_pow+0x9cc>
 8006574:	2000      	movs	r0, #0
 8006576:	2100      	movs	r1, #0
 8006578:	ec41 0b10 	vmov	d0, r0, r1
 800657c:	b00d      	add	sp, #52	; 0x34
 800657e:	ecbd 8b06 	vpop	{d8-d10}
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	2102      	movs	r1, #2
 8006588:	e7e0      	b.n	800654c <__ieee754_pow+0xdc>
 800658a:	2f00      	cmp	r7, #0
 800658c:	daf2      	bge.n	8006574 <__ieee754_pow+0x104>
 800658e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006596:	e7ef      	b.n	8006578 <__ieee754_pow+0x108>
 8006598:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800659c:	d104      	bne.n	80065a8 <__ieee754_pow+0x138>
 800659e:	4610      	mov	r0, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	f7fa f829 	bl	80005f8 <__aeabi_dmul>
 80065a6:	e7e7      	b.n	8006578 <__ieee754_pow+0x108>
 80065a8:	493e      	ldr	r1, [pc, #248]	; (80066a4 <__ieee754_pow+0x234>)
 80065aa:	428f      	cmp	r7, r1
 80065ac:	d10d      	bne.n	80065ca <__ieee754_pow+0x15a>
 80065ae:	f1b9 0f00 	cmp.w	r9, #0
 80065b2:	db0a      	blt.n	80065ca <__ieee754_pow+0x15a>
 80065b4:	ec43 2b10 	vmov	d0, r2, r3
 80065b8:	b00d      	add	sp, #52	; 0x34
 80065ba:	ecbd 8b06 	vpop	{d8-d10}
 80065be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c2:	f000 bc77 	b.w	8006eb4 <__ieee754_sqrt>
 80065c6:	2100      	movs	r1, #0
 80065c8:	9100      	str	r1, [sp, #0]
 80065ca:	ec43 2b10 	vmov	d0, r2, r3
 80065ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065d2:	f000 fd23 	bl	800701c <fabs>
 80065d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065da:	ec51 0b10 	vmov	r0, r1, d0
 80065de:	f1b8 0f00 	cmp.w	r8, #0
 80065e2:	d12a      	bne.n	800663a <__ieee754_pow+0x1ca>
 80065e4:	b12c      	cbz	r4, 80065f2 <__ieee754_pow+0x182>
 80065e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800669c <__ieee754_pow+0x22c>
 80065ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80065ee:	45e6      	cmp	lr, ip
 80065f0:	d123      	bne.n	800663a <__ieee754_pow+0x1ca>
 80065f2:	2f00      	cmp	r7, #0
 80065f4:	da05      	bge.n	8006602 <__ieee754_pow+0x192>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	2000      	movs	r0, #0
 80065fc:	4927      	ldr	r1, [pc, #156]	; (800669c <__ieee754_pow+0x22c>)
 80065fe:	f7fa f925 	bl	800084c <__aeabi_ddiv>
 8006602:	f1b9 0f00 	cmp.w	r9, #0
 8006606:	dab7      	bge.n	8006578 <__ieee754_pow+0x108>
 8006608:	9b00      	ldr	r3, [sp, #0]
 800660a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800660e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006612:	4323      	orrs	r3, r4
 8006614:	d108      	bne.n	8006628 <__ieee754_pow+0x1b8>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	f7f9 fe33 	bl	8000288 <__aeabi_dsub>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	e78d      	b.n	8006544 <__ieee754_pow+0xd4>
 8006628:	9b00      	ldr	r3, [sp, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d1a4      	bne.n	8006578 <__ieee754_pow+0x108>
 800662e:	4602      	mov	r2, r0
 8006630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	e79e      	b.n	8006578 <__ieee754_pow+0x108>
 800663a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800663e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006642:	950a      	str	r5, [sp, #40]	; 0x28
 8006644:	9d00      	ldr	r5, [sp, #0]
 8006646:	46ac      	mov	ip, r5
 8006648:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800664a:	ea5c 0505 	orrs.w	r5, ip, r5
 800664e:	d0e4      	beq.n	800661a <__ieee754_pow+0x1aa>
 8006650:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <__ieee754_pow+0x238>)
 8006652:	429e      	cmp	r6, r3
 8006654:	f340 80fc 	ble.w	8006850 <__ieee754_pow+0x3e0>
 8006658:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800665c:	429e      	cmp	r6, r3
 800665e:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <__ieee754_pow+0x230>)
 8006660:	dd07      	ble.n	8006672 <__ieee754_pow+0x202>
 8006662:	429c      	cmp	r4, r3
 8006664:	dc0a      	bgt.n	800667c <__ieee754_pow+0x20c>
 8006666:	2f00      	cmp	r7, #0
 8006668:	da84      	bge.n	8006574 <__ieee754_pow+0x104>
 800666a:	a307      	add	r3, pc, #28	; (adr r3, 8006688 <__ieee754_pow+0x218>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	e795      	b.n	800659e <__ieee754_pow+0x12e>
 8006672:	429c      	cmp	r4, r3
 8006674:	dbf7      	blt.n	8006666 <__ieee754_pow+0x1f6>
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <__ieee754_pow+0x22c>)
 8006678:	429c      	cmp	r4, r3
 800667a:	dd17      	ble.n	80066ac <__ieee754_pow+0x23c>
 800667c:	2f00      	cmp	r7, #0
 800667e:	dcf4      	bgt.n	800666a <__ieee754_pow+0x1fa>
 8006680:	e778      	b.n	8006574 <__ieee754_pow+0x104>
 8006682:	bf00      	nop
 8006684:	f3af 8000 	nop.w
 8006688:	8800759c 	.word	0x8800759c
 800668c:	7e37e43c 	.word	0x7e37e43c
 8006690:	7ff00000 	.word	0x7ff00000
 8006694:	08007588 	.word	0x08007588
 8006698:	433fffff 	.word	0x433fffff
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	3fefffff 	.word	0x3fefffff
 80066a4:	3fe00000 	.word	0x3fe00000
 80066a8:	41e00000 	.word	0x41e00000
 80066ac:	4b64      	ldr	r3, [pc, #400]	; (8006840 <__ieee754_pow+0x3d0>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_dsub>
 80066b4:	a356      	add	r3, pc, #344	; (adr r3, 8006810 <__ieee754_pow+0x3a0>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	4604      	mov	r4, r0
 80066bc:	460d      	mov	r5, r1
 80066be:	f7f9 ff9b 	bl	80005f8 <__aeabi_dmul>
 80066c2:	a355      	add	r3, pc, #340	; (adr r3, 8006818 <__ieee754_pow+0x3a8>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	4606      	mov	r6, r0
 80066ca:	460f      	mov	r7, r1
 80066cc:	4620      	mov	r0, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7f9 ff92 	bl	80005f8 <__aeabi_dmul>
 80066d4:	4b5b      	ldr	r3, [pc, #364]	; (8006844 <__ieee754_pow+0x3d4>)
 80066d6:	4682      	mov	sl, r0
 80066d8:	468b      	mov	fp, r1
 80066da:	2200      	movs	r2, #0
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	a14d      	add	r1, pc, #308	; (adr r1, 8006820 <__ieee754_pow+0x3b0>)
 80066ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ee:	f7f9 fdcb 	bl	8000288 <__aeabi_dsub>
 80066f2:	4622      	mov	r2, r4
 80066f4:	462b      	mov	r3, r5
 80066f6:	f7f9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	2000      	movs	r0, #0
 8006700:	4951      	ldr	r1, [pc, #324]	; (8006848 <__ieee754_pow+0x3d8>)
 8006702:	f7f9 fdc1 	bl	8000288 <__aeabi_dsub>
 8006706:	4622      	mov	r2, r4
 8006708:	4680      	mov	r8, r0
 800670a:	4689      	mov	r9, r1
 800670c:	462b      	mov	r3, r5
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4640      	mov	r0, r8
 800671c:	4649      	mov	r1, r9
 800671e:	f7f9 ff6b 	bl	80005f8 <__aeabi_dmul>
 8006722:	a341      	add	r3, pc, #260	; (adr r3, 8006828 <__ieee754_pow+0x3b8>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 ff66 	bl	80005f8 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4650      	mov	r0, sl
 8006732:	4659      	mov	r1, fp
 8006734:	f7f9 fda8 	bl	8000288 <__aeabi_dsub>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7f9 fda2 	bl	800028c <__adddf3>
 8006748:	2400      	movs	r4, #0
 800674a:	4632      	mov	r2, r6
 800674c:	463b      	mov	r3, r7
 800674e:	4620      	mov	r0, r4
 8006750:	460d      	mov	r5, r1
 8006752:	f7f9 fd99 	bl	8000288 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 fd93 	bl	8000288 <__aeabi_dsub>
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006766:	3b01      	subs	r3, #1
 8006768:	4313      	orrs	r3, r2
 800676a:	4682      	mov	sl, r0
 800676c:	468b      	mov	fp, r1
 800676e:	f040 81f1 	bne.w	8006b54 <__ieee754_pow+0x6e4>
 8006772:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006830 <__ieee754_pow+0x3c0>
 8006776:	eeb0 8a47 	vmov.f32	s16, s14
 800677a:	eef0 8a67 	vmov.f32	s17, s15
 800677e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006782:	2600      	movs	r6, #0
 8006784:	4632      	mov	r2, r6
 8006786:	463b      	mov	r3, r7
 8006788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678c:	f7f9 fd7c 	bl	8000288 <__aeabi_dsub>
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	f7f9 ff30 	bl	80005f8 <__aeabi_dmul>
 8006798:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800679c:	4680      	mov	r8, r0
 800679e:	4689      	mov	r9, r1
 80067a0:	4650      	mov	r0, sl
 80067a2:	4659      	mov	r1, fp
 80067a4:	f7f9 ff28 	bl	80005f8 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4640      	mov	r0, r8
 80067ae:	4649      	mov	r1, r9
 80067b0:	f7f9 fd6c 	bl	800028c <__adddf3>
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	4680      	mov	r8, r0
 80067ba:	4689      	mov	r9, r1
 80067bc:	4620      	mov	r0, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	460b      	mov	r3, r1
 80067c6:	4604      	mov	r4, r0
 80067c8:	460d      	mov	r5, r1
 80067ca:	4602      	mov	r2, r0
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7f9 fd5c 	bl	800028c <__adddf3>
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <__ieee754_pow+0x3dc>)
 80067d6:	4299      	cmp	r1, r3
 80067d8:	ec45 4b19 	vmov	d9, r4, r5
 80067dc:	4606      	mov	r6, r0
 80067de:	460f      	mov	r7, r1
 80067e0:	468b      	mov	fp, r1
 80067e2:	f340 82fe 	ble.w	8006de2 <__ieee754_pow+0x972>
 80067e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80067ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80067ee:	4303      	orrs	r3, r0
 80067f0:	f000 81f0 	beq.w	8006bd4 <__ieee754_pow+0x764>
 80067f4:	a310      	add	r3, pc, #64	; (adr r3, 8006838 <__ieee754_pow+0x3c8>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	ec51 0b18 	vmov	r0, r1, d8
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	a30d      	add	r3, pc, #52	; (adr r3, 8006838 <__ieee754_pow+0x3c8>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	e6cb      	b.n	80065a2 <__ieee754_pow+0x132>
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w
 8006810:	60000000 	.word	0x60000000
 8006814:	3ff71547 	.word	0x3ff71547
 8006818:	f85ddf44 	.word	0xf85ddf44
 800681c:	3e54ae0b 	.word	0x3e54ae0b
 8006820:	55555555 	.word	0x55555555
 8006824:	3fd55555 	.word	0x3fd55555
 8006828:	652b82fe 	.word	0x652b82fe
 800682c:	3ff71547 	.word	0x3ff71547
 8006830:	00000000 	.word	0x00000000
 8006834:	bff00000 	.word	0xbff00000
 8006838:	8800759c 	.word	0x8800759c
 800683c:	7e37e43c 	.word	0x7e37e43c
 8006840:	3ff00000 	.word	0x3ff00000
 8006844:	3fd00000 	.word	0x3fd00000
 8006848:	3fe00000 	.word	0x3fe00000
 800684c:	408fffff 	.word	0x408fffff
 8006850:	4bd7      	ldr	r3, [pc, #860]	; (8006bb0 <__ieee754_pow+0x740>)
 8006852:	ea03 0309 	and.w	r3, r3, r9
 8006856:	2200      	movs	r2, #0
 8006858:	b92b      	cbnz	r3, 8006866 <__ieee754_pow+0x3f6>
 800685a:	4bd6      	ldr	r3, [pc, #856]	; (8006bb4 <__ieee754_pow+0x744>)
 800685c:	f7f9 fecc 	bl	80005f8 <__aeabi_dmul>
 8006860:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006864:	460c      	mov	r4, r1
 8006866:	1523      	asrs	r3, r4, #20
 8006868:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800686c:	4413      	add	r3, r2
 800686e:	9309      	str	r3, [sp, #36]	; 0x24
 8006870:	4bd1      	ldr	r3, [pc, #836]	; (8006bb8 <__ieee754_pow+0x748>)
 8006872:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006876:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800687a:	429c      	cmp	r4, r3
 800687c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006880:	dd08      	ble.n	8006894 <__ieee754_pow+0x424>
 8006882:	4bce      	ldr	r3, [pc, #824]	; (8006bbc <__ieee754_pow+0x74c>)
 8006884:	429c      	cmp	r4, r3
 8006886:	f340 8163 	ble.w	8006b50 <__ieee754_pow+0x6e0>
 800688a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800688c:	3301      	adds	r3, #1
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006894:	2400      	movs	r4, #0
 8006896:	00e3      	lsls	r3, r4, #3
 8006898:	930b      	str	r3, [sp, #44]	; 0x2c
 800689a:	4bc9      	ldr	r3, [pc, #804]	; (8006bc0 <__ieee754_pow+0x750>)
 800689c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068a0:	ed93 7b00 	vldr	d7, [r3]
 80068a4:	4629      	mov	r1, r5
 80068a6:	ec53 2b17 	vmov	r2, r3, d7
 80068aa:	eeb0 8a47 	vmov.f32	s16, s14
 80068ae:	eef0 8a67 	vmov.f32	s17, s15
 80068b2:	4682      	mov	sl, r0
 80068b4:	f7f9 fce8 	bl	8000288 <__aeabi_dsub>
 80068b8:	4652      	mov	r2, sl
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	462b      	mov	r3, r5
 80068c0:	ec51 0b18 	vmov	r0, r1, d8
 80068c4:	f7f9 fce2 	bl	800028c <__adddf3>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	2000      	movs	r0, #0
 80068ce:	49bd      	ldr	r1, [pc, #756]	; (8006bc4 <__ieee754_pow+0x754>)
 80068d0:	f7f9 ffbc 	bl	800084c <__aeabi_ddiv>
 80068d4:	ec41 0b19 	vmov	d9, r0, r1
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7f9 fe8a 	bl	80005f8 <__aeabi_dmul>
 80068e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068f0:	2300      	movs	r3, #0
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80068f8:	46ab      	mov	fp, r5
 80068fa:	106d      	asrs	r5, r5, #1
 80068fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006900:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006904:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006908:	2200      	movs	r2, #0
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	4614      	mov	r4, r2
 8006910:	461d      	mov	r5, r3
 8006912:	f7f9 fe71 	bl	80005f8 <__aeabi_dmul>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4630      	mov	r0, r6
 800691c:	4639      	mov	r1, r7
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	ec53 2b18 	vmov	r2, r3, d8
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	4620      	mov	r0, r4
 800692c:	4629      	mov	r1, r5
 800692e:	f7f9 fcab 	bl	8000288 <__aeabi_dsub>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4650      	mov	r0, sl
 8006938:	4659      	mov	r1, fp
 800693a:	f7f9 fca5 	bl	8000288 <__aeabi_dsub>
 800693e:	4642      	mov	r2, r8
 8006940:	464b      	mov	r3, r9
 8006942:	f7f9 fe59 	bl	80005f8 <__aeabi_dmul>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4630      	mov	r0, r6
 800694c:	4639      	mov	r1, r7
 800694e:	f7f9 fc9b 	bl	8000288 <__aeabi_dsub>
 8006952:	ec53 2b19 	vmov	r2, r3, d9
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800695e:	ec41 0b18 	vmov	d8, r0, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7f9 fe47 	bl	80005f8 <__aeabi_dmul>
 800696a:	a37d      	add	r3, pc, #500	; (adr r3, 8006b60 <__ieee754_pow+0x6f0>)
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	4604      	mov	r4, r0
 8006972:	460d      	mov	r5, r1
 8006974:	f7f9 fe40 	bl	80005f8 <__aeabi_dmul>
 8006978:	a37b      	add	r3, pc, #492	; (adr r3, 8006b68 <__ieee754_pow+0x6f8>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc85 	bl	800028c <__adddf3>
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	f7f9 fe37 	bl	80005f8 <__aeabi_dmul>
 800698a:	a379      	add	r3, pc, #484	; (adr r3, 8006b70 <__ieee754_pow+0x700>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fc7c 	bl	800028c <__adddf3>
 8006994:	4622      	mov	r2, r4
 8006996:	462b      	mov	r3, r5
 8006998:	f7f9 fe2e 	bl	80005f8 <__aeabi_dmul>
 800699c:	a376      	add	r3, pc, #472	; (adr r3, 8006b78 <__ieee754_pow+0x708>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fc73 	bl	800028c <__adddf3>
 80069a6:	4622      	mov	r2, r4
 80069a8:	462b      	mov	r3, r5
 80069aa:	f7f9 fe25 	bl	80005f8 <__aeabi_dmul>
 80069ae:	a374      	add	r3, pc, #464	; (adr r3, 8006b80 <__ieee754_pow+0x710>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f7f9 fc6a 	bl	800028c <__adddf3>
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	f7f9 fe1c 	bl	80005f8 <__aeabi_dmul>
 80069c0:	a371      	add	r3, pc, #452	; (adr r3, 8006b88 <__ieee754_pow+0x718>)
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f7f9 fc61 	bl	800028c <__adddf3>
 80069ca:	4622      	mov	r2, r4
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	462b      	mov	r3, r5
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7f9 fe0f 	bl	80005f8 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4630      	mov	r0, r6
 80069e0:	4639      	mov	r1, r7
 80069e2:	f7f9 fe09 	bl	80005f8 <__aeabi_dmul>
 80069e6:	4642      	mov	r2, r8
 80069e8:	4604      	mov	r4, r0
 80069ea:	460d      	mov	r5, r1
 80069ec:	464b      	mov	r3, r9
 80069ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069f2:	f7f9 fc4b 	bl	800028c <__adddf3>
 80069f6:	ec53 2b18 	vmov	r2, r3, d8
 80069fa:	f7f9 fdfd 	bl	80005f8 <__aeabi_dmul>
 80069fe:	4622      	mov	r2, r4
 8006a00:	462b      	mov	r3, r5
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4642      	mov	r2, r8
 8006a08:	4682      	mov	sl, r0
 8006a0a:	468b      	mov	fp, r1
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7f9 fdf1 	bl	80005f8 <__aeabi_dmul>
 8006a16:	4b6c      	ldr	r3, [pc, #432]	; (8006bc8 <__ieee754_pow+0x758>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460f      	mov	r7, r1
 8006a1e:	f7f9 fc35 	bl	800028c <__adddf3>
 8006a22:	4652      	mov	r2, sl
 8006a24:	465b      	mov	r3, fp
 8006a26:	f7f9 fc31 	bl	800028c <__adddf3>
 8006a2a:	9c04      	ldr	r4, [sp, #16]
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	4622      	mov	r2, r4
 8006a30:	460b      	mov	r3, r1
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7f9 fddf 	bl	80005f8 <__aeabi_dmul>
 8006a3a:	4b63      	ldr	r3, [pc, #396]	; (8006bc8 <__ieee754_pow+0x758>)
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	2200      	movs	r2, #0
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7f9 fc1f 	bl	8000288 <__aeabi_dsub>
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	f7f9 fc1b 	bl	8000288 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	f7f9 fc15 	bl	8000288 <__aeabi_dsub>
 8006a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a62:	f7f9 fdc9 	bl	80005f8 <__aeabi_dmul>
 8006a66:	4622      	mov	r2, r4
 8006a68:	4606      	mov	r6, r0
 8006a6a:	460f      	mov	r7, r1
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	ec51 0b18 	vmov	r0, r1, d8
 8006a72:	f7f9 fdc1 	bl	80005f8 <__aeabi_dmul>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f7f9 fc05 	bl	800028c <__adddf3>
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fbfd 	bl	800028c <__adddf3>
 8006a92:	9c04      	ldr	r4, [sp, #16]
 8006a94:	a33e      	add	r3, pc, #248	; (adr r3, 8006b90 <__ieee754_pow+0x720>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	ec41 0b18 	vmov	d8, r0, r1
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 fbeb 	bl	8000288 <__aeabi_dsub>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fbe5 	bl	8000288 <__aeabi_dsub>
 8006abe:	a336      	add	r3, pc, #216	; (adr r3, 8006b98 <__ieee754_pow+0x728>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fd98 	bl	80005f8 <__aeabi_dmul>
 8006ac8:	a335      	add	r3, pc, #212	; (adr r3, 8006ba0 <__ieee754_pow+0x730>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	4606      	mov	r6, r0
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4630      	mov	r0, r6
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7f9 fbd3 	bl	800028c <__adddf3>
 8006ae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ae8:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <__ieee754_pow+0x75c>)
 8006aea:	4413      	add	r3, r2
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fbcc 	bl	800028c <__adddf3>
 8006af4:	4682      	mov	sl, r0
 8006af6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006af8:	468b      	mov	fp, r1
 8006afa:	f7f9 fd13 	bl	8000524 <__aeabi_i2d>
 8006afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b00:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <__ieee754_pow+0x760>)
 8006b02:	4413      	add	r3, r2
 8006b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b08:	4606      	mov	r6, r0
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	465b      	mov	r3, fp
 8006b10:	ec51 0b18 	vmov	r0, r1, d8
 8006b14:	f7f9 fbba 	bl	800028c <__adddf3>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	f7f9 fbb6 	bl	800028c <__adddf3>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fbb2 	bl	800028c <__adddf3>
 8006b28:	9c04      	ldr	r4, [sp, #16]
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4620      	mov	r0, r4
 8006b30:	460d      	mov	r5, r1
 8006b32:	f7f9 fba9 	bl	8000288 <__aeabi_dsub>
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	f7f9 fba5 	bl	8000288 <__aeabi_dsub>
 8006b3e:	ec53 2b18 	vmov	r2, r3, d8
 8006b42:	f7f9 fba1 	bl	8000288 <__aeabi_dsub>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	e606      	b.n	800675e <__ieee754_pow+0x2ee>
 8006b50:	2401      	movs	r4, #1
 8006b52:	e6a0      	b.n	8006896 <__ieee754_pow+0x426>
 8006b54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006ba8 <__ieee754_pow+0x738>
 8006b58:	e60d      	b.n	8006776 <__ieee754_pow+0x306>
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w
 8006b60:	4a454eef 	.word	0x4a454eef
 8006b64:	3fca7e28 	.word	0x3fca7e28
 8006b68:	93c9db65 	.word	0x93c9db65
 8006b6c:	3fcd864a 	.word	0x3fcd864a
 8006b70:	a91d4101 	.word	0xa91d4101
 8006b74:	3fd17460 	.word	0x3fd17460
 8006b78:	518f264d 	.word	0x518f264d
 8006b7c:	3fd55555 	.word	0x3fd55555
 8006b80:	db6fabff 	.word	0xdb6fabff
 8006b84:	3fdb6db6 	.word	0x3fdb6db6
 8006b88:	33333303 	.word	0x33333303
 8006b8c:	3fe33333 	.word	0x3fe33333
 8006b90:	e0000000 	.word	0xe0000000
 8006b94:	3feec709 	.word	0x3feec709
 8006b98:	dc3a03fd 	.word	0xdc3a03fd
 8006b9c:	3feec709 	.word	0x3feec709
 8006ba0:	145b01f5 	.word	0x145b01f5
 8006ba4:	be3e2fe0 	.word	0xbe3e2fe0
 8006ba8:	00000000 	.word	0x00000000
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	7ff00000 	.word	0x7ff00000
 8006bb4:	43400000 	.word	0x43400000
 8006bb8:	0003988e 	.word	0x0003988e
 8006bbc:	000bb679 	.word	0x000bb679
 8006bc0:	080076f8 	.word	0x080076f8
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	40080000 	.word	0x40080000
 8006bcc:	08007718 	.word	0x08007718
 8006bd0:	08007708 	.word	0x08007708
 8006bd4:	a3b5      	add	r3, pc, #724	; (adr r3, 8006eac <__ieee754_pow+0xa3c>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4649      	mov	r1, r9
 8006bde:	f7f9 fb55 	bl	800028c <__adddf3>
 8006be2:	4622      	mov	r2, r4
 8006be4:	ec41 0b1a 	vmov	d10, r0, r1
 8006be8:	462b      	mov	r3, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fb4b 	bl	8000288 <__aeabi_dsub>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	ec51 0b1a 	vmov	r0, r1, d10
 8006bfa:	f7f9 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f47f adf8 	bne.w	80067f4 <__ieee754_pow+0x384>
 8006c04:	4aa4      	ldr	r2, [pc, #656]	; (8006e98 <__ieee754_pow+0xa28>)
 8006c06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	f340 810b 	ble.w	8006e26 <__ieee754_pow+0x9b6>
 8006c10:	151b      	asrs	r3, r3, #20
 8006c12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006c16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006c1a:	fa4a f303 	asr.w	r3, sl, r3
 8006c1e:	445b      	add	r3, fp
 8006c20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006c24:	4e9d      	ldr	r6, [pc, #628]	; (8006e9c <__ieee754_pow+0xa2c>)
 8006c26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006c2a:	4116      	asrs	r6, r2
 8006c2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006c30:	2000      	movs	r0, #0
 8006c32:	ea23 0106 	bic.w	r1, r3, r6
 8006c36:	f1c2 0214 	rsb	r2, r2, #20
 8006c3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006c3e:	fa4a fa02 	asr.w	sl, sl, r2
 8006c42:	f1bb 0f00 	cmp.w	fp, #0
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	bfb8      	it	lt
 8006c50:	f1ca 0a00 	rsblt	sl, sl, #0
 8006c54:	f7f9 fb18 	bl	8000288 <__aeabi_dsub>
 8006c58:	ec41 0b19 	vmov	d9, r0, r1
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	ec51 0b19 	vmov	r0, r1, d9
 8006c64:	f7f9 fb12 	bl	800028c <__adddf3>
 8006c68:	2400      	movs	r4, #0
 8006c6a:	a379      	add	r3, pc, #484	; (adr r3, 8006e50 <__ieee754_pow+0x9e0>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	4620      	mov	r0, r4
 8006c72:	460d      	mov	r5, r1
 8006c74:	f7f9 fcc0 	bl	80005f8 <__aeabi_dmul>
 8006c78:	ec53 2b19 	vmov	r2, r3, d9
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	4620      	mov	r0, r4
 8006c82:	4629      	mov	r1, r5
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 fafa 	bl	8000288 <__aeabi_dsub>
 8006c94:	a370      	add	r3, pc, #448	; (adr r3, 8006e58 <__ieee754_pow+0x9e8>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fcad 	bl	80005f8 <__aeabi_dmul>
 8006c9e:	a370      	add	r3, pc, #448	; (adr r3, 8006e60 <__ieee754_pow+0x9f0>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	4629      	mov	r1, r5
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 fae8 	bl	800028c <__adddf3>
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	460d      	mov	r5, r1
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	4639      	mov	r1, r7
 8006cc8:	f7f9 fae0 	bl	800028c <__adddf3>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	4689      	mov	r9, r1
 8006cd4:	f7f9 fad8 	bl	8000288 <__aeabi_dsub>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 fad2 	bl	8000288 <__aeabi_dsub>
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	464b      	mov	r3, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	4649      	mov	r1, r9
 8006cf0:	f7f9 fc82 	bl	80005f8 <__aeabi_dmul>
 8006cf4:	a35c      	add	r3, pc, #368	; (adr r3, 8006e68 <__ieee754_pow+0x9f8>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	f7f9 fc7b 	bl	80005f8 <__aeabi_dmul>
 8006d02:	a35b      	add	r3, pc, #364	; (adr r3, 8006e70 <__ieee754_pow+0xa00>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fabe 	bl	8000288 <__aeabi_dsub>
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	462b      	mov	r3, r5
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	a358      	add	r3, pc, #352	; (adr r3, 8006e78 <__ieee754_pow+0xa08>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fab7 	bl	800028c <__adddf3>
 8006d1e:	4622      	mov	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	f7f9 fc69 	bl	80005f8 <__aeabi_dmul>
 8006d26:	a356      	add	r3, pc, #344	; (adr r3, 8006e80 <__ieee754_pow+0xa10>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 faac 	bl	8000288 <__aeabi_dsub>
 8006d30:	4622      	mov	r2, r4
 8006d32:	462b      	mov	r3, r5
 8006d34:	f7f9 fc60 	bl	80005f8 <__aeabi_dmul>
 8006d38:	a353      	add	r3, pc, #332	; (adr r3, 8006e88 <__ieee754_pow+0xa18>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 faa5 	bl	800028c <__adddf3>
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	f7f9 fc57 	bl	80005f8 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fa99 	bl	8000288 <__aeabi_dsub>
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	2200      	movs	r2, #0
 8006d68:	ec41 0b19 	vmov	d9, r0, r1
 8006d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d70:	4620      	mov	r0, r4
 8006d72:	4629      	mov	r1, r5
 8006d74:	f7f9 fa88 	bl	8000288 <__aeabi_dsub>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	ec51 0b19 	vmov	r0, r1, d9
 8006d80:	f7f9 fd64 	bl	800084c <__aeabi_ddiv>
 8006d84:	4632      	mov	r2, r6
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	4649      	mov	r1, r9
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	4632      	mov	r2, r6
 8006d96:	463b      	mov	r3, r7
 8006d98:	f7f9 fa78 	bl	800028c <__adddf3>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fa70 	bl	8000288 <__aeabi_dsub>
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	f7f9 fa6c 	bl	8000288 <__aeabi_dsub>
 8006db0:	460b      	mov	r3, r1
 8006db2:	4602      	mov	r2, r0
 8006db4:	493a      	ldr	r1, [pc, #232]	; (8006ea0 <__ieee754_pow+0xa30>)
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7f9 fa66 	bl	8000288 <__aeabi_dsub>
 8006dbc:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dca:	da2f      	bge.n	8006e2c <__ieee754_pow+0x9bc>
 8006dcc:	4650      	mov	r0, sl
 8006dce:	ed9d 0b00 	vldr	d0, [sp]
 8006dd2:	f000 f9cd 	bl	8007170 <scalbn>
 8006dd6:	ec51 0b10 	vmov	r0, r1, d0
 8006dda:	ec53 2b18 	vmov	r2, r3, d8
 8006dde:	f7ff bbe0 	b.w	80065a2 <__ieee754_pow+0x132>
 8006de2:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <__ieee754_pow+0xa34>)
 8006de4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006de8:	429e      	cmp	r6, r3
 8006dea:	f77f af0b 	ble.w	8006c04 <__ieee754_pow+0x794>
 8006dee:	4b2e      	ldr	r3, [pc, #184]	; (8006ea8 <__ieee754_pow+0xa38>)
 8006df0:	440b      	add	r3, r1
 8006df2:	4303      	orrs	r3, r0
 8006df4:	d00b      	beq.n	8006e0e <__ieee754_pow+0x99e>
 8006df6:	a326      	add	r3, pc, #152	; (adr r3, 8006e90 <__ieee754_pow+0xa20>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	ec51 0b18 	vmov	r0, r1, d8
 8006e00:	f7f9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8006e04:	a322      	add	r3, pc, #136	; (adr r3, 8006e90 <__ieee754_pow+0xa20>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7ff bbca 	b.w	80065a2 <__ieee754_pow+0x132>
 8006e0e:	4622      	mov	r2, r4
 8006e10:	462b      	mov	r3, r5
 8006e12:	f7f9 fa39 	bl	8000288 <__aeabi_dsub>
 8006e16:	4642      	mov	r2, r8
 8006e18:	464b      	mov	r3, r9
 8006e1a:	f7f9 fe73 	bl	8000b04 <__aeabi_dcmpge>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f43f aef0 	beq.w	8006c04 <__ieee754_pow+0x794>
 8006e24:	e7e7      	b.n	8006df6 <__ieee754_pow+0x986>
 8006e26:	f04f 0a00 	mov.w	sl, #0
 8006e2a:	e717      	b.n	8006c5c <__ieee754_pow+0x7ec>
 8006e2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e30:	4619      	mov	r1, r3
 8006e32:	e7d2      	b.n	8006dda <__ieee754_pow+0x96a>
 8006e34:	491a      	ldr	r1, [pc, #104]	; (8006ea0 <__ieee754_pow+0xa30>)
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7ff bb9e 	b.w	8006578 <__ieee754_pow+0x108>
 8006e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e40:	f7ff bb9a 	b.w	8006578 <__ieee754_pow+0x108>
 8006e44:	9000      	str	r0, [sp, #0]
 8006e46:	f7ff bb76 	b.w	8006536 <__ieee754_pow+0xc6>
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	f7ff bb60 	b.w	8006510 <__ieee754_pow+0xa0>
 8006e50:	00000000 	.word	0x00000000
 8006e54:	3fe62e43 	.word	0x3fe62e43
 8006e58:	fefa39ef 	.word	0xfefa39ef
 8006e5c:	3fe62e42 	.word	0x3fe62e42
 8006e60:	0ca86c39 	.word	0x0ca86c39
 8006e64:	be205c61 	.word	0xbe205c61
 8006e68:	72bea4d0 	.word	0x72bea4d0
 8006e6c:	3e663769 	.word	0x3e663769
 8006e70:	c5d26bf1 	.word	0xc5d26bf1
 8006e74:	3ebbbd41 	.word	0x3ebbbd41
 8006e78:	af25de2c 	.word	0xaf25de2c
 8006e7c:	3f11566a 	.word	0x3f11566a
 8006e80:	16bebd93 	.word	0x16bebd93
 8006e84:	3f66c16c 	.word	0x3f66c16c
 8006e88:	5555553e 	.word	0x5555553e
 8006e8c:	3fc55555 	.word	0x3fc55555
 8006e90:	c2f8f359 	.word	0xc2f8f359
 8006e94:	01a56e1f 	.word	0x01a56e1f
 8006e98:	3fe00000 	.word	0x3fe00000
 8006e9c:	000fffff 	.word	0x000fffff
 8006ea0:	3ff00000 	.word	0x3ff00000
 8006ea4:	4090cbff 	.word	0x4090cbff
 8006ea8:	3f6f3400 	.word	0x3f6f3400
 8006eac:	652b82fe 	.word	0x652b82fe
 8006eb0:	3c971547 	.word	0x3c971547

08006eb4 <__ieee754_sqrt>:
 8006eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb8:	ec55 4b10 	vmov	r4, r5, d0
 8006ebc:	4e56      	ldr	r6, [pc, #344]	; (8007018 <__ieee754_sqrt+0x164>)
 8006ebe:	43ae      	bics	r6, r5
 8006ec0:	ee10 0a10 	vmov	r0, s0
 8006ec4:	ee10 3a10 	vmov	r3, s0
 8006ec8:	4629      	mov	r1, r5
 8006eca:	462a      	mov	r2, r5
 8006ecc:	d110      	bne.n	8006ef0 <__ieee754_sqrt+0x3c>
 8006ece:	ee10 2a10 	vmov	r2, s0
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	f7f9 fb90 	bl	80005f8 <__aeabi_dmul>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 f9d4 	bl	800028c <__adddf3>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	ec45 4b10 	vmov	d0, r4, r5
 8006eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	dc10      	bgt.n	8006f16 <__ieee754_sqrt+0x62>
 8006ef4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ef8:	4330      	orrs	r0, r6
 8006efa:	d0f5      	beq.n	8006ee8 <__ieee754_sqrt+0x34>
 8006efc:	b15d      	cbz	r5, 8006f16 <__ieee754_sqrt+0x62>
 8006efe:	ee10 2a10 	vmov	r2, s0
 8006f02:	462b      	mov	r3, r5
 8006f04:	ee10 0a10 	vmov	r0, s0
 8006f08:	f7f9 f9be 	bl	8000288 <__aeabi_dsub>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	f7f9 fc9c 	bl	800084c <__aeabi_ddiv>
 8006f14:	e7e6      	b.n	8006ee4 <__ieee754_sqrt+0x30>
 8006f16:	1509      	asrs	r1, r1, #20
 8006f18:	d076      	beq.n	8007008 <__ieee754_sqrt+0x154>
 8006f1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f1e:	07ce      	lsls	r6, r1, #31
 8006f20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006f24:	bf5e      	ittt	pl
 8006f26:	0fda      	lsrpl	r2, r3, #31
 8006f28:	005b      	lslpl	r3, r3, #1
 8006f2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006f2e:	0fda      	lsrs	r2, r3, #31
 8006f30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006f34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006f38:	2000      	movs	r0, #0
 8006f3a:	106d      	asrs	r5, r5, #1
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	f04f 0e16 	mov.w	lr, #22
 8006f42:	4684      	mov	ip, r0
 8006f44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f48:	eb0c 0401 	add.w	r4, ip, r1
 8006f4c:	4294      	cmp	r4, r2
 8006f4e:	bfde      	ittt	le
 8006f50:	1b12      	suble	r2, r2, r4
 8006f52:	eb04 0c01 	addle.w	ip, r4, r1
 8006f56:	1840      	addle	r0, r0, r1
 8006f58:	0052      	lsls	r2, r2, #1
 8006f5a:	f1be 0e01 	subs.w	lr, lr, #1
 8006f5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006f62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006f66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f6a:	d1ed      	bne.n	8006f48 <__ieee754_sqrt+0x94>
 8006f6c:	4671      	mov	r1, lr
 8006f6e:	2720      	movs	r7, #32
 8006f70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006f74:	4562      	cmp	r2, ip
 8006f76:	eb04 060e 	add.w	r6, r4, lr
 8006f7a:	dc02      	bgt.n	8006f82 <__ieee754_sqrt+0xce>
 8006f7c:	d113      	bne.n	8006fa6 <__ieee754_sqrt+0xf2>
 8006f7e:	429e      	cmp	r6, r3
 8006f80:	d811      	bhi.n	8006fa6 <__ieee754_sqrt+0xf2>
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	eb06 0e04 	add.w	lr, r6, r4
 8006f88:	da43      	bge.n	8007012 <__ieee754_sqrt+0x15e>
 8006f8a:	f1be 0f00 	cmp.w	lr, #0
 8006f8e:	db40      	blt.n	8007012 <__ieee754_sqrt+0x15e>
 8006f90:	f10c 0801 	add.w	r8, ip, #1
 8006f94:	eba2 020c 	sub.w	r2, r2, ip
 8006f98:	429e      	cmp	r6, r3
 8006f9a:	bf88      	it	hi
 8006f9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006fa0:	1b9b      	subs	r3, r3, r6
 8006fa2:	4421      	add	r1, r4
 8006fa4:	46c4      	mov	ip, r8
 8006fa6:	0052      	lsls	r2, r2, #1
 8006fa8:	3f01      	subs	r7, #1
 8006faa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006fae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006fb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fb6:	d1dd      	bne.n	8006f74 <__ieee754_sqrt+0xc0>
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d006      	beq.n	8006fca <__ieee754_sqrt+0x116>
 8006fbc:	1c4c      	adds	r4, r1, #1
 8006fbe:	bf13      	iteet	ne
 8006fc0:	3101      	addne	r1, #1
 8006fc2:	3001      	addeq	r0, #1
 8006fc4:	4639      	moveq	r1, r7
 8006fc6:	f021 0101 	bicne.w	r1, r1, #1
 8006fca:	1043      	asrs	r3, r0, #1
 8006fcc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006fd0:	0849      	lsrs	r1, r1, #1
 8006fd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006fd6:	07c2      	lsls	r2, r0, #31
 8006fd8:	bf48      	it	mi
 8006fda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006fde:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	463d      	mov	r5, r7
 8006fe6:	e77f      	b.n	8006ee8 <__ieee754_sqrt+0x34>
 8006fe8:	0ada      	lsrs	r2, r3, #11
 8006fea:	3815      	subs	r0, #21
 8006fec:	055b      	lsls	r3, r3, #21
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d0fa      	beq.n	8006fe8 <__ieee754_sqrt+0x134>
 8006ff2:	02d7      	lsls	r7, r2, #11
 8006ff4:	d50a      	bpl.n	800700c <__ieee754_sqrt+0x158>
 8006ff6:	f1c1 0420 	rsb	r4, r1, #32
 8006ffa:	fa23 f404 	lsr.w	r4, r3, r4
 8006ffe:	1e4d      	subs	r5, r1, #1
 8007000:	408b      	lsls	r3, r1
 8007002:	4322      	orrs	r2, r4
 8007004:	1b41      	subs	r1, r0, r5
 8007006:	e788      	b.n	8006f1a <__ieee754_sqrt+0x66>
 8007008:	4608      	mov	r0, r1
 800700a:	e7f0      	b.n	8006fee <__ieee754_sqrt+0x13a>
 800700c:	0052      	lsls	r2, r2, #1
 800700e:	3101      	adds	r1, #1
 8007010:	e7ef      	b.n	8006ff2 <__ieee754_sqrt+0x13e>
 8007012:	46e0      	mov	r8, ip
 8007014:	e7be      	b.n	8006f94 <__ieee754_sqrt+0xe0>
 8007016:	bf00      	nop
 8007018:	7ff00000 	.word	0x7ff00000

0800701c <fabs>:
 800701c:	ec51 0b10 	vmov	r0, r1, d0
 8007020:	ee10 2a10 	vmov	r2, s0
 8007024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007028:	ec43 2b10 	vmov	d0, r2, r3
 800702c:	4770      	bx	lr

0800702e <finite>:
 800702e:	b082      	sub	sp, #8
 8007030:	ed8d 0b00 	vstr	d0, [sp]
 8007034:	9801      	ldr	r0, [sp, #4]
 8007036:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800703a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800703e:	0fc0      	lsrs	r0, r0, #31
 8007040:	b002      	add	sp, #8
 8007042:	4770      	bx	lr
 8007044:	0000      	movs	r0, r0
	...

08007048 <nan>:
 8007048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007050 <nan+0x8>
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	00000000 	.word	0x00000000
 8007054:	7ff80000 	.word	0x7ff80000

08007058 <rint>:
 8007058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705a:	ec51 0b10 	vmov	r0, r1, d0
 800705e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007062:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007066:	2e13      	cmp	r6, #19
 8007068:	ee10 4a10 	vmov	r4, s0
 800706c:	460b      	mov	r3, r1
 800706e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007072:	dc58      	bgt.n	8007126 <rint+0xce>
 8007074:	2e00      	cmp	r6, #0
 8007076:	da2b      	bge.n	80070d0 <rint+0x78>
 8007078:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800707c:	4302      	orrs	r2, r0
 800707e:	d023      	beq.n	80070c8 <rint+0x70>
 8007080:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007084:	4302      	orrs	r2, r0
 8007086:	4254      	negs	r4, r2
 8007088:	4314      	orrs	r4, r2
 800708a:	0c4b      	lsrs	r3, r1, #17
 800708c:	0b24      	lsrs	r4, r4, #12
 800708e:	045b      	lsls	r3, r3, #17
 8007090:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007094:	ea44 0103 	orr.w	r1, r4, r3
 8007098:	4b32      	ldr	r3, [pc, #200]	; (8007164 <rint+0x10c>)
 800709a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800709e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 f8ef 	bl	800028c <__adddf3>
 80070ae:	e9cd 0100 	strd	r0, r1, [sp]
 80070b2:	463b      	mov	r3, r7
 80070b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070b8:	4632      	mov	r2, r6
 80070ba:	f7f9 f8e5 	bl	8000288 <__aeabi_dsub>
 80070be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80070c6:	4639      	mov	r1, r7
 80070c8:	ec41 0b10 	vmov	d0, r0, r1
 80070cc:	b003      	add	sp, #12
 80070ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d0:	4a25      	ldr	r2, [pc, #148]	; (8007168 <rint+0x110>)
 80070d2:	4132      	asrs	r2, r6
 80070d4:	ea01 0702 	and.w	r7, r1, r2
 80070d8:	4307      	orrs	r7, r0
 80070da:	d0f5      	beq.n	80070c8 <rint+0x70>
 80070dc:	0851      	lsrs	r1, r2, #1
 80070de:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80070e2:	4314      	orrs	r4, r2
 80070e4:	d00c      	beq.n	8007100 <rint+0xa8>
 80070e6:	ea23 0201 	bic.w	r2, r3, r1
 80070ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070ee:	2e13      	cmp	r6, #19
 80070f0:	fa43 f606 	asr.w	r6, r3, r6
 80070f4:	bf0c      	ite	eq
 80070f6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80070fa:	2400      	movne	r4, #0
 80070fc:	ea42 0306 	orr.w	r3, r2, r6
 8007100:	4918      	ldr	r1, [pc, #96]	; (8007164 <rint+0x10c>)
 8007102:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007106:	4622      	mov	r2, r4
 8007108:	e9d5 4500 	ldrd	r4, r5, [r5]
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f8bc 	bl	800028c <__adddf3>
 8007114:	e9cd 0100 	strd	r0, r1, [sp]
 8007118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	f7f9 f8b2 	bl	8000288 <__aeabi_dsub>
 8007124:	e7d0      	b.n	80070c8 <rint+0x70>
 8007126:	2e33      	cmp	r6, #51	; 0x33
 8007128:	dd07      	ble.n	800713a <rint+0xe2>
 800712a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800712e:	d1cb      	bne.n	80070c8 <rint+0x70>
 8007130:	ee10 2a10 	vmov	r2, s0
 8007134:	f7f9 f8aa 	bl	800028c <__adddf3>
 8007138:	e7c6      	b.n	80070c8 <rint+0x70>
 800713a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800713e:	f04f 36ff 	mov.w	r6, #4294967295
 8007142:	40d6      	lsrs	r6, r2
 8007144:	4230      	tst	r0, r6
 8007146:	d0bf      	beq.n	80070c8 <rint+0x70>
 8007148:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800714c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007150:	bf1f      	itttt	ne
 8007152:	ea24 0101 	bicne.w	r1, r4, r1
 8007156:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800715a:	fa44 f202 	asrne.w	r2, r4, r2
 800715e:	ea41 0402 	orrne.w	r4, r1, r2
 8007162:	e7cd      	b.n	8007100 <rint+0xa8>
 8007164:	08007728 	.word	0x08007728
 8007168:	000fffff 	.word	0x000fffff
 800716c:	00000000 	.word	0x00000000

08007170 <scalbn>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	ec55 4b10 	vmov	r4, r5, d0
 8007176:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800717a:	4606      	mov	r6, r0
 800717c:	462b      	mov	r3, r5
 800717e:	b99a      	cbnz	r2, 80071a8 <scalbn+0x38>
 8007180:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007184:	4323      	orrs	r3, r4
 8007186:	d036      	beq.n	80071f6 <scalbn+0x86>
 8007188:	4b39      	ldr	r3, [pc, #228]	; (8007270 <scalbn+0x100>)
 800718a:	4629      	mov	r1, r5
 800718c:	ee10 0a10 	vmov	r0, s0
 8007190:	2200      	movs	r2, #0
 8007192:	f7f9 fa31 	bl	80005f8 <__aeabi_dmul>
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <scalbn+0x104>)
 8007198:	429e      	cmp	r6, r3
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	da10      	bge.n	80071c2 <scalbn+0x52>
 80071a0:	a32b      	add	r3, pc, #172	; (adr r3, 8007250 <scalbn+0xe0>)
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	e03a      	b.n	800721e <scalbn+0xae>
 80071a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d10c      	bne.n	80071ca <scalbn+0x5a>
 80071b0:	ee10 2a10 	vmov	r2, s0
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 f868 	bl	800028c <__adddf3>
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	e019      	b.n	80071f6 <scalbn+0x86>
 80071c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071c6:	460b      	mov	r3, r1
 80071c8:	3a36      	subs	r2, #54	; 0x36
 80071ca:	4432      	add	r2, r6
 80071cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80071d0:	428a      	cmp	r2, r1
 80071d2:	dd08      	ble.n	80071e6 <scalbn+0x76>
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	a120      	add	r1, pc, #128	; (adr r1, 8007258 <scalbn+0xe8>)
 80071d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071dc:	da1c      	bge.n	8007218 <scalbn+0xa8>
 80071de:	a120      	add	r1, pc, #128	; (adr r1, 8007260 <scalbn+0xf0>)
 80071e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071e4:	e018      	b.n	8007218 <scalbn+0xa8>
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	dd08      	ble.n	80071fc <scalbn+0x8c>
 80071ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80071f6:	ec45 4b10 	vmov	d0, r4, r5
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007200:	da19      	bge.n	8007236 <scalbn+0xc6>
 8007202:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007206:	429e      	cmp	r6, r3
 8007208:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800720c:	dd0a      	ble.n	8007224 <scalbn+0xb4>
 800720e:	a112      	add	r1, pc, #72	; (adr r1, 8007258 <scalbn+0xe8>)
 8007210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e2      	bne.n	80071de <scalbn+0x6e>
 8007218:	a30f      	add	r3, pc, #60	; (adr r3, 8007258 <scalbn+0xe8>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	e7cb      	b.n	80071bc <scalbn+0x4c>
 8007224:	a10a      	add	r1, pc, #40	; (adr r1, 8007250 <scalbn+0xe0>)
 8007226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0b8      	beq.n	80071a0 <scalbn+0x30>
 800722e:	a10e      	add	r1, pc, #56	; (adr r1, 8007268 <scalbn+0xf8>)
 8007230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007234:	e7b4      	b.n	80071a0 <scalbn+0x30>
 8007236:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800723a:	3236      	adds	r2, #54	; 0x36
 800723c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007240:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007244:	4620      	mov	r0, r4
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <scalbn+0x108>)
 8007248:	2200      	movs	r2, #0
 800724a:	e7e8      	b.n	800721e <scalbn+0xae>
 800724c:	f3af 8000 	nop.w
 8007250:	c2f8f359 	.word	0xc2f8f359
 8007254:	01a56e1f 	.word	0x01a56e1f
 8007258:	8800759c 	.word	0x8800759c
 800725c:	7e37e43c 	.word	0x7e37e43c
 8007260:	8800759c 	.word	0x8800759c
 8007264:	fe37e43c 	.word	0xfe37e43c
 8007268:	c2f8f359 	.word	0xc2f8f359
 800726c:	81a56e1f 	.word	0x81a56e1f
 8007270:	43500000 	.word	0x43500000
 8007274:	ffff3cb0 	.word	0xffff3cb0
 8007278:	3c900000 	.word	0x3c900000

0800727c <_init>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr

08007288 <_fini>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	bf00      	nop
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr
