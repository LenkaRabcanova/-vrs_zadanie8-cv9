
vrs_zadanie8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08006f98  08006f98  00016f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007438  08007438  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007438  08007438  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007438  08007438  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000064  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009cdc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8e  00000000  00000000  00029ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002bd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001808c  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000759b  00000000  00000000  00044e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007be60  00000000  00000000  0004c417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8277  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000366c  00000000  00000000  000c82cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f7c 	.word	0x08006f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006f7c 	.word	0x08006f7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_write_byte>:
#include "hts221.h"

static uint8_t address = HTS221_I2C_ADDRESS;

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <hts221_write_byte+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79f9      	ldrb	r1, [r7, #7]
 8000c5e:	79b8      	ldrb	r0, [r7, #6]
 8000c60:	2300      	movs	r3, #0
 8000c62:	f000 fd59 	bl	8001718 <i2c_master_write>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <hts221_read_byte>:

uint8_t  hts221_read_byte(uint8_t reg_addr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <hts221_read_byte+0x30>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	f107 000f 	add.w	r0, r7, #15
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	9100      	str	r1, [sp, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	f000 fd85 	bl	80017a0 <i2c_master_read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <hts221_init>:

uint8_t hts221_init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8000cb2:	2064      	movs	r0, #100	; 0x64
 8000cb4:	f002 fab2 	bl	800321c <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_REG_WHO_AM_I_ADDR);
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff ffdb 	bl	8000c74 <hts221_read_byte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	2bbc      	cmp	r3, #188	; 0xbc
 8000cc6:	d102      	bne.n	8000cce <hts221_init+0x26>
	{
		status = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e001      	b.n	8000cd2 <hts221_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
		status = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]

	}
	//nastavenie registrov
	uint8_t ctrl1 = 0b10000011; //PD active mode, reserved, BDU cont update, 12.5Hz rate
 8000cd2:	2383      	movs	r3, #131	; 0x83
 8000cd4:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8000cd6:	797b      	ldrb	r3, [r7, #5]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2020      	movs	r0, #32
 8000cdc:	f7ff ffb4 	bl	8000c48 <hts221_write_byte>

	return status;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <hts221_get_temperature>:

float hts221_get_temperature()  {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0

	uint8_t l_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTL);
 8000cf0:	202a      	movs	r0, #42	; 0x2a
 8000cf2:	f7ff ffbf 	bl	8000c74 <hts221_read_byte>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	uint8_t h_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTH);
 8000cfa:	202b      	movs	r0, #43	; 0x2b
 8000cfc:	f7ff ffba 	bl	8000c74 <hts221_read_byte>
 8000d00:	4603      	mov	r3, r0
 8000d02:	71bb      	strb	r3, [r7, #6]

	int16_t temperature = l_temperature | (h_temperature << 8);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	80bb      	strh	r3, [r7, #4]

	float final_temperature;

	final_temperature = temperature/8;
 8000d12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da00      	bge.n	8000d1c <hts221_get_temperature+0x32>
 8000d1a:	3307      	adds	r3, #7
 8000d1c:	10db      	asrs	r3, r3, #3
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	ee07 3a90 	vmov	s15, r3
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	edc7 7a00 	vstr	s15, [r7]

	return final_temperature;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	ee07 3a90 	vmov	s15, r3
}
 8000d32:	eeb0 0a67 	vmov.f32	s0, s15
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <hts221_get_relative_humidity>:

float hts221_get_relative_humidity() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

	uint8_t l_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTL);
 8000d42:	2028      	movs	r0, #40	; 0x28
 8000d44:	f7ff ff96 	bl	8000c74 <hts221_read_byte>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
	uint8_t h_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTH);
 8000d4c:	2029      	movs	r0, #41	; 0x29
 8000d4e:	f7ff ff91 	bl	8000c74 <hts221_read_byte>
 8000d52:	4603      	mov	r3, r0
 8000d54:	71bb      	strb	r3, [r7, #6]

	int16_t humidity = l_humidity | (h_humidity  << 8);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]

	float final_humidity;

	final_humidity = humidity/2;
 8000d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d68:	0fda      	lsrs	r2, r3, #31
 8000d6a:	4413      	add	r3, r2
 8000d6c:	105b      	asrs	r3, r3, #1
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d78:	edc7 7a00 	vstr	s15, [r7]

	return final_humidity;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	ee07 3a90 	vmov	s15, r3
}
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <lps25hb_write_byte>:
#include "math.h"

static uint8_t address = LPS25HB_I2C_ADDRESS_1;

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <lps25hb_write_byte+0x28>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	79f9      	ldrb	r1, [r7, #7]
 8000da2:	79b8      	ldrb	r0, [r7, #6]
 8000da4:	2300      	movs	r3, #0
 8000da6:	f000 fcb7 	bl	8001718 <i2c_master_write>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000001 	.word	0x20000001

08000db8 <lps25hb_read_byte>:


uint8_t  lps25hb_read_byte(uint8_t reg_addr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
	(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <lps25hb_read_byte+0x2c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	f107 000f 	add.w	r0, r7, #15
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	9100      	str	r1, [sp, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f000 fce3 	bl	80017a0 <i2c_master_read>
	return data;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000001 	.word	0x20000001

08000de8 <lps25hb_init>:

uint8_t lps25hb_init(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f002 fa12 	bl	800321c <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_REG_WHO_AM_I_ADDR);
 8000df8:	200f      	movs	r0, #15
 8000dfa:	f7ff ffdd 	bl	8000db8 <lps25hb_read_byte>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	2bbd      	cmp	r3, #189	; 0xbd
 8000e06:	d102      	bne.n	8000e0e <lps25hb_init+0x26>
	{
		status = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	e00f      	b.n	8000e2e <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address = LPS25HB_I2C_ADDRESS_1;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <lps25hb_init+0x60>)
 8000e10:	22ba      	movs	r2, #186	; 0xba
 8000e12:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_VALUE);
 8000e14:	20bd      	movs	r0, #189	; 0xbd
 8000e16:	f7ff ffcf 	bl	8000db8 <lps25hb_read_byte>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_REG_WHO_AM_I_ADDR)
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d102      	bne.n	8000e2a <lps25hb_init+0x42>
		{
			status = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	e001      	b.n	8000e2e <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
		}
	}
	//nastavenie registrov

	uint8_t ctrl1 = 0b11000000; // power enable,  ODR 25Hz, interupt off, BDU off, autozero off
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2020      	movs	r0, #32
 8000e38:	f7ff ffa8 	bl	8000d8c <lps25hb_write_byte>

	return status;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000001 	.word	0x20000001

08000e4c <lps25hb_get_pressure>:

float lps25hb_get_pressure() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

	uint8_t xl_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTXL);
 8000e52:	2028      	movs	r0, #40	; 0x28
 8000e54:	f7ff ffb0 	bl	8000db8 <lps25hb_read_byte>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t l_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTL);
 8000e5c:	2029      	movs	r0, #41	; 0x29
 8000e5e:	f7ff ffab 	bl	8000db8 <lps25hb_read_byte>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73bb      	strb	r3, [r7, #14]
	uint8_t h_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTH);
 8000e66:	202a      	movs	r0, #42	; 0x2a
 8000e68:	f7ff ffa6 	bl	8000db8 <lps25hb_read_byte>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	737b      	strb	r3, [r7, #13]

	uint32_t pressure = xl_pressure | (l_pressure << 8) | (h_pressure << 16);
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	431a      	orrs	r2, r3
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	041b      	lsls	r3, r3, #16
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]

	float final_pressure;

	final_pressure = pressure/4096;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	0b1b      	lsrs	r3, r3, #12
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8c:	edc7 7a01 	vstr	s15, [r7, #4]

	return final_pressure;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	ee07 3a90 	vmov	s15, r3
}
 8000e96:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lps25hb_get_alltitude>:

float lps25hb_get_alltitude(float final_pressure) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a01 	vstr	s0, [r7, #4]
	//P = measured pressure from the sensor (0~107900 Pa)
	//p0 = reference pressure at sea level (87000~107900 Pa)

	float alltitude;

	alltitude = 44330*(1-pow(final_pressure/1013.25, 1/5.255));
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fb4c 	bl	8000548 <__aeabi_f2d>
 8000eb0:	a31e      	add	r3, pc, #120	; (adr r3, 8000f2c <lps25hb_get_alltitude+0x8c>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fcc9 	bl	800084c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	ec43 2b17 	vmov	d7, r2, r3
 8000ec2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8000f18 <lps25hb_get_alltitude+0x78>
 8000ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8000eca:	eef0 0a67 	vmov.f32	s1, s15
 8000ece:	f005 f8a1 	bl	8006014 <pow>
 8000ed2:	ec53 2b10 	vmov	r2, r3, d0
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4913      	ldr	r1, [pc, #76]	; (8000f28 <lps25hb_get_alltitude+0x88>)
 8000edc:	f7ff f9d4 	bl	8000288 <__aeabi_dsub>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f20 <lps25hb_get_alltitude+0x80>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff fb83 	bl	80005f8 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fe55 	bl	8000ba8 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	60fb      	str	r3, [r7, #12]

	return alltitude;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	ee07 3a90 	vmov	s15, r3
}
 8000f08:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	ccd9456c 	.word	0xccd9456c
 8000f1c:	3fc85b95 	.word	0x3fc85b95
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40e5a540 	.word	0x40e5a540
 8000f28:	3ff00000 	.word	0x3ff00000
 8000f2c:	00000000 	.word	0x00000000
 8000f30:	408faa00 	.word	0x408faa00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4013      	ands	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000

08001078 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <LL_SYSCFG_SetEXTISource+0x58>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	3302      	adds	r3, #2
 800108a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	43db      	mvns	r3, r3
 8001094:	ea02 0103 	and.w	r1, r2, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	fab3 f383 	clz	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	fa03 f202 	lsl.w	r2, r3, r2
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <LL_SYSCFG_SetEXTISource+0x58>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	430a      	orrs	r2, r1
 80010be:	3302      	adds	r3, #2
 80010c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40010000 	.word	0x40010000

080010d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	613b      	str	r3, [r7, #16]
  return result;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	fab3 f383 	clz	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2103      	movs	r1, #3
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	61bb      	str	r3, [r7, #24]
  return result;
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	431a      	orrs	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001132:	b480      	push	{r7}
 8001134:	b089      	sub	sp, #36	; 0x24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	613b      	str	r3, [r7, #16]
  return result;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2103      	movs	r1, #3
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	61bb      	str	r3, [r7, #24]
  return result;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	60da      	str	r2, [r3, #12]
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	; 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011d2:	f7ff ff39 	bl	8001048 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011da:	f7ff ff35 	bl	8001048 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 80011de:	f641 119f 	movw	r1, #6559	; 0x199f
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f7ff ffd3 	bl	8001190 <LL_GPIO_ResetOutputPin>
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 80011ea:	2133      	movs	r1, #51	; 0x33
 80011ec:	482b      	ldr	r0, [pc, #172]	; (800129c <MX_GPIO_Init+0xf0>)
 80011ee:	f7ff ffcf 	bl	8001190 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 80011f2:	f641 139f 	movw	r3, #6559	; 0x199f
 80011f6:	607b      	str	r3, [r7, #4]
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f001 fde0 	bl	8002dd4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001214:	2333      	movs	r3, #51	; 0x33
 8001216:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	481b      	ldr	r0, [pc, #108]	; (800129c <MX_GPIO_Init+0xf0>)
 800122e:	f001 fdd1 	bl	8002dd4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001232:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff ff1e 	bl	8001078 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP);
 800123c:	2201      	movs	r2, #1
 800123e:	2108      	movs	r1, #8
 8001240:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_GPIO_Init+0xf0>)
 8001242:	f7ff ff76 	bl	8001132 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_GPIO_Init+0xf0>)
 800124c:	f7ff ff42 	bl	80010d4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001250:	2308      	movs	r3, #8
 8001252:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001258:	2301      	movs	r3, #1
 800125a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001264:	2302      	movs	r3, #2
 8001266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fbb8 	bl	80029e4 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001274:	f7ff fe5e 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001278:	4603      	mov	r3, r0
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff feae 	bl	8000fe0 <NVIC_EncodePriority>
 8001284:	4603      	mov	r3, r0
 8001286:	4619      	mov	r1, r3
 8001288:	2009      	movs	r0, #9
 800128a:	f7ff fe7f 	bl	8000f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800128e:	2009      	movs	r0, #9
 8001290:	f7ff fe5e 	bl	8000f50 <__NVIC_EnableIRQ>

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	48000400 	.word	0x48000400

080012a0 <__NVIC_GetPriorityGrouping>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001426:	f023 0306 	bic.w	r3, r3, #6
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	430a      	orrs	r2, r1
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	60da      	str	r2, [r3, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f043 0204 	orr.w	r2, r3, #4
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 0204 	bic.w	r2, r3, #4
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d101      	bne.n	80014ba <LL_I2C_IsActiveFlag_TXIS+0x18>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d101      	bne.n	80014e0 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d101      	bne.n	8001506 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f043 0220 	orr.w	r2, r3, #32
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	61da      	str	r2, [r3, #28]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	0d5b      	lsrs	r3, r3, #21
 800156a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LL_I2C_HandleTransfer+0x48>)
 8001570:	430b      	orrs	r3, r1
 8001572:	43db      	mvns	r3, r3
 8001574:	401a      	ands	r2, r3
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4319      	orrs	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	4319      	orrs	r1, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4319      	orrs	r1, r3
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	430b      	orrs	r3, r1
 800158a:	431a      	orrs	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	03ff7bff 	.word	0x03ff7bff

080015a0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	b2db      	uxtb	r3, r3
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_AHB1_GRP1_EnableClock>:
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40021000 	.word	0x40021000

08001608 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4313      	orrs	r3, r2
 800161a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LL_APB1_GRP1_EnableClock+0x2c>)
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000

08001638 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]
 8001650:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001662:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001666:	f7ff ffb7 	bl	80015d8 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800166e:	2302      	movs	r3, #2
 8001670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800167e:	2304      	movs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <MX_I2C1_Init+0xd4>)
 8001688:	f001 fba4 	bl	8002dd4 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800168c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001690:	f7ff ffba 	bl	8001608 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001694:	f7ff fe04 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001698:	4603      	mov	r3, r0
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe54 	bl	800134c <NVIC_EncodePriority>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	201f      	movs	r0, #31
 80016aa:	f7ff fe25 	bl	80012f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ae:	201f      	movs	r0, #31
 80016b0:	f7ff fe04 	bl	80012bc <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80016b4:	4816      	ldr	r0, [pc, #88]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016b6:	f7ff ff3d 	bl	8001534 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80016ba:	4815      	ldr	r0, [pc, #84]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016bc:	f7ff fec1 	bl	8001442 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80016c0:	4813      	ldr	r0, [pc, #76]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016c2:	f7ff fe96 	bl	80013f2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016c8:	f7ff fe83 	bl	80013d2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_I2C1_Init+0xdc>)
 80016d2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016f0:	f001 fc83 	bl	8002ffa <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_I2C1_Init+0xd8>)
 80016fa:	f7ff fe8a 	bl	8001412 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80016fe:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_I2C1_Init+0xd8>)
 8001700:	f7ff fe57 	bl	80013b2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	48000400 	.word	0x48000400
 8001710:	40005400 	.word	0x40005400
 8001714:	2000090e 	.word	0x2000090e

08001718 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af02      	add	r7, sp, #8
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4603      	mov	r3, r0
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	717b      	strb	r3, [r7, #5]
 8001732:	4613      	mov	r3, r2
 8001734:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001736:	793b      	ldrb	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001742:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001744:	7979      	ldrb	r1, [r7, #5]
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <i2c_master_write+0x80>)
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2302      	movs	r3, #2
 8001752:	2200      	movs	r2, #0
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <i2c_master_write+0x84>)
 8001756:	f7ff fefd 	bl	8001554 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	4619      	mov	r1, r3
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <i2c_master_write+0x84>)
 8001760:	f7ff ff2b 	bl	80015ba <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001764:	e00a      	b.n	800177c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <i2c_master_write+0x84>)
 8001768:	f7ff fe9b 	bl	80014a2 <LL_I2C_IsActiveFlag_TXIS>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4619      	mov	r1, r3
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <i2c_master_write+0x84>)
 8001778:	f7ff ff1f 	bl	80015ba <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <i2c_master_write+0x84>)
 800177e:	f7ff feb6 	bl	80014ee <LL_I2C_IsActiveFlag_STOP>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <i2c_master_write+0x84>)
 800178a:	f7ff fec3 	bl	8001514 <LL_I2C_ClearFlag_STOP>
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	80002000 	.word	0x80002000
 800179c:	40005400 	.word	0x40005400

080017a0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70bb      	strb	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80017ba:	4a30      	ldr	r2, [pc, #192]	; (800187c <i2c_master_read+0xdc>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80017c0:	7c3b      	ldrb	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80017c6:	78bb      	ldrb	r3, [r7, #2]
 80017c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017cc:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <i2c_master_read+0xe0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80017d4:	482b      	ldr	r0, [pc, #172]	; (8001884 <i2c_master_read+0xe4>)
 80017d6:	f7ff fe44 	bl	8001462 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80017da:	7879      	ldrb	r1, [r7, #1]
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <i2c_master_read+0xe8>)
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2301      	movs	r3, #1
 80017e8:	2200      	movs	r2, #0
 80017ea:	4826      	ldr	r0, [pc, #152]	; (8001884 <i2c_master_read+0xe4>)
 80017ec:	f7ff feb2 	bl	8001554 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80017f0:	e00a      	b.n	8001808 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80017f2:	4824      	ldr	r0, [pc, #144]	; (8001884 <i2c_master_read+0xe4>)
 80017f4:	f7ff fe55 	bl	80014a2 <LL_I2C_IsActiveFlag_TXIS>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80017fe:	78bb      	ldrb	r3, [r7, #2]
 8001800:	4619      	mov	r1, r3
 8001802:	4820      	ldr	r0, [pc, #128]	; (8001884 <i2c_master_read+0xe4>)
 8001804:	f7ff fed9 	bl	80015ba <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <i2c_master_read+0xe4>)
 800180a:	f7ff fe70 	bl	80014ee <LL_I2C_IsActiveFlag_STOP>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ee      	beq.n	80017f2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001814:	481b      	ldr	r0, [pc, #108]	; (8001884 <i2c_master_read+0xe4>)
 8001816:	f7ff fe7d 	bl	8001514 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 800181a:	bf00      	nop
 800181c:	4819      	ldr	r0, [pc, #100]	; (8001884 <i2c_master_read+0xe4>)
 800181e:	f7ff fe66 	bl	80014ee <LL_I2C_IsActiveFlag_STOP>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f9      	bne.n	800181c <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001828:	7879      	ldrb	r1, [r7, #1]
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <i2c_master_read+0xec>)
 800182e:	9201      	str	r2, [sp, #4]
 8001830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	4812      	ldr	r0, [pc, #72]	; (8001884 <i2c_master_read+0xe4>)
 800183a:	f7ff fe8b 	bl	8001554 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800183e:	bf00      	nop
 8001840:	4810      	ldr	r0, [pc, #64]	; (8001884 <i2c_master_read+0xe4>)
 8001842:	f7ff fe54 	bl	80014ee <LL_I2C_IsActiveFlag_STOP>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f9      	beq.n	8001840 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <i2c_master_read+0xe4>)
 800184e:	f7ff fe61 	bl	8001514 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001852:	480c      	ldr	r0, [pc, #48]	; (8001884 <i2c_master_read+0xe4>)
 8001854:	f7ff fe15 	bl	8001482 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <i2c_master_read+0xe4>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	4a09      	ldr	r2, [pc, #36]	; (8001884 <i2c_master_read+0xe4>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <i2c_master_read+0xf0>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <i2c_master_read+0xe0>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <i2c_master_read+0xdc>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000218 	.word	0x20000218
 8001880:	200001f8 	.word	0x200001f8
 8001884:	40005400 	.word	0x40005400
 8001888:	80002000 	.word	0x80002000
 800188c:	80002400 	.word	0x80002400
 8001890:	200001f9 	.word	0x200001f9

08001894 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001894:	b598      	push	{r3, r4, r7, lr}
 8001896:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <I2C1_EV_IRQHandler+0x50>)
 800189a:	f7ff fe15 	bl	80014c8 <LL_I2C_IsActiveFlag_RXNE>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <I2C1_EV_IRQHandler+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <I2C1_EV_IRQHandler+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	b2c8      	uxtb	r0, r1
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <I2C1_EV_IRQHandler+0x58>)
 80018b4:	7008      	strb	r0, [r1, #0]
 80018b6:	18d4      	adds	r4, r2, r3
 80018b8:	480a      	ldr	r0, [pc, #40]	; (80018e4 <I2C1_EV_IRQHandler+0x50>)
 80018ba:	f7ff fe71 	bl	80015a0 <LL_I2C_ReceiveData8>
 80018be:	4603      	mov	r3, r0
 80018c0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <I2C1_EV_IRQHandler+0x58>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b13      	cmp	r3, #19
 80018ca:	d903      	bls.n	80018d4 <I2C1_EV_IRQHandler+0x40>
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <I2C1_EV_IRQHandler+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e001      	b.n	80018d8 <I2C1_EV_IRQHandler+0x44>
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <I2C1_EV_IRQHandler+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <I2C1_EV_IRQHandler+0x5c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	}
}
 80018de:	bf00      	nop
 80018e0:	bd98      	pop	{r3, r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40005400 	.word	0x40005400
 80018e8:	20000218 	.word	0x20000218
 80018ec:	200001f9 	.word	0x200001f9
 80018f0:	200001f8 	.word	0x200001f8

080018f4 <__NVIC_SetPriorityGrouping>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_SetPriority>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <LL_RCC_HSI_Enable+0x1c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <LL_RCC_HSI_Enable+0x1c>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <LL_RCC_HSI_IsReady+0x20>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000

08001a84 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <LL_RCC_SetSysClkSource+0x24>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 0203 	bic.w	r2, r3, #3
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <LL_RCC_SetSysClkSource+0x24>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000

08001aac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <LL_RCC_GetSysClkSource+0x18>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <LL_RCC_SetAHBPrescaler+0x24>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <LL_RCC_SetAHBPrescaler+0x24>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000

08001b18 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b28:	4904      	ldr	r1, [pc, #16]	; (8001b3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000

08001b40 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <LL_RCC_SetI2CClockSource+0x2c>)
 8001b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0e1b      	lsrs	r3, r3, #24
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b5a:	4904      	ldr	r1, [pc, #16]	; (8001b6c <LL_RCC_SetI2CClockSource+0x2c>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000

08001b70 <LL_APB1_GRP1_EnableClock>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <LL_FLASH_SetLatency+0x24>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 0207 	bic.w	r2, r3, #7
 8001be0:	4904      	ldr	r1, [pc, #16]	; (8001bf4 <LL_FLASH_SetLatency+0x24>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <LL_FLASH_GetLatency+0x18>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000

08001c14 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f06f 0201 	mvn.w	r2, #1
 8001c42:	611a      	str	r2, [r3, #16]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60da      	str	r2, [r3, #12]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_GPIO_IsInputPinSet>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_GPIO_SetOutputPin>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	619a      	str	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_GPIO_ResetOutputPin>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <resetSegments>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetSegments(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f7ff ffdc 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001d08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d10:	f7ff ffd6 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001d14:	2102      	movs	r1, #2
 8001d16:	480e      	ldr	r0, [pc, #56]	; (8001d50 <resetSegments+0x58>)
 8001d18:	f7ff ffd2 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <resetSegments+0x58>)
 8001d20:	f7ff ffce 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001d24:	2110      	movs	r1, #16
 8001d26:	480a      	ldr	r0, [pc, #40]	; (8001d50 <resetSegments+0x58>)
 8001d28:	f7ff ffca 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f7ff ffc5 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001d36:	2102      	movs	r1, #2
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f7ff ffc0 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001d40:	2108      	movs	r1, #8
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f7ff ffbb 	bl	8001cc0 <LL_GPIO_SetOutputPin>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	48000400 	.word	0x48000400

08001d54 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);

	LL_GPIO_ResetOutputPin(digit0_GPIO_Port, digit0_Pin);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <resetDigits+0x3c>)
 8001d5c:	f7ff ffbe 	bl	8001cdc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit1_GPIO_Port, digit1_Pin);
 8001d60:	2110      	movs	r1, #16
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f7ff ffb9 	bl	8001cdc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit2_GPIO_Port, digit2_Pin);
 8001d6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d72:	f7ff ffb3 	bl	8001cdc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit3_GPIO_Port, digit3_Pin);
 8001d76:	2104      	movs	r1, #4
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7c:	f7ff ffae 	bl	8001cdc <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digitTime_GPIO_Port, digitTime_Pin);
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f7ff ffa9 	bl	8001cdc <LL_GPIO_ResetOutputPin>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	48000400 	.word	0x48000400

08001d94 <decode_7seg>:




unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
    if (chr > (unsigned char)'z')
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b7a      	cmp	r3, #122	; 0x7a
 8001da2:	d901      	bls.n	8001da8 <decode_7seg+0x14>
        return 0x00;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e003      	b.n	8001db0 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	3b30      	subs	r3, #48	; 0x30
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <decode_7seg+0x28>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
    /* or */
//	return seven_seg_digits_decode_gfedcba[chr - '0'];
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	08006fc8 	.word	0x08006fc8

08001dc0 <display_symbol>:


void display_symbol(char symbol,int digit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d822      	bhi.n	8001e18 <display_symbol+0x58>
 8001dd2:	a201      	add	r2, pc, #4	; (adr r2, 8001dd8 <display_symbol+0x18>)
 8001dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001df3 	.word	0x08001df3
 8001de0:	08001dff 	.word	0x08001dff
 8001de4:	08001e0d 	.word	0x08001e0d
	switch (digit)
	{
	    case 0:
		    DIGIT_0_ON;
 8001de8:	2101      	movs	r1, #1
 8001dea:	4847      	ldr	r0, [pc, #284]	; (8001f08 <display_symbol+0x148>)
 8001dec:	f7ff ff68 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	      break;
 8001df0:	e012      	b.n	8001e18 <display_symbol+0x58>

	    case 1:
	    	DIGIT_1_ON;
 8001df2:	2110      	movs	r1, #16
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df8:	f7ff ff62 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	      break;
 8001dfc:	e00c      	b.n	8001e18 <display_symbol+0x58>

	    case 2:
	    	DIGIT_2_ON;
 8001dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e06:	f7ff ff5b 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	      break;
 8001e0a:	e005      	b.n	8001e18 <display_symbol+0x58>

	    case 3:
	    	DIGIT_3_ON;
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f7ff ff55 	bl	8001cc0 <LL_GPIO_SetOutputPin>
	      break;
 8001e16:	bf00      	nop
	}



	char pomocna=symbol;
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d103      	bne.n	8001e32 <display_symbol+0x72>
		LL_GPIO_ResetOutputPin(segmentG_GPIO_Port, segmentG_Pin);
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	4836      	ldr	r0, [pc, #216]	; (8001f08 <display_symbol+0x148>)
 8001e2e:	f7ff ff55 	bl	8001cdc <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 1;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d104      	bne.n	8001e54 <display_symbol+0x94>
		LL_GPIO_ResetOutputPin(segmentF_GPIO_Port, segmentF_Pin);
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f7ff ff44 	bl	8001cdc <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 2;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <display_symbol+0xb8>
		LL_GPIO_ResetOutputPin(segmentE_GPIO_Port, segmentE_Pin);
 8001e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e74:	f7ff ff32 	bl	8001cdc <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 3;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	08db      	lsrs	r3, r3, #3
 8001e80:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d103      	bne.n	8001e98 <display_symbol+0xd8>
		LL_GPIO_ResetOutputPin(segmentD_GPIO_Port, segmentD_Pin);
 8001e90:	2120      	movs	r1, #32
 8001e92:	481d      	ldr	r0, [pc, #116]	; (8001f08 <display_symbol+0x148>)
 8001e94:	f7ff ff22 	bl	8001cdc <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 4;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <display_symbol+0xfc>
		LL_GPIO_ResetOutputPin(segmentC_GPIO_Port, segmentC_Pin);
 8001eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f7ff ff10 	bl	8001cdc <LL_GPIO_ResetOutputPin>


	pomocna=symbol;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 5;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d104      	bne.n	8001ede <display_symbol+0x11e>
		LL_GPIO_ResetOutputPin(segmentB_GPIO_Port, segmentB_Pin);
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f7ff feff 	bl	8001cdc <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 6;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <display_symbol+0x140>
		LL_GPIO_ResetOutputPin(segmentA_GPIO_Port, segmentA_Pin);
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efc:	f7ff feee 	bl	8001cdc <LL_GPIO_ResetOutputPin>
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	48000400 	.word	0x48000400

08001f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fe44 	bl	8001ba0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f1c:	f7ff fe28 	bl	8001b70 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f7ff fce7 	bl	80018f4 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001f26:	f7ff fd09 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	210f      	movs	r1, #15
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fd3b 	bl	80019ac <NVIC_EncodePriority>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3e:	f7ff fd0b 	bl	8001958 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f7ff fcd6 	bl	80018f4 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f48:	f000 f896 	bl	8002078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4c:	f7ff f92e 	bl	80011ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f50:	f000 fbac 	bl	80026ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8001f54:	f7ff fb70 	bl	8001638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8001f58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f5c:	f7ff fe5a 	bl	8001c14 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8001f60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f64:	f7ff fe87 	bl	8001c76 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lps25hb_init();
 8001f68:	f7fe ff3e 	bl	8000de8 <lps25hb_init>
  hts221_init();
 8001f6c:	f7fe fe9c 	bl	8000ca8 <hts221_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if(mode==0){
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <main+0x148>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11e      	bne.n	8001fb6 <main+0xaa>
		   float temperature = hts221_get_temperature();
 8001f78:	f7fe feb7 	bl	8000cea <hts221_get_temperature>
 8001f7c:	ed87 0a05 	vstr	s0, [r7, #20]
		   if(temperature>=100) {
 8001f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f84:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002058 <main+0x14c>
 8001f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f90:	db01      	blt.n	8001f96 <main+0x8a>
			   temperature = 99.9;
 8001f92:	4b32      	ldr	r3, [pc, #200]	; (800205c <main+0x150>)
 8001f94:	617b      	str	r3, [r7, #20]
		   }
		   sprintf(retazec, "TEMP_%03.1f", temperature);
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7fe fad6 	bl	8000548 <__aeabi_f2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	492f      	ldr	r1, [pc, #188]	; (8002060 <main+0x154>)
 8001fa2:	4830      	ldr	r0, [pc, #192]	; (8002064 <main+0x158>)
 8001fa4:	f001 fe0c 	bl	8003bc0 <siprintf>
		   //strcpy(retazec, "TEMP_xx.x");
		   length_retazec = strlen(retazec);
 8001fa8:	482e      	ldr	r0, [pc, #184]	; (8002064 <main+0x158>)
 8001faa:	f7fe f911 	bl	80001d0 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <main+0x15c>)
 8001fb4:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==1){
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <main+0x148>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d113      	bne.n	8001fe6 <main+0xda>
		   float humidity = hts221_get_relative_humidity();
 8001fbe:	f7fe febd 	bl	8000d3c <hts221_get_relative_humidity>
 8001fc2:	ed87 0a04 	vstr	s0, [r7, #16]
		   sprintf(retazec, "HUM_%02.0f", humidity);
 8001fc6:	6938      	ldr	r0, [r7, #16]
 8001fc8:	f7fe fabe 	bl	8000548 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4926      	ldr	r1, [pc, #152]	; (800206c <main+0x160>)
 8001fd2:	4824      	ldr	r0, [pc, #144]	; (8002064 <main+0x158>)
 8001fd4:	f001 fdf4 	bl	8003bc0 <siprintf>
		   //strcpy(retazec, "HUM_xx");
		   length_retazec = strlen(retazec);
 8001fd8:	4822      	ldr	r0, [pc, #136]	; (8002064 <main+0x158>)
 8001fda:	f7fe f8f9 	bl	80001d0 <strlen>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <main+0x15c>)
 8001fe4:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==2){
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <main+0x148>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d113      	bne.n	8002016 <main+0x10a>
		   float final_pressure = lps25hb_get_pressure();
 8001fee:	f7fe ff2d 	bl	8000e4c <lps25hb_get_pressure>
 8001ff2:	ed87 0a03 	vstr	s0, [r7, #12]
		   sprintf(retazec, "BAR_%06.2f", final_pressure);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7fe faa6 	bl	8000548 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	491b      	ldr	r1, [pc, #108]	; (8002070 <main+0x164>)
 8002002:	4818      	ldr	r0, [pc, #96]	; (8002064 <main+0x158>)
 8002004:	f001 fddc 	bl	8003bc0 <siprintf>
		   //strcpy(retazec, "BAR_xxxx.xx");
		   length_retazec = strlen(retazec);
 8002008:	4816      	ldr	r0, [pc, #88]	; (8002064 <main+0x158>)
 800200a:	f7fe f8e1 	bl	80001d0 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <main+0x15c>)
 8002014:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==3){
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <main+0x148>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d1a8      	bne.n	8001f70 <main+0x64>
		   float final_pressure = lps25hb_get_pressure();
 800201e:	f7fe ff15 	bl	8000e4c <lps25hb_get_pressure>
 8002022:	ed87 0a02 	vstr	s0, [r7, #8]
		   float alltitude = lps25hb_get_alltitude(final_pressure);
 8002026:	ed97 0a02 	vldr	s0, [r7, #8]
 800202a:	f7fe ff39 	bl	8000ea0 <lps25hb_get_alltitude>
 800202e:	ed87 0a01 	vstr	s0, [r7, #4]
		   sprintf(retazec, "ALT_%05.1f", alltitude);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fa88 	bl	8000548 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	490d      	ldr	r1, [pc, #52]	; (8002074 <main+0x168>)
 800203e:	4809      	ldr	r0, [pc, #36]	; (8002064 <main+0x158>)
 8002040:	f001 fdbe 	bl	8003bc0 <siprintf>
		   //strcpy(retazec, "ALT_xxxx.x");
		   length_retazec = strlen(retazec);
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <main+0x158>)
 8002046:	f7fe f8c3 	bl	80001d0 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <main+0x15c>)
 8002050:	701a      	strb	r2, [r3, #0]
	   if(mode==0){
 8002052:	e78d      	b.n	8001f70 <main+0x64>
 8002054:	200001fa 	.word	0x200001fa
 8002058:	42c80000 	.word	0x42c80000
 800205c:	42c7cccd 	.word	0x42c7cccd
 8002060:	08006f98 	.word	0x08006f98
 8002064:	2000021c 	.word	0x2000021c
 8002068:	200001fb 	.word	0x200001fb
 800206c:	08006fa4 	.word	0x08006fa4
 8002070:	08006fb0 	.word	0x08006fb0
 8002074:	08006fbc 	.word	0x08006fbc

08002078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fda7 	bl	8001bd0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002082:	bf00      	nop
 8002084:	f7ff fdb8 	bl	8001bf8 <LL_FLASH_GetLatency>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1fa      	bne.n	8002084 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800208e:	f7ff fcc1 	bl	8001a14 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002092:	bf00      	nop
 8002094:	f7ff fcce 	bl	8001a34 <LL_RCC_HSI_IsReady>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d1fa      	bne.n	8002094 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff fcda 	bl	8001a58 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fd0f 	bl	8001ac8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fd20 	bl	8001af0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fd31 	bl	8001b18 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fce4 	bl	8001a84 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80020bc:	bf00      	nop
 80020be:	f7ff fcf5 	bl	8001aac <LL_RCC_GetSysClkSource>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1fa      	bne.n	80020be <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <SystemClock_Config+0x68>)
 80020ca:	f001 f899 	bl	8003200 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80020ce:	4804      	ldr	r0, [pc, #16]	; (80020e0 <SystemClock_Config+0x68>)
 80020d0:	f001 f8ca 	bl	8003268 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80020d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020d8:	f7ff fd32 	bl	8001b40 <LL_RCC_SetI2CClockSource>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <checkButtonState>:

/* USER CODE BEGIN 4 */

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	70fb      	strb	r3, [r7, #3]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70bb      	strb	r3, [r7, #2]
 80020fa:	4613      	mov	r3, r2
 80020fc:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	2300      	movs	r3, #0
 8002104:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 8002106:	e021      	b.n	800214c <checkButtonState+0x68>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_RISE)) || (!LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_FALL)))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fdc2 	bl	8001c96 <LL_GPIO_IsInputPinSet>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <checkButtonState+0x3a>
 8002118:	78bb      	ldrb	r3, [r7, #2]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d00a      	beq.n	8002134 <checkButtonState+0x50>
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fdb7 	bl	8001c96 <LL_GPIO_IsInputPinSet>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <checkButtonState+0x58>
 800212e:	78bb      	ldrb	r3, [r7, #2]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <checkButtonState+0x58>
			{
				button_state += 1;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	3301      	adds	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	e001      	b.n	8002140 <checkButtonState+0x5c>
			}
			else
			{
				button_state = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 8002140:	7bbb      	ldrb	r3, [r7, #14]
 8002142:	3301      	adds	r3, #1
 8002144:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 8002146:	2001      	movs	r0, #1
 8002148:	f001 f868 	bl	800321c <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	7e3b      	ldrb	r3, [r7, #24]
 8002150:	429a      	cmp	r2, r3
 8002152:	d203      	bcs.n	800215c <checkButtonState+0x78>
 8002154:	7bba      	ldrb	r2, [r7, #14]
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	429a      	cmp	r2, r3
 800215a:	d3d5      	bcc.n	8002108 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	7e3b      	ldrb	r3, [r7, #24]
 8002160:	429a      	cmp	r2, r3
 8002162:	d305      	bcc.n	8002170 <checkButtonState+0x8c>
 8002164:	7bba      	ldrb	r2, [r7, #14]
 8002166:	787b      	ldrb	r3, [r7, #1]
 8002168:	429a      	cmp	r2, r3
 800216a:	d801      	bhi.n	8002170 <checkButtonState+0x8c>
		{
			return 1;
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <checkButtonState+0x8e>
		}
		else
		{
			return 0;
 8002170:	2300      	movs	r3, #0
		}
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <updateDisplay>:

void updateDisplay(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

	resetDigits();
 8002182:	f7ff fde7 	bl	8001d54 <resetDigits>
	resetSegments();
 8002186:	f7ff fdb7 	bl	8001cf8 <resetSegments>

	char symbol = retazec[textposition+digit];
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <updateDisplay+0x58>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <updateDisplay+0x5c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <updateDisplay+0x60>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	71fb      	strb	r3, [r7, #7]
	char segments = decode_7seg(symbol);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fdf9 	bl	8001d94 <decode_7seg>
 80021a2:	4603      	mov	r3, r0
 80021a4:	71bb      	strb	r3, [r7, #6]
	display_symbol(segments, digit);
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <updateDisplay+0x5c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fe06 	bl	8001dc0 <display_symbol>

	digit = digit+1;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <updateDisplay+0x5c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <updateDisplay+0x5c>)
 80021bc:	6013      	str	r3, [r2, #0]
	if(digit >= 4)
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <updateDisplay+0x5c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	dd02      	ble.n	80021cc <updateDisplay+0x50>
		digit=0;
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <updateDisplay+0x5c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000208 	.word	0x20000208
 80021d8:	20000204 	.word	0x20000204
 80021dc:	2000021c 	.word	0x2000021c

080021e0 <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	//1000 za s
	tim2count = tim2count + 1;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <TIM2_IRQHandler+0x7c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <TIM2_IRQHandler+0x7c>)
 80021ec:	6013      	str	r3, [r2, #0]
	if(tim2count >=500) {
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <TIM2_IRQHandler+0x7c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021f6:	db22      	blt.n	800223e <TIM2_IRQHandler+0x5e>
		tim2count = 0; //2 krat za sekundu sa vykona tento if
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <TIM2_IRQHandler+0x7c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

		//Posun textu
		if (orientation==0){
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <TIM2_IRQHandler+0x80>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <TIM2_IRQHandler+0x46>
			textposition = textposition + 1;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <TIM2_IRQHandler+0x84>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <TIM2_IRQHandler+0x84>)
 800220e:	6013      	str	r3, [r2, #0]
			if((textposition+4)>=(length_retazec))
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <TIM2_IRQHandler+0x84>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3304      	adds	r3, #4
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM2_IRQHandler+0x88>)
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	4293      	cmp	r3, r2
 800221c:	db0f      	blt.n	800223e <TIM2_IRQHandler+0x5e>
			    orientation=1;
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <TIM2_IRQHandler+0x80>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e00b      	b.n	800223e <TIM2_IRQHandler+0x5e>
		}

		else{
			textposition = textposition - 1;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <TIM2_IRQHandler+0x84>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <TIM2_IRQHandler+0x84>)
 800222e:	6013      	str	r3, [r2, #0]
			if((textposition)<=0)
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <TIM2_IRQHandler+0x84>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	dc02      	bgt.n	800223e <TIM2_IRQHandler+0x5e>
			    orientation=0;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <TIM2_IRQHandler+0x80>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
		}

	}

	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 800223e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002242:	f7ff fd05 	bl	8001c50 <LL_TIM_IsActiveFlag_UPDATE>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <TIM2_IRQHandler+0x70>
	{
		updateDisplay();
 800224c:	f7ff ff96 	bl	800217c <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002250:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002254:	f7ff fcee 	bl	8001c34 <LL_TIM_ClearFlag_UPDATE>


}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200001fc 	.word	0x200001fc
 8002260:	20000200 	.word	0x20000200
 8002264:	20000208 	.word	0x20000208
 8002268:	200001fb 	.word	0x200001fb

0800226c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8002272:	2314      	movs	r3, #20
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	231e      	movs	r3, #30
 8002278:	2200      	movs	r2, #0
 800227a:	2108      	movs	r1, #8
 800227c:	4810      	ldr	r0, [pc, #64]	; (80022c0 <EXTI3_IRQHandler+0x54>)
 800227e:	f7ff ff31 	bl	80020e4 <checkButtonState>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <EXTI3_IRQHandler+0x42>
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		//switch_state ^= 1;
		mode = mode+1;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <EXTI3_IRQHandler+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <EXTI3_IRQHandler+0x58>)
 8002292:	701a      	strb	r2, [r3, #0]
		if (mode > 3) {
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <EXTI3_IRQHandler+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d902      	bls.n	80022a2 <EXTI3_IRQHandler+0x36>
			mode = 0;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <EXTI3_IRQHandler+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
		}
		textposition = 0;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <EXTI3_IRQHandler+0x5c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
		orientation = 0;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <EXTI3_IRQHandler+0x60>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
	}

	/* Clear EXTI4 pending register flag */

		//type your code for pending register flag clear here:
	EXTI->PR |= (1 << 4);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <EXTI3_IRQHandler+0x64>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <EXTI3_IRQHandler+0x64>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6153      	str	r3, [r2, #20]
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	48000400 	.word	0x48000400
 80022c4:	200001fa 	.word	0x200001fa
 80022c8:	20000208 	.word	0x20000208
 80022cc:	20000200 	.word	0x20000200
 80022d0:	40010400 	.word	0x40010400

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler+0x4>

080022e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
	return 1;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_kill>:

int _kill(int pid, int sig)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002344:	f000 ffa0 	bl	8003288 <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	2216      	movs	r2, #22
 800234c:	601a      	str	r2, [r3, #0]
	return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <_exit>:

void _exit (int status)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002362:	f04f 31ff 	mov.w	r1, #4294967295
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffe7 	bl	800233a <_kill>
	while (1) {}		/* Make sure we hang here */
 800236c:	e7fe      	b.n	800236c <_exit+0x12>

0800236e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e00a      	b.n	8002396 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002380:	f3af 8000 	nop.w
 8002384:	4601      	mov	r1, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	60ba      	str	r2, [r7, #8]
 800238c:	b2ca      	uxtb	r2, r1
 800238e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	dbf0      	blt.n	8002380 <_read+0x12>
	}

return len;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e009      	b.n	80023ce <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	60ba      	str	r2, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	dbf1      	blt.n	80023ba <_write+0x12>
	}
	return len;
 80023d6:	687b      	ldr	r3, [r7, #4]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_close>:

int _close(int file)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	return -1;
 80023e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002408:	605a      	str	r2, [r3, #4]
	return 0;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_isatty>:

int _isatty(int file)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	return 1;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f000 ff06 	bl	8003288 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20003000 	.word	0x20003000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	2000020c 	.word	0x2000020c
 80024b0:	20000240 	.word	0x20000240

080024b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <SystemInit+0x20>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <SystemInit+0x20>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <LL_APB1_GRP1_EnableClock>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40021000 	.word	0x40021000

0800261c <LL_TIM_DisableARRPreload>:
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	601a      	str	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_TIM_SetClockSource>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800264e:	f023 0307 	bic.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_TIM_SetTriggerOutput>:
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	605a      	str	r2, [r3, #4]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_TIM_DisableMasterSlaveMode>:
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff ff93 	bl	80025ec <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80026c6:	f7ff ff07 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff57 	bl	8002584 <NVIC_EncodePriority>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4619      	mov	r1, r3
 80026da:	201c      	movs	r0, #28
 80026dc:	f7ff ff28 	bl	8002530 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80026e0:	201c      	movs	r0, #28
 80026e2:	f7ff ff07 	bl	80024f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 80026e6:	2307      	movs	r3, #7
 80026e8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 80026ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002700:	f000 fcf2 	bl	80030e8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002708:	f7ff ff88 	bl	800261c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800270c:	2100      	movs	r1, #0
 800270e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002712:	f7ff ff93 	bl	800263c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002716:	2100      	movs	r1, #0
 8002718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800271c:	f7ff ffa3 	bl	8002666 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002724:	f7ff ffb2 	bl	800268c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800275a:	f7ff feab 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800275e:	f000 fd99 	bl	8003294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002762:	f7ff fbd3 	bl	8001f0c <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002768:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002774:	08007440 	.word	0x08007440
  ldr r2, =_sbss
 8002778:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800277c:	20000240 	.word	0x20000240

08002780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_2_IRQHandler>
	...

08002784 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4904      	ldr	r1, [pc, #16]	; (80027a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40010400 	.word	0x40010400

080027a8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	4904      	ldr	r1, [pc, #16]	; (80027c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	620b      	str	r3, [r1, #32]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010400 	.word	0x40010400

080027cc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	43db      	mvns	r3, r3
 80027dc:	4904      	ldr	r1, [pc, #16]	; (80027f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80027de:	4013      	ands	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40010400 	.word	0x40010400

080027f4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <LL_EXTI_DisableIT_32_63+0x24>)
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	43db      	mvns	r3, r3
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <LL_EXTI_DisableIT_32_63+0x24>)
 8002806:	4013      	ands	r3, r2
 8002808:	620b      	str	r3, [r1, #32]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40010400 	.word	0x40010400

0800281c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4904      	ldr	r1, [pc, #16]	; (800283c <LL_EXTI_EnableEvent_0_31+0x20>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]

}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40010400 	.word	0x40010400

08002840 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800284a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <LL_EXTI_EnableEvent_32_63+0x20>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40010400 	.word	0x40010400

08002864 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <LL_EXTI_DisableEvent_0_31+0x24>)
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	43db      	mvns	r3, r3
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002876:	4013      	ands	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010400 	.word	0x40010400

0800288c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	43db      	mvns	r3, r3
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800289e:	4013      	ands	r3, r2
 80028a0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40010400 	.word	0x40010400

080028b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4904      	ldr	r1, [pc, #16]	; (80028d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]

}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	628b      	str	r3, [r1, #40]	; 0x28
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40010400 	.word	0x40010400

080028fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	43db      	mvns	r3, r3
 800290c:	4904      	ldr	r1, [pc, #16]	; (8002920 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800290e:	4013      	ands	r3, r2
 8002910:	608b      	str	r3, [r1, #8]

}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010400 	.word	0x40010400

08002924 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800292e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	43db      	mvns	r3, r3
 8002934:	4904      	ldr	r1, [pc, #16]	; (8002948 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002936:	4013      	ands	r3, r2
 8002938:	628b      	str	r3, [r1, #40]	; 0x28
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40010400 	.word	0x40010400

0800294c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4904      	ldr	r1, [pc, #16]	; (800296c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40010400 	.word	0x40010400

08002970 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4313      	orrs	r3, r2
 8002982:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40010400 	.word	0x40010400

08002994 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010400 	.word	0x40010400

080029bc <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4904      	ldr	r1, [pc, #16]	; (80029e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010400 	.word	0x40010400

080029e4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7a1b      	ldrb	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80cd 	beq.w	8002b94 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d061      	beq.n	8002ac6 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7a5b      	ldrb	r3, [r3, #9]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d01c      	beq.n	8002a44 <LL_EXTI_Init+0x60>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	dc25      	bgt.n	8002a5a <LL_EXTI_Init+0x76>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <LL_EXTI_Init+0x34>
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d00b      	beq.n	8002a2e <LL_EXTI_Init+0x4a>
 8002a16:	e020      	b.n	8002a5a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff21 	bl	8002864 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff feac 	bl	8002784 <LL_EXTI_EnableIT_0_31>
          break;
 8002a2c:	e018      	b.n	8002a60 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff feca 	bl	80027cc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff feed 	bl	800281c <LL_EXTI_EnableEvent_0_31>
          break;
 8002a42:	e00d      	b.n	8002a60 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fe9b 	bl	8002784 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fee2 	bl	800281c <LL_EXTI_EnableEvent_0_31>
          break;
 8002a58:	e002      	b.n	8002a60 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a5e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7a9b      	ldrb	r3, [r3, #10]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02e      	beq.n	8002ac6 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7a9b      	ldrb	r3, [r3, #10]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d01c      	beq.n	8002aaa <LL_EXTI_Init+0xc6>
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	dc25      	bgt.n	8002ac0 <LL_EXTI_Init+0xdc>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <LL_EXTI_Init+0x9a>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d00b      	beq.n	8002a94 <LL_EXTI_Init+0xb0>
 8002a7c:	e020      	b.n	8002ac0 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff86 	bl	8002994 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff11 	bl	80028b4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002a92:	e019      	b.n	8002ac8 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff2f 	bl	80028fc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff52 	bl	800294c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002aa8:	e00e      	b.n	8002ac8 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff00 	bl	80028b4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff47 	bl	800294c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002abe:	e003      	b.n	8002ac8 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
            break;
 8002ac4:	e000      	b.n	8002ac8 <LL_EXTI_Init+0xe4>
        }
      }
 8002ac6:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d076      	beq.n	8002bbe <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7a5b      	ldrb	r3, [r3, #9]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d01c      	beq.n	8002b12 <LL_EXTI_Init+0x12e>
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	dc25      	bgt.n	8002b28 <LL_EXTI_Init+0x144>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <LL_EXTI_Init+0x102>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d00b      	beq.n	8002afc <LL_EXTI_Init+0x118>
 8002ae4:	e020      	b.n	8002b28 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fece 	bl	800288c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fe57 	bl	80027a8 <LL_EXTI_EnableIT_32_63>
          break;
 8002afa:	e018      	b.n	8002b2e <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe77 	bl	80027f4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fe98 	bl	8002840 <LL_EXTI_EnableEvent_32_63>
          break;
 8002b10:	e00d      	b.n	8002b2e <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fe46 	bl	80027a8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe8d 	bl	8002840 <LL_EXTI_EnableEvent_32_63>
          break;
 8002b26:	e002      	b.n	8002b2e <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8002b2c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7a9b      	ldrb	r3, [r3, #10]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d043      	beq.n	8002bbe <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7a9b      	ldrb	r3, [r3, #10]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d01c      	beq.n	8002b78 <LL_EXTI_Init+0x194>
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	dc25      	bgt.n	8002b8e <LL_EXTI_Init+0x1aa>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <LL_EXTI_Init+0x168>
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d00b      	beq.n	8002b62 <LL_EXTI_Init+0x17e>
 8002b4a:	e020      	b.n	8002b8e <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff33 	bl	80029bc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff febc 	bl	80028d8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002b60:	e02e      	b.n	8002bc0 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fedc 	bl	8002924 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fefd 	bl	8002970 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002b76:	e023      	b.n	8002bc0 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff feab 	bl	80028d8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fef2 	bl	8002970 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002b8c:	e018      	b.n	8002bc0 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
            break;
 8002b92:	e015      	b.n	8002bc0 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fe17 	bl	80027cc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe5e 	bl	8002864 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe21 	bl	80027f4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fe68 	bl	800288c <LL_EXTI_DisableEvent_32_63>
 8002bbc:	e000      	b.n	8002bc0 <LL_EXTI_Init+0x1dc>
      }
 8002bbe:	bf00      	nop
#endif
  }
  return status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <LL_GPIO_SetPinMode>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b089      	sub	sp, #36	; 0x24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	613b      	str	r3, [r7, #16]
  return result;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	61bb      	str	r3, [r7, #24]
  return result;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	3724      	adds	r7, #36	; 0x24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_GPIO_SetPinOutputType>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	401a      	ands	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_GPIO_SetPinSpeed>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	613b      	str	r3, [r7, #16]
  return result;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2103      	movs	r1, #3
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  return result;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_GPIO_SetPinPull>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b089      	sub	sp, #36	; 0x24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	613b      	str	r3, [r7, #16]
  return result;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2103      	movs	r1, #3
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3724      	adds	r7, #36	; 0x24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_GPIO_SetAFPin_0_7>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	613b      	str	r3, [r7, #16]
  return result;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	61bb      	str	r3, [r7, #24]
  return result;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_GPIO_SetAFPin_8_15>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b089      	sub	sp, #36	; 0x24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	613b      	str	r3, [r7, #16]
  return result;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	61bb      	str	r3, [r7, #24]
  return result;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dc8:	bf00      	nop
 8002dca:	3724      	adds	r7, #36	; 0x24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	613b      	str	r3, [r7, #16]
  return result;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002df6:	e051      	b.n	8002e9c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d043      	beq.n	8002e96 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d003      	beq.n	8002e1e <LL_GPIO_Init+0x4a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d10e      	bne.n	8002e3c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	461a      	mov	r2, r3
 8002e24:	69b9      	ldr	r1, [r7, #24]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff16 	bl	8002c58 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fef6 	bl	8002c28 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	461a      	mov	r2, r3
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff36 	bl	8002cb6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d11a      	bne.n	8002e88 <LL_GPIO_Init+0xb4>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
  return result;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d807      	bhi.n	8002e7a <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff4e 	bl	8002d14 <LL_GPIO_SetAFPin_0_7>
 8002e78:	e006      	b.n	8002e88 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff75 	bl	8002d72 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fe9a 	bl	8002bca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1a6      	bne.n	8002df8 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <LL_I2C_Enable>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_I2C_Disable>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 0201 	bic.w	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_I2C_ConfigFilters>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0219      	lsls	r1, r3, #8
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_I2C_SetOwnAddress1>:
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f36:	f023 0307 	bic.w	r3, r3, #7
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_I2C_EnableOwnAddress1>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	609a      	str	r2, [r3, #8]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_I2C_DisableOwnAddress1>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_I2C_SetTiming>:
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	611a      	str	r2, [r3, #16]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_I2C_SetMode>:
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_I2C_AcknowledgeNextData>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff65 	bl	8002ed4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6899      	ldr	r1, [r3, #8]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff6d 	bl	8002ef4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffb6 	bl	8002f92 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff44 	bl	8002eb4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ffa0 	bl	8002f72 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6919      	ldr	r1, [r3, #16]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	461a      	mov	r2, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff70 	bl	8002f22 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff81 	bl	8002f52 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ffa9 	bl	8002fae <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffb6 	bl	8002fd4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <LL_TIM_SetPrescaler>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_TIM_SetAutoReload>:
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_TIM_SetRepetitionCounter>:
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	615a      	str	r2, [r3, #20]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <LL_TIM_Init+0xd0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <LL_TIM_Init+0x28>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d003      	beq.n	8003110 <LL_TIM_Init+0x28>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <LL_TIM_Init+0xd4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d106      	bne.n	800311e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a25      	ldr	r2, [pc, #148]	; (80031b8 <LL_TIM_Init+0xd0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <LL_TIM_Init+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d00f      	beq.n	800314e <LL_TIM_Init+0x66>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <LL_TIM_Init+0xd4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00b      	beq.n	800314e <LL_TIM_Init+0x66>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <LL_TIM_Init+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <LL_TIM_Init+0x66>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <LL_TIM_Init+0xdc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <LL_TIM_Init+0x66>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <LL_TIM_Init+0xe0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d106      	bne.n	800315c <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4619      	mov	r1, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff90 	bl	800308e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff7c 	bl	8003072 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <LL_TIM_Init+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00b      	beq.n	800319a <LL_TIM_Init+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0e      	ldr	r2, [pc, #56]	; (80031c0 <LL_TIM_Init+0xd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <LL_TIM_Init+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <LL_TIM_Init+0xdc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <LL_TIM_Init+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <LL_TIM_Init+0xe0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d105      	bne.n	80031a6 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff ff82 	bl	80030aa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff8d 	bl	80030c6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400
 80031c8:	40014800 	.word	0x40014800

080031cc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <LL_InitTick+0x30>)
 80031e0:	3b01      	subs	r3, #1
 80031e2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_InitTick+0x30>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <LL_InitTick+0x30>)
 80031ec:	2205      	movs	r2, #5
 80031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e010 	.word	0xe000e010

08003200 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ffdd 	bl	80031cc <LL_InitTick>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <LL_mDelay+0x48>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800322a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003232:	d00c      	beq.n	800324e <LL_mDelay+0x32>
  {
    Delay++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3301      	adds	r3, #1
 8003238:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800323a:	e008      	b.n	800324e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <LL_mDelay+0x48>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <LL_mDelay+0x32>
    {
      Delay--;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f3      	bne.n	800323c <LL_mDelay+0x20>
    }
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e010 	.word	0xe000e010

08003268 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <LL_SetSystemCoreClock+0x1c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000004 	.word	0x20000004

08003288 <__errno>:
 8003288:	4b01      	ldr	r3, [pc, #4]	; (8003290 <__errno+0x8>)
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000008 	.word	0x20000008

08003294 <__libc_init_array>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4d0d      	ldr	r5, [pc, #52]	; (80032cc <__libc_init_array+0x38>)
 8003298:	4c0d      	ldr	r4, [pc, #52]	; (80032d0 <__libc_init_array+0x3c>)
 800329a:	1b64      	subs	r4, r4, r5
 800329c:	10a4      	asrs	r4, r4, #2
 800329e:	2600      	movs	r6, #0
 80032a0:	42a6      	cmp	r6, r4
 80032a2:	d109      	bne.n	80032b8 <__libc_init_array+0x24>
 80032a4:	4d0b      	ldr	r5, [pc, #44]	; (80032d4 <__libc_init_array+0x40>)
 80032a6:	4c0c      	ldr	r4, [pc, #48]	; (80032d8 <__libc_init_array+0x44>)
 80032a8:	f003 fe68 	bl	8006f7c <_init>
 80032ac:	1b64      	subs	r4, r4, r5
 80032ae:	10a4      	asrs	r4, r4, #2
 80032b0:	2600      	movs	r6, #0
 80032b2:	42a6      	cmp	r6, r4
 80032b4:	d105      	bne.n	80032c2 <__libc_init_array+0x2e>
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
 80032b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032bc:	4798      	blx	r3
 80032be:	3601      	adds	r6, #1
 80032c0:	e7ee      	b.n	80032a0 <__libc_init_array+0xc>
 80032c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c6:	4798      	blx	r3
 80032c8:	3601      	adds	r6, #1
 80032ca:	e7f2      	b.n	80032b2 <__libc_init_array+0x1e>
 80032cc:	08007438 	.word	0x08007438
 80032d0:	08007438 	.word	0x08007438
 80032d4:	08007438 	.word	0x08007438
 80032d8:	0800743c 	.word	0x0800743c

080032dc <memset>:
 80032dc:	4402      	add	r2, r0
 80032de:	4603      	mov	r3, r0
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d100      	bne.n	80032e6 <memset+0xa>
 80032e4:	4770      	bx	lr
 80032e6:	f803 1b01 	strb.w	r1, [r3], #1
 80032ea:	e7f9      	b.n	80032e0 <memset+0x4>

080032ec <__cvt>:
 80032ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	ec55 4b10 	vmov	r4, r5, d0
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	460e      	mov	r6, r1
 80032f8:	4619      	mov	r1, r3
 80032fa:	462b      	mov	r3, r5
 80032fc:	bfbb      	ittet	lt
 80032fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003302:	461d      	movlt	r5, r3
 8003304:	2300      	movge	r3, #0
 8003306:	232d      	movlt	r3, #45	; 0x2d
 8003308:	700b      	strb	r3, [r1, #0]
 800330a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800330c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003310:	4691      	mov	r9, r2
 8003312:	f023 0820 	bic.w	r8, r3, #32
 8003316:	bfbc      	itt	lt
 8003318:	4622      	movlt	r2, r4
 800331a:	4614      	movlt	r4, r2
 800331c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003320:	d005      	beq.n	800332e <__cvt+0x42>
 8003322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003326:	d100      	bne.n	800332a <__cvt+0x3e>
 8003328:	3601      	adds	r6, #1
 800332a:	2102      	movs	r1, #2
 800332c:	e000      	b.n	8003330 <__cvt+0x44>
 800332e:	2103      	movs	r1, #3
 8003330:	ab03      	add	r3, sp, #12
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	ab02      	add	r3, sp, #8
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	ec45 4b10 	vmov	d0, r4, r5
 800333c:	4653      	mov	r3, sl
 800333e:	4632      	mov	r2, r6
 8003340:	f000 fcea 	bl	8003d18 <_dtoa_r>
 8003344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003348:	4607      	mov	r7, r0
 800334a:	d102      	bne.n	8003352 <__cvt+0x66>
 800334c:	f019 0f01 	tst.w	r9, #1
 8003350:	d022      	beq.n	8003398 <__cvt+0xac>
 8003352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003356:	eb07 0906 	add.w	r9, r7, r6
 800335a:	d110      	bne.n	800337e <__cvt+0x92>
 800335c:	783b      	ldrb	r3, [r7, #0]
 800335e:	2b30      	cmp	r3, #48	; 0x30
 8003360:	d10a      	bne.n	8003378 <__cvt+0x8c>
 8003362:	2200      	movs	r2, #0
 8003364:	2300      	movs	r3, #0
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	f7fd fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800336e:	b918      	cbnz	r0, 8003378 <__cvt+0x8c>
 8003370:	f1c6 0601 	rsb	r6, r6, #1
 8003374:	f8ca 6000 	str.w	r6, [sl]
 8003378:	f8da 3000 	ldr.w	r3, [sl]
 800337c:	4499      	add	r9, r3
 800337e:	2200      	movs	r2, #0
 8003380:	2300      	movs	r3, #0
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fd fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800338a:	b108      	cbz	r0, 8003390 <__cvt+0xa4>
 800338c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003390:	2230      	movs	r2, #48	; 0x30
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	454b      	cmp	r3, r9
 8003396:	d307      	bcc.n	80033a8 <__cvt+0xbc>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800339c:	1bdb      	subs	r3, r3, r7
 800339e:	4638      	mov	r0, r7
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	b004      	add	sp, #16
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a8:	1c59      	adds	r1, r3, #1
 80033aa:	9103      	str	r1, [sp, #12]
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e7f0      	b.n	8003392 <__cvt+0xa6>

080033b0 <__exponent>:
 80033b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b2:	4603      	mov	r3, r0
 80033b4:	2900      	cmp	r1, #0
 80033b6:	bfb8      	it	lt
 80033b8:	4249      	neglt	r1, r1
 80033ba:	f803 2b02 	strb.w	r2, [r3], #2
 80033be:	bfb4      	ite	lt
 80033c0:	222d      	movlt	r2, #45	; 0x2d
 80033c2:	222b      	movge	r2, #43	; 0x2b
 80033c4:	2909      	cmp	r1, #9
 80033c6:	7042      	strb	r2, [r0, #1]
 80033c8:	dd2a      	ble.n	8003420 <__exponent+0x70>
 80033ca:	f10d 0407 	add.w	r4, sp, #7
 80033ce:	46a4      	mov	ip, r4
 80033d0:	270a      	movs	r7, #10
 80033d2:	46a6      	mov	lr, r4
 80033d4:	460a      	mov	r2, r1
 80033d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80033da:	fb07 1516 	mls	r5, r7, r6, r1
 80033de:	3530      	adds	r5, #48	; 0x30
 80033e0:	2a63      	cmp	r2, #99	; 0x63
 80033e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80033e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80033ea:	4631      	mov	r1, r6
 80033ec:	dcf1      	bgt.n	80033d2 <__exponent+0x22>
 80033ee:	3130      	adds	r1, #48	; 0x30
 80033f0:	f1ae 0502 	sub.w	r5, lr, #2
 80033f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80033f8:	1c44      	adds	r4, r0, #1
 80033fa:	4629      	mov	r1, r5
 80033fc:	4561      	cmp	r1, ip
 80033fe:	d30a      	bcc.n	8003416 <__exponent+0x66>
 8003400:	f10d 0209 	add.w	r2, sp, #9
 8003404:	eba2 020e 	sub.w	r2, r2, lr
 8003408:	4565      	cmp	r5, ip
 800340a:	bf88      	it	hi
 800340c:	2200      	movhi	r2, #0
 800340e:	4413      	add	r3, r2
 8003410:	1a18      	subs	r0, r3, r0
 8003412:	b003      	add	sp, #12
 8003414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800341e:	e7ed      	b.n	80033fc <__exponent+0x4c>
 8003420:	2330      	movs	r3, #48	; 0x30
 8003422:	3130      	adds	r1, #48	; 0x30
 8003424:	7083      	strb	r3, [r0, #2]
 8003426:	70c1      	strb	r1, [r0, #3]
 8003428:	1d03      	adds	r3, r0, #4
 800342a:	e7f1      	b.n	8003410 <__exponent+0x60>

0800342c <_printf_float>:
 800342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	ed2d 8b02 	vpush	{d8}
 8003434:	b08d      	sub	sp, #52	; 0x34
 8003436:	460c      	mov	r4, r1
 8003438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800343c:	4616      	mov	r6, r2
 800343e:	461f      	mov	r7, r3
 8003440:	4605      	mov	r5, r0
 8003442:	f001 fa55 	bl	80048f0 <_localeconv_r>
 8003446:	f8d0 a000 	ldr.w	sl, [r0]
 800344a:	4650      	mov	r0, sl
 800344c:	f7fc fec0 	bl	80001d0 <strlen>
 8003450:	2300      	movs	r3, #0
 8003452:	930a      	str	r3, [sp, #40]	; 0x28
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	9305      	str	r3, [sp, #20]
 8003458:	f8d8 3000 	ldr.w	r3, [r8]
 800345c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	f103 0208 	add.w	r2, r3, #8
 800346a:	f8c8 2000 	str.w	r2, [r8]
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800347a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800347e:	9307      	str	r3, [sp, #28]
 8003480:	f8cd 8018 	str.w	r8, [sp, #24]
 8003484:	ee08 0a10 	vmov	s16, r0
 8003488:	4b9f      	ldr	r3, [pc, #636]	; (8003708 <_printf_float+0x2dc>)
 800348a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	f7fd fb4b 	bl	8000b2c <__aeabi_dcmpun>
 8003496:	bb88      	cbnz	r0, 80034fc <_printf_float+0xd0>
 8003498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800349c:	4b9a      	ldr	r3, [pc, #616]	; (8003708 <_printf_float+0x2dc>)
 800349e:	f04f 32ff 	mov.w	r2, #4294967295
 80034a2:	f7fd fb25 	bl	8000af0 <__aeabi_dcmple>
 80034a6:	bb48      	cbnz	r0, 80034fc <_printf_float+0xd0>
 80034a8:	2200      	movs	r2, #0
 80034aa:	2300      	movs	r3, #0
 80034ac:	4640      	mov	r0, r8
 80034ae:	4649      	mov	r1, r9
 80034b0:	f7fd fb14 	bl	8000adc <__aeabi_dcmplt>
 80034b4:	b110      	cbz	r0, 80034bc <_printf_float+0x90>
 80034b6:	232d      	movs	r3, #45	; 0x2d
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034bc:	4b93      	ldr	r3, [pc, #588]	; (800370c <_printf_float+0x2e0>)
 80034be:	4894      	ldr	r0, [pc, #592]	; (8003710 <_printf_float+0x2e4>)
 80034c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80034c4:	bf94      	ite	ls
 80034c6:	4698      	movls	r8, r3
 80034c8:	4680      	movhi	r8, r0
 80034ca:	2303      	movs	r3, #3
 80034cc:	6123      	str	r3, [r4, #16]
 80034ce:	9b05      	ldr	r3, [sp, #20]
 80034d0:	f023 0204 	bic.w	r2, r3, #4
 80034d4:	6022      	str	r2, [r4, #0]
 80034d6:	f04f 0900 	mov.w	r9, #0
 80034da:	9700      	str	r7, [sp, #0]
 80034dc:	4633      	mov	r3, r6
 80034de:	aa0b      	add	r2, sp, #44	; 0x2c
 80034e0:	4621      	mov	r1, r4
 80034e2:	4628      	mov	r0, r5
 80034e4:	f000 f9d8 	bl	8003898 <_printf_common>
 80034e8:	3001      	adds	r0, #1
 80034ea:	f040 8090 	bne.w	800360e <_printf_float+0x1e2>
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295
 80034f2:	b00d      	add	sp, #52	; 0x34
 80034f4:	ecbd 8b02 	vpop	{d8}
 80034f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	f7fd fb12 	bl	8000b2c <__aeabi_dcmpun>
 8003508:	b140      	cbz	r0, 800351c <_printf_float+0xf0>
 800350a:	464b      	mov	r3, r9
 800350c:	2b00      	cmp	r3, #0
 800350e:	bfbc      	itt	lt
 8003510:	232d      	movlt	r3, #45	; 0x2d
 8003512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003516:	487f      	ldr	r0, [pc, #508]	; (8003714 <_printf_float+0x2e8>)
 8003518:	4b7f      	ldr	r3, [pc, #508]	; (8003718 <_printf_float+0x2ec>)
 800351a:	e7d1      	b.n	80034c0 <_printf_float+0x94>
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003522:	9206      	str	r2, [sp, #24]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	d13f      	bne.n	80035a8 <_printf_float+0x17c>
 8003528:	2306      	movs	r3, #6
 800352a:	6063      	str	r3, [r4, #4]
 800352c:	9b05      	ldr	r3, [sp, #20]
 800352e:	6861      	ldr	r1, [r4, #4]
 8003530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	ab0a      	add	r3, sp, #40	; 0x28
 800353a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800353e:	ab09      	add	r3, sp, #36	; 0x24
 8003540:	ec49 8b10 	vmov	d0, r8, r9
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	6022      	str	r2, [r4, #0]
 8003548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800354c:	4628      	mov	r0, r5
 800354e:	f7ff fecd 	bl	80032ec <__cvt>
 8003552:	9b06      	ldr	r3, [sp, #24]
 8003554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003556:	2b47      	cmp	r3, #71	; 0x47
 8003558:	4680      	mov	r8, r0
 800355a:	d108      	bne.n	800356e <_printf_float+0x142>
 800355c:	1cc8      	adds	r0, r1, #3
 800355e:	db02      	blt.n	8003566 <_printf_float+0x13a>
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	4299      	cmp	r1, r3
 8003564:	dd41      	ble.n	80035ea <_printf_float+0x1be>
 8003566:	f1ab 0b02 	sub.w	fp, fp, #2
 800356a:	fa5f fb8b 	uxtb.w	fp, fp
 800356e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003572:	d820      	bhi.n	80035b6 <_printf_float+0x18a>
 8003574:	3901      	subs	r1, #1
 8003576:	465a      	mov	r2, fp
 8003578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800357c:	9109      	str	r1, [sp, #36]	; 0x24
 800357e:	f7ff ff17 	bl	80033b0 <__exponent>
 8003582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003584:	1813      	adds	r3, r2, r0
 8003586:	2a01      	cmp	r2, #1
 8003588:	4681      	mov	r9, r0
 800358a:	6123      	str	r3, [r4, #16]
 800358c:	dc02      	bgt.n	8003594 <_printf_float+0x168>
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	07d2      	lsls	r2, r2, #31
 8003592:	d501      	bpl.n	8003598 <_printf_float+0x16c>
 8003594:	3301      	adds	r3, #1
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800359c:	2b00      	cmp	r3, #0
 800359e:	d09c      	beq.n	80034da <_printf_float+0xae>
 80035a0:	232d      	movs	r3, #45	; 0x2d
 80035a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a6:	e798      	b.n	80034da <_printf_float+0xae>
 80035a8:	9a06      	ldr	r2, [sp, #24]
 80035aa:	2a47      	cmp	r2, #71	; 0x47
 80035ac:	d1be      	bne.n	800352c <_printf_float+0x100>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1bc      	bne.n	800352c <_printf_float+0x100>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e7b9      	b.n	800352a <_printf_float+0xfe>
 80035b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80035ba:	d118      	bne.n	80035ee <_printf_float+0x1c2>
 80035bc:	2900      	cmp	r1, #0
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	dd0b      	ble.n	80035da <_printf_float+0x1ae>
 80035c2:	6121      	str	r1, [r4, #16]
 80035c4:	b913      	cbnz	r3, 80035cc <_printf_float+0x1a0>
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	07d0      	lsls	r0, r2, #31
 80035ca:	d502      	bpl.n	80035d2 <_printf_float+0x1a6>
 80035cc:	3301      	adds	r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	6123      	str	r3, [r4, #16]
 80035d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80035d4:	f04f 0900 	mov.w	r9, #0
 80035d8:	e7de      	b.n	8003598 <_printf_float+0x16c>
 80035da:	b913      	cbnz	r3, 80035e2 <_printf_float+0x1b6>
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	07d2      	lsls	r2, r2, #31
 80035e0:	d501      	bpl.n	80035e6 <_printf_float+0x1ba>
 80035e2:	3302      	adds	r3, #2
 80035e4:	e7f4      	b.n	80035d0 <_printf_float+0x1a4>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e7f2      	b.n	80035d0 <_printf_float+0x1a4>
 80035ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80035ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035f0:	4299      	cmp	r1, r3
 80035f2:	db05      	blt.n	8003600 <_printf_float+0x1d4>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	6121      	str	r1, [r4, #16]
 80035f8:	07d8      	lsls	r0, r3, #31
 80035fa:	d5ea      	bpl.n	80035d2 <_printf_float+0x1a6>
 80035fc:	1c4b      	adds	r3, r1, #1
 80035fe:	e7e7      	b.n	80035d0 <_printf_float+0x1a4>
 8003600:	2900      	cmp	r1, #0
 8003602:	bfd4      	ite	le
 8003604:	f1c1 0202 	rsble	r2, r1, #2
 8003608:	2201      	movgt	r2, #1
 800360a:	4413      	add	r3, r2
 800360c:	e7e0      	b.n	80035d0 <_printf_float+0x1a4>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	055a      	lsls	r2, r3, #21
 8003612:	d407      	bmi.n	8003624 <_printf_float+0x1f8>
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	4642      	mov	r2, r8
 8003618:	4631      	mov	r1, r6
 800361a:	4628      	mov	r0, r5
 800361c:	47b8      	blx	r7
 800361e:	3001      	adds	r0, #1
 8003620:	d12c      	bne.n	800367c <_printf_float+0x250>
 8003622:	e764      	b.n	80034ee <_printf_float+0xc2>
 8003624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003628:	f240 80e0 	bls.w	80037ec <_printf_float+0x3c0>
 800362c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003630:	2200      	movs	r2, #0
 8003632:	2300      	movs	r3, #0
 8003634:	f7fd fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8003638:	2800      	cmp	r0, #0
 800363a:	d034      	beq.n	80036a6 <_printf_float+0x27a>
 800363c:	4a37      	ldr	r2, [pc, #220]	; (800371c <_printf_float+0x2f0>)
 800363e:	2301      	movs	r3, #1
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	f43f af51 	beq.w	80034ee <_printf_float+0xc2>
 800364c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003650:	429a      	cmp	r2, r3
 8003652:	db02      	blt.n	800365a <_printf_float+0x22e>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	07d8      	lsls	r0, r3, #31
 8003658:	d510      	bpl.n	800367c <_printf_float+0x250>
 800365a:	ee18 3a10 	vmov	r3, s16
 800365e:	4652      	mov	r2, sl
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	f43f af41 	beq.w	80034ee <_printf_float+0xc2>
 800366c:	f04f 0800 	mov.w	r8, #0
 8003670:	f104 091a 	add.w	r9, r4, #26
 8003674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	4543      	cmp	r3, r8
 800367a:	dc09      	bgt.n	8003690 <_printf_float+0x264>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	079b      	lsls	r3, r3, #30
 8003680:	f100 8105 	bmi.w	800388e <_printf_float+0x462>
 8003684:	68e0      	ldr	r0, [r4, #12]
 8003686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003688:	4298      	cmp	r0, r3
 800368a:	bfb8      	it	lt
 800368c:	4618      	movlt	r0, r3
 800368e:	e730      	b.n	80034f2 <_printf_float+0xc6>
 8003690:	2301      	movs	r3, #1
 8003692:	464a      	mov	r2, r9
 8003694:	4631      	mov	r1, r6
 8003696:	4628      	mov	r0, r5
 8003698:	47b8      	blx	r7
 800369a:	3001      	adds	r0, #1
 800369c:	f43f af27 	beq.w	80034ee <_printf_float+0xc2>
 80036a0:	f108 0801 	add.w	r8, r8, #1
 80036a4:	e7e6      	b.n	8003674 <_printf_float+0x248>
 80036a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dc39      	bgt.n	8003720 <_printf_float+0x2f4>
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <_printf_float+0x2f0>)
 80036ae:	2301      	movs	r3, #1
 80036b0:	4631      	mov	r1, r6
 80036b2:	4628      	mov	r0, r5
 80036b4:	47b8      	blx	r7
 80036b6:	3001      	adds	r0, #1
 80036b8:	f43f af19 	beq.w	80034ee <_printf_float+0xc2>
 80036bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d102      	bne.n	80036ca <_printf_float+0x29e>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	07d9      	lsls	r1, r3, #31
 80036c8:	d5d8      	bpl.n	800367c <_printf_float+0x250>
 80036ca:	ee18 3a10 	vmov	r3, s16
 80036ce:	4652      	mov	r2, sl
 80036d0:	4631      	mov	r1, r6
 80036d2:	4628      	mov	r0, r5
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f af09 	beq.w	80034ee <_printf_float+0xc2>
 80036dc:	f04f 0900 	mov.w	r9, #0
 80036e0:	f104 0a1a 	add.w	sl, r4, #26
 80036e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e6:	425b      	negs	r3, r3
 80036e8:	454b      	cmp	r3, r9
 80036ea:	dc01      	bgt.n	80036f0 <_printf_float+0x2c4>
 80036ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ee:	e792      	b.n	8003616 <_printf_float+0x1ea>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4652      	mov	r2, sl
 80036f4:	4631      	mov	r1, r6
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b8      	blx	r7
 80036fa:	3001      	adds	r0, #1
 80036fc:	f43f aef7 	beq.w	80034ee <_printf_float+0xc2>
 8003700:	f109 0901 	add.w	r9, r9, #1
 8003704:	e7ee      	b.n	80036e4 <_printf_float+0x2b8>
 8003706:	bf00      	nop
 8003708:	7fefffff 	.word	0x7fefffff
 800370c:	08007018 	.word	0x08007018
 8003710:	0800701c 	.word	0x0800701c
 8003714:	08007024 	.word	0x08007024
 8003718:	08007020 	.word	0x08007020
 800371c:	08007028 	.word	0x08007028
 8003720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003724:	429a      	cmp	r2, r3
 8003726:	bfa8      	it	ge
 8003728:	461a      	movge	r2, r3
 800372a:	2a00      	cmp	r2, #0
 800372c:	4691      	mov	r9, r2
 800372e:	dc37      	bgt.n	80037a0 <_printf_float+0x374>
 8003730:	f04f 0b00 	mov.w	fp, #0
 8003734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003738:	f104 021a 	add.w	r2, r4, #26
 800373c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800373e:	9305      	str	r3, [sp, #20]
 8003740:	eba3 0309 	sub.w	r3, r3, r9
 8003744:	455b      	cmp	r3, fp
 8003746:	dc33      	bgt.n	80037b0 <_printf_float+0x384>
 8003748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800374c:	429a      	cmp	r2, r3
 800374e:	db3b      	blt.n	80037c8 <_printf_float+0x39c>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	07da      	lsls	r2, r3, #31
 8003754:	d438      	bmi.n	80037c8 <_printf_float+0x39c>
 8003756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003758:	9b05      	ldr	r3, [sp, #20]
 800375a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	eba2 0901 	sub.w	r9, r2, r1
 8003762:	4599      	cmp	r9, r3
 8003764:	bfa8      	it	ge
 8003766:	4699      	movge	r9, r3
 8003768:	f1b9 0f00 	cmp.w	r9, #0
 800376c:	dc35      	bgt.n	80037da <_printf_float+0x3ae>
 800376e:	f04f 0800 	mov.w	r8, #0
 8003772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003776:	f104 0a1a 	add.w	sl, r4, #26
 800377a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	eba3 0309 	sub.w	r3, r3, r9
 8003784:	4543      	cmp	r3, r8
 8003786:	f77f af79 	ble.w	800367c <_printf_float+0x250>
 800378a:	2301      	movs	r3, #1
 800378c:	4652      	mov	r2, sl
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	47b8      	blx	r7
 8003794:	3001      	adds	r0, #1
 8003796:	f43f aeaa 	beq.w	80034ee <_printf_float+0xc2>
 800379a:	f108 0801 	add.w	r8, r8, #1
 800379e:	e7ec      	b.n	800377a <_printf_float+0x34e>
 80037a0:	4613      	mov	r3, r2
 80037a2:	4631      	mov	r1, r6
 80037a4:	4642      	mov	r2, r8
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	d1c0      	bne.n	8003730 <_printf_float+0x304>
 80037ae:	e69e      	b.n	80034ee <_printf_float+0xc2>
 80037b0:	2301      	movs	r3, #1
 80037b2:	4631      	mov	r1, r6
 80037b4:	4628      	mov	r0, r5
 80037b6:	9205      	str	r2, [sp, #20]
 80037b8:	47b8      	blx	r7
 80037ba:	3001      	adds	r0, #1
 80037bc:	f43f ae97 	beq.w	80034ee <_printf_float+0xc2>
 80037c0:	9a05      	ldr	r2, [sp, #20]
 80037c2:	f10b 0b01 	add.w	fp, fp, #1
 80037c6:	e7b9      	b.n	800373c <_printf_float+0x310>
 80037c8:	ee18 3a10 	vmov	r3, s16
 80037cc:	4652      	mov	r2, sl
 80037ce:	4631      	mov	r1, r6
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b8      	blx	r7
 80037d4:	3001      	adds	r0, #1
 80037d6:	d1be      	bne.n	8003756 <_printf_float+0x32a>
 80037d8:	e689      	b.n	80034ee <_printf_float+0xc2>
 80037da:	9a05      	ldr	r2, [sp, #20]
 80037dc:	464b      	mov	r3, r9
 80037de:	4442      	add	r2, r8
 80037e0:	4631      	mov	r1, r6
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b8      	blx	r7
 80037e6:	3001      	adds	r0, #1
 80037e8:	d1c1      	bne.n	800376e <_printf_float+0x342>
 80037ea:	e680      	b.n	80034ee <_printf_float+0xc2>
 80037ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ee:	2a01      	cmp	r2, #1
 80037f0:	dc01      	bgt.n	80037f6 <_printf_float+0x3ca>
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d538      	bpl.n	8003868 <_printf_float+0x43c>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4642      	mov	r2, r8
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	47b8      	blx	r7
 8003800:	3001      	adds	r0, #1
 8003802:	f43f ae74 	beq.w	80034ee <_printf_float+0xc2>
 8003806:	ee18 3a10 	vmov	r3, s16
 800380a:	4652      	mov	r2, sl
 800380c:	4631      	mov	r1, r6
 800380e:	4628      	mov	r0, r5
 8003810:	47b8      	blx	r7
 8003812:	3001      	adds	r0, #1
 8003814:	f43f ae6b 	beq.w	80034ee <_printf_float+0xc2>
 8003818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800381c:	2200      	movs	r2, #0
 800381e:	2300      	movs	r3, #0
 8003820:	f7fd f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8003824:	b9d8      	cbnz	r0, 800385e <_printf_float+0x432>
 8003826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003828:	f108 0201 	add.w	r2, r8, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	4631      	mov	r1, r6
 8003830:	4628      	mov	r0, r5
 8003832:	47b8      	blx	r7
 8003834:	3001      	adds	r0, #1
 8003836:	d10e      	bne.n	8003856 <_printf_float+0x42a>
 8003838:	e659      	b.n	80034ee <_printf_float+0xc2>
 800383a:	2301      	movs	r3, #1
 800383c:	4652      	mov	r2, sl
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	f43f ae52 	beq.w	80034ee <_printf_float+0xc2>
 800384a:	f108 0801 	add.w	r8, r8, #1
 800384e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	4543      	cmp	r3, r8
 8003854:	dcf1      	bgt.n	800383a <_printf_float+0x40e>
 8003856:	464b      	mov	r3, r9
 8003858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800385c:	e6dc      	b.n	8003618 <_printf_float+0x1ec>
 800385e:	f04f 0800 	mov.w	r8, #0
 8003862:	f104 0a1a 	add.w	sl, r4, #26
 8003866:	e7f2      	b.n	800384e <_printf_float+0x422>
 8003868:	2301      	movs	r3, #1
 800386a:	4642      	mov	r2, r8
 800386c:	e7df      	b.n	800382e <_printf_float+0x402>
 800386e:	2301      	movs	r3, #1
 8003870:	464a      	mov	r2, r9
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	f43f ae38 	beq.w	80034ee <_printf_float+0xc2>
 800387e:	f108 0801 	add.w	r8, r8, #1
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003886:	1a5b      	subs	r3, r3, r1
 8003888:	4543      	cmp	r3, r8
 800388a:	dcf0      	bgt.n	800386e <_printf_float+0x442>
 800388c:	e6fa      	b.n	8003684 <_printf_float+0x258>
 800388e:	f04f 0800 	mov.w	r8, #0
 8003892:	f104 0919 	add.w	r9, r4, #25
 8003896:	e7f4      	b.n	8003882 <_printf_float+0x456>

08003898 <_printf_common>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	4616      	mov	r6, r2
 800389e:	4699      	mov	r9, r3
 80038a0:	688a      	ldr	r2, [r1, #8]
 80038a2:	690b      	ldr	r3, [r1, #16]
 80038a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfb8      	it	lt
 80038ac:	4613      	movlt	r3, r2
 80038ae:	6033      	str	r3, [r6, #0]
 80038b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b4:	4607      	mov	r7, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b10a      	cbz	r2, 80038be <_printf_common+0x26>
 80038ba:	3301      	adds	r3, #1
 80038bc:	6033      	str	r3, [r6, #0]
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	0699      	lsls	r1, r3, #26
 80038c2:	bf42      	ittt	mi
 80038c4:	6833      	ldrmi	r3, [r6, #0]
 80038c6:	3302      	addmi	r3, #2
 80038c8:	6033      	strmi	r3, [r6, #0]
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	f015 0506 	ands.w	r5, r5, #6
 80038d0:	d106      	bne.n	80038e0 <_printf_common+0x48>
 80038d2:	f104 0a19 	add.w	sl, r4, #25
 80038d6:	68e3      	ldr	r3, [r4, #12]
 80038d8:	6832      	ldr	r2, [r6, #0]
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	42ab      	cmp	r3, r5
 80038de:	dc26      	bgt.n	800392e <_printf_common+0x96>
 80038e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e4:	1e13      	subs	r3, r2, #0
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	bf18      	it	ne
 80038ea:	2301      	movne	r3, #1
 80038ec:	0692      	lsls	r2, r2, #26
 80038ee:	d42b      	bmi.n	8003948 <_printf_common+0xb0>
 80038f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f4:	4649      	mov	r1, r9
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d01e      	beq.n	800393c <_printf_common+0xa4>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	68e5      	ldr	r5, [r4, #12]
 8003902:	6832      	ldr	r2, [r6, #0]
 8003904:	f003 0306 	and.w	r3, r3, #6
 8003908:	2b04      	cmp	r3, #4
 800390a:	bf08      	it	eq
 800390c:	1aad      	subeq	r5, r5, r2
 800390e:	68a3      	ldr	r3, [r4, #8]
 8003910:	6922      	ldr	r2, [r4, #16]
 8003912:	bf0c      	ite	eq
 8003914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003918:	2500      	movne	r5, #0
 800391a:	4293      	cmp	r3, r2
 800391c:	bfc4      	itt	gt
 800391e:	1a9b      	subgt	r3, r3, r2
 8003920:	18ed      	addgt	r5, r5, r3
 8003922:	2600      	movs	r6, #0
 8003924:	341a      	adds	r4, #26
 8003926:	42b5      	cmp	r5, r6
 8003928:	d11a      	bne.n	8003960 <_printf_common+0xc8>
 800392a:	2000      	movs	r0, #0
 800392c:	e008      	b.n	8003940 <_printf_common+0xa8>
 800392e:	2301      	movs	r3, #1
 8003930:	4652      	mov	r2, sl
 8003932:	4649      	mov	r1, r9
 8003934:	4638      	mov	r0, r7
 8003936:	47c0      	blx	r8
 8003938:	3001      	adds	r0, #1
 800393a:	d103      	bne.n	8003944 <_printf_common+0xac>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	3501      	adds	r5, #1
 8003946:	e7c6      	b.n	80038d6 <_printf_common+0x3e>
 8003948:	18e1      	adds	r1, r4, r3
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	2030      	movs	r0, #48	; 0x30
 800394e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003952:	4422      	add	r2, r4
 8003954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800395c:	3302      	adds	r3, #2
 800395e:	e7c7      	b.n	80038f0 <_printf_common+0x58>
 8003960:	2301      	movs	r3, #1
 8003962:	4622      	mov	r2, r4
 8003964:	4649      	mov	r1, r9
 8003966:	4638      	mov	r0, r7
 8003968:	47c0      	blx	r8
 800396a:	3001      	adds	r0, #1
 800396c:	d0e6      	beq.n	800393c <_printf_common+0xa4>
 800396e:	3601      	adds	r6, #1
 8003970:	e7d9      	b.n	8003926 <_printf_common+0x8e>
	...

08003974 <_printf_i>:
 8003974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003978:	460c      	mov	r4, r1
 800397a:	4691      	mov	r9, r2
 800397c:	7e27      	ldrb	r7, [r4, #24]
 800397e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003980:	2f78      	cmp	r7, #120	; 0x78
 8003982:	4680      	mov	r8, r0
 8003984:	469a      	mov	sl, r3
 8003986:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800398a:	d807      	bhi.n	800399c <_printf_i+0x28>
 800398c:	2f62      	cmp	r7, #98	; 0x62
 800398e:	d80a      	bhi.n	80039a6 <_printf_i+0x32>
 8003990:	2f00      	cmp	r7, #0
 8003992:	f000 80d8 	beq.w	8003b46 <_printf_i+0x1d2>
 8003996:	2f58      	cmp	r7, #88	; 0x58
 8003998:	f000 80a3 	beq.w	8003ae2 <_printf_i+0x16e>
 800399c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a4:	e03a      	b.n	8003a1c <_printf_i+0xa8>
 80039a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039aa:	2b15      	cmp	r3, #21
 80039ac:	d8f6      	bhi.n	800399c <_printf_i+0x28>
 80039ae:	a001      	add	r0, pc, #4	; (adr r0, 80039b4 <_printf_i+0x40>)
 80039b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80039b4:	08003a0d 	.word	0x08003a0d
 80039b8:	08003a21 	.word	0x08003a21
 80039bc:	0800399d 	.word	0x0800399d
 80039c0:	0800399d 	.word	0x0800399d
 80039c4:	0800399d 	.word	0x0800399d
 80039c8:	0800399d 	.word	0x0800399d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800399d 	.word	0x0800399d
 80039d4:	0800399d 	.word	0x0800399d
 80039d8:	0800399d 	.word	0x0800399d
 80039dc:	0800399d 	.word	0x0800399d
 80039e0:	08003b2d 	.word	0x08003b2d
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003b0f 	.word	0x08003b0f
 80039ec:	0800399d 	.word	0x0800399d
 80039f0:	0800399d 	.word	0x0800399d
 80039f4:	08003b4f 	.word	0x08003b4f
 80039f8:	0800399d 	.word	0x0800399d
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	0800399d 	.word	0x0800399d
 8003a04:	0800399d 	.word	0x0800399d
 8003a08:	08003b17 	.word	0x08003b17
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	1d1a      	adds	r2, r3, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	600a      	str	r2, [r1, #0]
 8003a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0a3      	b.n	8003b68 <_printf_i+0x1f4>
 8003a20:	6825      	ldr	r5, [r4, #0]
 8003a22:	6808      	ldr	r0, [r1, #0]
 8003a24:	062e      	lsls	r6, r5, #24
 8003a26:	f100 0304 	add.w	r3, r0, #4
 8003a2a:	d50a      	bpl.n	8003a42 <_printf_i+0xce>
 8003a2c:	6805      	ldr	r5, [r0, #0]
 8003a2e:	600b      	str	r3, [r1, #0]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xc8>
 8003a34:	232d      	movs	r3, #45	; 0x2d
 8003a36:	426d      	negs	r5, r5
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a3c:	485e      	ldr	r0, [pc, #376]	; (8003bb8 <_printf_i+0x244>)
 8003a3e:	230a      	movs	r3, #10
 8003a40:	e019      	b.n	8003a76 <_printf_i+0x102>
 8003a42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a46:	6805      	ldr	r5, [r0, #0]
 8003a48:	600b      	str	r3, [r1, #0]
 8003a4a:	bf18      	it	ne
 8003a4c:	b22d      	sxthne	r5, r5
 8003a4e:	e7ef      	b.n	8003a30 <_printf_i+0xbc>
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	6825      	ldr	r5, [r4, #0]
 8003a54:	1d18      	adds	r0, r3, #4
 8003a56:	6008      	str	r0, [r1, #0]
 8003a58:	0628      	lsls	r0, r5, #24
 8003a5a:	d501      	bpl.n	8003a60 <_printf_i+0xec>
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <_printf_i+0xf2>
 8003a60:	0669      	lsls	r1, r5, #25
 8003a62:	d5fb      	bpl.n	8003a5c <_printf_i+0xe8>
 8003a64:	881d      	ldrh	r5, [r3, #0]
 8003a66:	4854      	ldr	r0, [pc, #336]	; (8003bb8 <_printf_i+0x244>)
 8003a68:	2f6f      	cmp	r7, #111	; 0x6f
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2308      	moveq	r3, #8
 8003a6e:	230a      	movne	r3, #10
 8003a70:	2100      	movs	r1, #0
 8003a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a76:	6866      	ldr	r6, [r4, #4]
 8003a78:	60a6      	str	r6, [r4, #8]
 8003a7a:	2e00      	cmp	r6, #0
 8003a7c:	bfa2      	ittt	ge
 8003a7e:	6821      	ldrge	r1, [r4, #0]
 8003a80:	f021 0104 	bicge.w	r1, r1, #4
 8003a84:	6021      	strge	r1, [r4, #0]
 8003a86:	b90d      	cbnz	r5, 8003a8c <_printf_i+0x118>
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d04d      	beq.n	8003b28 <_printf_i+0x1b4>
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a92:	fb03 5711 	mls	r7, r3, r1, r5
 8003a96:	5dc7      	ldrb	r7, [r0, r7]
 8003a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a9c:	462f      	mov	r7, r5
 8003a9e:	42bb      	cmp	r3, r7
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	d9f4      	bls.n	8003a8e <_printf_i+0x11a>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d10b      	bne.n	8003ac0 <_printf_i+0x14c>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	07df      	lsls	r7, r3, #31
 8003aac:	d508      	bpl.n	8003ac0 <_printf_i+0x14c>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	bfde      	ittt	le
 8003ab6:	2330      	movle	r3, #48	; 0x30
 8003ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ac0:	1b92      	subs	r2, r2, r6
 8003ac2:	6122      	str	r2, [r4, #16]
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	464b      	mov	r3, r9
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff fee2 	bl	8003898 <_printf_common>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d14c      	bne.n	8003b72 <_printf_i+0x1fe>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	b004      	add	sp, #16
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	4835      	ldr	r0, [pc, #212]	; (8003bb8 <_printf_i+0x244>)
 8003ae4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	680e      	ldr	r6, [r1, #0]
 8003aec:	061f      	lsls	r7, r3, #24
 8003aee:	f856 5b04 	ldr.w	r5, [r6], #4
 8003af2:	600e      	str	r6, [r1, #0]
 8003af4:	d514      	bpl.n	8003b20 <_printf_i+0x1ac>
 8003af6:	07d9      	lsls	r1, r3, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f043 0320 	orrmi.w	r3, r3, #32
 8003afe:	6023      	strmi	r3, [r4, #0]
 8003b00:	b91d      	cbnz	r5, 8003b0a <_printf_i+0x196>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	f023 0320 	bic.w	r3, r3, #32
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	e7b0      	b.n	8003a70 <_printf_i+0xfc>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f043 0320 	orr.w	r3, r3, #32
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	2378      	movs	r3, #120	; 0x78
 8003b18:	4828      	ldr	r0, [pc, #160]	; (8003bbc <_printf_i+0x248>)
 8003b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b1e:	e7e3      	b.n	8003ae8 <_printf_i+0x174>
 8003b20:	065e      	lsls	r6, r3, #25
 8003b22:	bf48      	it	mi
 8003b24:	b2ad      	uxthmi	r5, r5
 8003b26:	e7e6      	b.n	8003af6 <_printf_i+0x182>
 8003b28:	4616      	mov	r6, r2
 8003b2a:	e7bb      	b.n	8003aa4 <_printf_i+0x130>
 8003b2c:	680b      	ldr	r3, [r1, #0]
 8003b2e:	6826      	ldr	r6, [r4, #0]
 8003b30:	6960      	ldr	r0, [r4, #20]
 8003b32:	1d1d      	adds	r5, r3, #4
 8003b34:	600d      	str	r5, [r1, #0]
 8003b36:	0635      	lsls	r5, r6, #24
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	d501      	bpl.n	8003b40 <_printf_i+0x1cc>
 8003b3c:	6018      	str	r0, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <_printf_i+0x1d2>
 8003b40:	0671      	lsls	r1, r6, #25
 8003b42:	d5fb      	bpl.n	8003b3c <_printf_i+0x1c8>
 8003b44:	8018      	strh	r0, [r3, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	6123      	str	r3, [r4, #16]
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	e7ba      	b.n	8003ac4 <_printf_i+0x150>
 8003b4e:	680b      	ldr	r3, [r1, #0]
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	600a      	str	r2, [r1, #0]
 8003b54:	681e      	ldr	r6, [r3, #0]
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7fc fb40 	bl	80001e0 <memchr>
 8003b60:	b108      	cbz	r0, 8003b66 <_printf_i+0x1f2>
 8003b62:	1b80      	subs	r0, r0, r6
 8003b64:	6060      	str	r0, [r4, #4]
 8003b66:	6863      	ldr	r3, [r4, #4]
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b70:	e7a8      	b.n	8003ac4 <_printf_i+0x150>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	4632      	mov	r2, r6
 8003b76:	4649      	mov	r1, r9
 8003b78:	4640      	mov	r0, r8
 8003b7a:	47d0      	blx	sl
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ab      	beq.n	8003ad8 <_printf_i+0x164>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d413      	bmi.n	8003bae <_printf_i+0x23a>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	bfb8      	it	lt
 8003b8e:	4618      	movlt	r0, r3
 8003b90:	e7a4      	b.n	8003adc <_printf_i+0x168>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4632      	mov	r2, r6
 8003b96:	4649      	mov	r1, r9
 8003b98:	4640      	mov	r0, r8
 8003b9a:	47d0      	blx	sl
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d09b      	beq.n	8003ad8 <_printf_i+0x164>
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	9903      	ldr	r1, [sp, #12]
 8003ba6:	1a5b      	subs	r3, r3, r1
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dcf2      	bgt.n	8003b92 <_printf_i+0x21e>
 8003bac:	e7eb      	b.n	8003b86 <_printf_i+0x212>
 8003bae:	2500      	movs	r5, #0
 8003bb0:	f104 0619 	add.w	r6, r4, #25
 8003bb4:	e7f5      	b.n	8003ba2 <_printf_i+0x22e>
 8003bb6:	bf00      	nop
 8003bb8:	0800702a 	.word	0x0800702a
 8003bbc:	0800703b 	.word	0x0800703b

08003bc0 <siprintf>:
 8003bc0:	b40e      	push	{r1, r2, r3}
 8003bc2:	b500      	push	{lr}
 8003bc4:	b09c      	sub	sp, #112	; 0x70
 8003bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bc8:	9002      	str	r0, [sp, #8]
 8003bca:	9006      	str	r0, [sp, #24]
 8003bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd0:	4809      	ldr	r0, [pc, #36]	; (8003bf8 <siprintf+0x38>)
 8003bd2:	9107      	str	r1, [sp, #28]
 8003bd4:	9104      	str	r1, [sp, #16]
 8003bd6:	4909      	ldr	r1, [pc, #36]	; (8003bfc <siprintf+0x3c>)
 8003bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	a902      	add	r1, sp, #8
 8003be4:	f001 fb32 	bl	800524c <_svfiprintf_r>
 8003be8:	9b02      	ldr	r3, [sp, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	b01c      	add	sp, #112	; 0x70
 8003bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf4:	b003      	add	sp, #12
 8003bf6:	4770      	bx	lr
 8003bf8:	20000008 	.word	0x20000008
 8003bfc:	ffff0208 	.word	0xffff0208

08003c00 <quorem>:
 8003c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	6903      	ldr	r3, [r0, #16]
 8003c06:	690c      	ldr	r4, [r1, #16]
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	f2c0 8081 	blt.w	8003d12 <quorem+0x112>
 8003c10:	3c01      	subs	r4, #1
 8003c12:	f101 0814 	add.w	r8, r1, #20
 8003c16:	f100 0514 	add.w	r5, r0, #20
 8003c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c34:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c38:	d331      	bcc.n	8003c9e <quorem+0x9e>
 8003c3a:	f04f 0e00 	mov.w	lr, #0
 8003c3e:	4640      	mov	r0, r8
 8003c40:	46ac      	mov	ip, r5
 8003c42:	46f2      	mov	sl, lr
 8003c44:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c48:	b293      	uxth	r3, r2
 8003c4a:	fb06 e303 	mla	r3, r6, r3, lr
 8003c4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	ebaa 0303 	sub.w	r3, sl, r3
 8003c58:	0c12      	lsrs	r2, r2, #16
 8003c5a:	f8dc a000 	ldr.w	sl, [ip]
 8003c5e:	fb06 e202 	mla	r2, r6, r2, lr
 8003c62:	fa13 f38a 	uxtah	r3, r3, sl
 8003c66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c6a:	fa1f fa82 	uxth.w	sl, r2
 8003c6e:	f8dc 2000 	ldr.w	r2, [ip]
 8003c72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003c76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c80:	4581      	cmp	r9, r0
 8003c82:	f84c 3b04 	str.w	r3, [ip], #4
 8003c86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c8a:	d2db      	bcs.n	8003c44 <quorem+0x44>
 8003c8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c90:	b92b      	cbnz	r3, 8003c9e <quorem+0x9e>
 8003c92:	9b01      	ldr	r3, [sp, #4]
 8003c94:	3b04      	subs	r3, #4
 8003c96:	429d      	cmp	r5, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	d32e      	bcc.n	8003cfa <quorem+0xfa>
 8003c9c:	613c      	str	r4, [r7, #16]
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f001 f8be 	bl	8004e20 <__mcmp>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	db24      	blt.n	8003cf2 <quorem+0xf2>
 8003ca8:	3601      	adds	r6, #1
 8003caa:	4628      	mov	r0, r5
 8003cac:	f04f 0c00 	mov.w	ip, #0
 8003cb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cb4:	f8d0 e000 	ldr.w	lr, [r0]
 8003cb8:	b293      	uxth	r3, r2
 8003cba:	ebac 0303 	sub.w	r3, ip, r3
 8003cbe:	0c12      	lsrs	r2, r2, #16
 8003cc0:	fa13 f38e 	uxtah	r3, r3, lr
 8003cc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cd2:	45c1      	cmp	r9, r8
 8003cd4:	f840 3b04 	str.w	r3, [r0], #4
 8003cd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003cdc:	d2e8      	bcs.n	8003cb0 <quorem+0xb0>
 8003cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ce6:	b922      	cbnz	r2, 8003cf2 <quorem+0xf2>
 8003ce8:	3b04      	subs	r3, #4
 8003cea:	429d      	cmp	r5, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	d30a      	bcc.n	8003d06 <quorem+0x106>
 8003cf0:	613c      	str	r4, [r7, #16]
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	b003      	add	sp, #12
 8003cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	d1cc      	bne.n	8003c9c <quorem+0x9c>
 8003d02:	3c01      	subs	r4, #1
 8003d04:	e7c7      	b.n	8003c96 <quorem+0x96>
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	3b04      	subs	r3, #4
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <quorem+0xf0>
 8003d0e:	3c01      	subs	r4, #1
 8003d10:	e7eb      	b.n	8003cea <quorem+0xea>
 8003d12:	2000      	movs	r0, #0
 8003d14:	e7ee      	b.n	8003cf4 <quorem+0xf4>
	...

08003d18 <_dtoa_r>:
 8003d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1c:	ed2d 8b02 	vpush	{d8}
 8003d20:	ec57 6b10 	vmov	r6, r7, d0
 8003d24:	b095      	sub	sp, #84	; 0x54
 8003d26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003d2c:	9105      	str	r1, [sp, #20]
 8003d2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003d32:	4604      	mov	r4, r0
 8003d34:	9209      	str	r2, [sp, #36]	; 0x24
 8003d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d38:	b975      	cbnz	r5, 8003d58 <_dtoa_r+0x40>
 8003d3a:	2010      	movs	r0, #16
 8003d3c:	f000 fddc 	bl	80048f8 <malloc>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6260      	str	r0, [r4, #36]	; 0x24
 8003d44:	b920      	cbnz	r0, 8003d50 <_dtoa_r+0x38>
 8003d46:	4bb2      	ldr	r3, [pc, #712]	; (8004010 <_dtoa_r+0x2f8>)
 8003d48:	21ea      	movs	r1, #234	; 0xea
 8003d4a:	48b2      	ldr	r0, [pc, #712]	; (8004014 <_dtoa_r+0x2fc>)
 8003d4c:	f001 fb8e 	bl	800546c <__assert_func>
 8003d50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d54:	6005      	str	r5, [r0, #0]
 8003d56:	60c5      	str	r5, [r0, #12]
 8003d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	b151      	cbz	r1, 8003d74 <_dtoa_r+0x5c>
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	604a      	str	r2, [r1, #4]
 8003d62:	2301      	movs	r3, #1
 8003d64:	4093      	lsls	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f000 fe1b 	bl	80049a4 <_Bfree>
 8003d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	1e3b      	subs	r3, r7, #0
 8003d76:	bfb9      	ittee	lt
 8003d78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d7c:	9303      	strlt	r3, [sp, #12]
 8003d7e:	2300      	movge	r3, #0
 8003d80:	f8c8 3000 	strge.w	r3, [r8]
 8003d84:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d88:	4ba3      	ldr	r3, [pc, #652]	; (8004018 <_dtoa_r+0x300>)
 8003d8a:	bfbc      	itt	lt
 8003d8c:	2201      	movlt	r2, #1
 8003d8e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d92:	ea33 0309 	bics.w	r3, r3, r9
 8003d96:	d11b      	bne.n	8003dd0 <_dtoa_r+0xb8>
 8003d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003da4:	4333      	orrs	r3, r6
 8003da6:	f000 857a 	beq.w	800489e <_dtoa_r+0xb86>
 8003daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dac:	b963      	cbnz	r3, 8003dc8 <_dtoa_r+0xb0>
 8003dae:	4b9b      	ldr	r3, [pc, #620]	; (800401c <_dtoa_r+0x304>)
 8003db0:	e024      	b.n	8003dfc <_dtoa_r+0xe4>
 8003db2:	4b9b      	ldr	r3, [pc, #620]	; (8004020 <_dtoa_r+0x308>)
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	3308      	adds	r3, #8
 8003db8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	9800      	ldr	r0, [sp, #0]
 8003dbe:	b015      	add	sp, #84	; 0x54
 8003dc0:	ecbd 8b02 	vpop	{d8}
 8003dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc8:	4b94      	ldr	r3, [pc, #592]	; (800401c <_dtoa_r+0x304>)
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	3303      	adds	r3, #3
 8003dce:	e7f3      	b.n	8003db8 <_dtoa_r+0xa0>
 8003dd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	ec51 0b17 	vmov	r0, r1, d7
 8003dda:	2300      	movs	r3, #0
 8003ddc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003de0:	f7fc fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8003de4:	4680      	mov	r8, r0
 8003de6:	b158      	cbz	r0, 8003e00 <_dtoa_r+0xe8>
 8003de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003dea:	2301      	movs	r3, #1
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8551 	beq.w	8004898 <_dtoa_r+0xb80>
 8003df6:	488b      	ldr	r0, [pc, #556]	; (8004024 <_dtoa_r+0x30c>)
 8003df8:	6018      	str	r0, [r3, #0]
 8003dfa:	1e43      	subs	r3, r0, #1
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	e7dd      	b.n	8003dbc <_dtoa_r+0xa4>
 8003e00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003e04:	aa12      	add	r2, sp, #72	; 0x48
 8003e06:	a913      	add	r1, sp, #76	; 0x4c
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f001 f8ad 	bl	8004f68 <__d2b>
 8003e0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003e12:	4683      	mov	fp, r0
 8003e14:	2d00      	cmp	r5, #0
 8003e16:	d07c      	beq.n	8003f12 <_dtoa_r+0x1fa>
 8003e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003e26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003e2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003e32:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <_dtoa_r+0x310>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	f7fc fa25 	bl	8000288 <__aeabi_dsub>
 8003e3e:	a36e      	add	r3, pc, #440	; (adr r3, 8003ff8 <_dtoa_r+0x2e0>)
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f7fc fbd8 	bl	80005f8 <__aeabi_dmul>
 8003e48:	a36d      	add	r3, pc, #436	; (adr r3, 8004000 <_dtoa_r+0x2e8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fa1d 	bl	800028c <__adddf3>
 8003e52:	4606      	mov	r6, r0
 8003e54:	4628      	mov	r0, r5
 8003e56:	460f      	mov	r7, r1
 8003e58:	f7fc fb64 	bl	8000524 <__aeabi_i2d>
 8003e5c:	a36a      	add	r3, pc, #424	; (adr r3, 8004008 <_dtoa_r+0x2f0>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f7fc fbc9 	bl	80005f8 <__aeabi_dmul>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	f7fc fa0d 	bl	800028c <__adddf3>
 8003e72:	4606      	mov	r6, r0
 8003e74:	460f      	mov	r7, r1
 8003e76:	f7fc fe6f 	bl	8000b58 <__aeabi_d2iz>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4682      	mov	sl, r0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	4630      	mov	r0, r6
 8003e82:	4639      	mov	r1, r7
 8003e84:	f7fc fe2a 	bl	8000adc <__aeabi_dcmplt>
 8003e88:	b148      	cbz	r0, 8003e9e <_dtoa_r+0x186>
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	f7fc fb4a 	bl	8000524 <__aeabi_i2d>
 8003e90:	4632      	mov	r2, r6
 8003e92:	463b      	mov	r3, r7
 8003e94:	f7fc fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e98:	b908      	cbnz	r0, 8003e9e <_dtoa_r+0x186>
 8003e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e9e:	f1ba 0f16 	cmp.w	sl, #22
 8003ea2:	d854      	bhi.n	8003f4e <_dtoa_r+0x236>
 8003ea4:	4b61      	ldr	r3, [pc, #388]	; (800402c <_dtoa_r+0x314>)
 8003ea6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003eb2:	f7fc fe13 	bl	8000adc <__aeabi_dcmplt>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d04b      	beq.n	8003f52 <_dtoa_r+0x23a>
 8003eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ec4:	1b5d      	subs	r5, r3, r5
 8003ec6:	1e6b      	subs	r3, r5, #1
 8003ec8:	9304      	str	r3, [sp, #16]
 8003eca:	bf43      	ittte	mi
 8003ecc:	2300      	movmi	r3, #0
 8003ece:	f1c5 0801 	rsbmi	r8, r5, #1
 8003ed2:	9304      	strmi	r3, [sp, #16]
 8003ed4:	f04f 0800 	movpl.w	r8, #0
 8003ed8:	f1ba 0f00 	cmp.w	sl, #0
 8003edc:	db3b      	blt.n	8003f56 <_dtoa_r+0x23e>
 8003ede:	9b04      	ldr	r3, [sp, #16]
 8003ee0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003ee4:	4453      	add	r3, sl
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9306      	str	r3, [sp, #24]
 8003eec:	9b05      	ldr	r3, [sp, #20]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d869      	bhi.n	8003fc6 <_dtoa_r+0x2ae>
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	bfc4      	itt	gt
 8003ef6:	3b04      	subgt	r3, #4
 8003ef8:	9305      	strgt	r3, [sp, #20]
 8003efa:	9b05      	ldr	r3, [sp, #20]
 8003efc:	f1a3 0302 	sub.w	r3, r3, #2
 8003f00:	bfcc      	ite	gt
 8003f02:	2500      	movgt	r5, #0
 8003f04:	2501      	movle	r5, #1
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d869      	bhi.n	8003fde <_dtoa_r+0x2c6>
 8003f0a:	e8df f003 	tbb	[pc, r3]
 8003f0e:	4e2c      	.short	0x4e2c
 8003f10:	5a4c      	.short	0x5a4c
 8003f12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003f16:	441d      	add	r5, r3
 8003f18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	bfc1      	itttt	gt
 8003f20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003f24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003f28:	fa09 f303 	lslgt.w	r3, r9, r3
 8003f2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003f30:	bfda      	itte	le
 8003f32:	f1c3 0320 	rsble	r3, r3, #32
 8003f36:	fa06 f003 	lslle.w	r0, r6, r3
 8003f3a:	4318      	orrgt	r0, r3
 8003f3c:	f7fc fae2 	bl	8000504 <__aeabi_ui2d>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4606      	mov	r6, r0
 8003f44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003f48:	3d01      	subs	r5, #1
 8003f4a:	9310      	str	r3, [sp, #64]	; 0x40
 8003f4c:	e771      	b.n	8003e32 <_dtoa_r+0x11a>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e7b6      	b.n	8003ec0 <_dtoa_r+0x1a8>
 8003f52:	900e      	str	r0, [sp, #56]	; 0x38
 8003f54:	e7b5      	b.n	8003ec2 <_dtoa_r+0x1aa>
 8003f56:	f1ca 0300 	rsb	r3, sl, #0
 8003f5a:	9306      	str	r3, [sp, #24]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	eba8 080a 	sub.w	r8, r8, sl
 8003f62:	930d      	str	r3, [sp, #52]	; 0x34
 8003f64:	e7c2      	b.n	8003eec <_dtoa_r+0x1d4>
 8003f66:	2300      	movs	r3, #0
 8003f68:	9308      	str	r3, [sp, #32]
 8003f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dc39      	bgt.n	8003fe4 <_dtoa_r+0x2cc>
 8003f70:	f04f 0901 	mov.w	r9, #1
 8003f74:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f78:	464b      	mov	r3, r9
 8003f7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f80:	2200      	movs	r2, #0
 8003f82:	6042      	str	r2, [r0, #4]
 8003f84:	2204      	movs	r2, #4
 8003f86:	f102 0614 	add.w	r6, r2, #20
 8003f8a:	429e      	cmp	r6, r3
 8003f8c:	6841      	ldr	r1, [r0, #4]
 8003f8e:	d92f      	bls.n	8003ff0 <_dtoa_r+0x2d8>
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fcc7 	bl	8004924 <_Balloc>
 8003f96:	9000      	str	r0, [sp, #0]
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d14b      	bne.n	8004034 <_dtoa_r+0x31c>
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <_dtoa_r+0x318>)
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003fa4:	e6d1      	b.n	8003d4a <_dtoa_r+0x32>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e7de      	b.n	8003f68 <_dtoa_r+0x250>
 8003faa:	2300      	movs	r3, #0
 8003fac:	9308      	str	r3, [sp, #32]
 8003fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb0:	eb0a 0903 	add.w	r9, sl, r3
 8003fb4:	f109 0301 	add.w	r3, r9, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	bfb8      	it	lt
 8003fbe:	2301      	movlt	r3, #1
 8003fc0:	e7dd      	b.n	8003f7e <_dtoa_r+0x266>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e7f2      	b.n	8003fac <_dtoa_r+0x294>
 8003fc6:	2501      	movs	r5, #1
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9305      	str	r3, [sp, #20]
 8003fcc:	9508      	str	r5, [sp, #32]
 8003fce:	f04f 39ff 	mov.w	r9, #4294967295
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003fd8:	2312      	movs	r3, #18
 8003fda:	9209      	str	r2, [sp, #36]	; 0x24
 8003fdc:	e7cf      	b.n	8003f7e <_dtoa_r+0x266>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9308      	str	r3, [sp, #32]
 8003fe2:	e7f4      	b.n	8003fce <_dtoa_r+0x2b6>
 8003fe4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003fe8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003fec:	464b      	mov	r3, r9
 8003fee:	e7c6      	b.n	8003f7e <_dtoa_r+0x266>
 8003ff0:	3101      	adds	r1, #1
 8003ff2:	6041      	str	r1, [r0, #4]
 8003ff4:	0052      	lsls	r2, r2, #1
 8003ff6:	e7c6      	b.n	8003f86 <_dtoa_r+0x26e>
 8003ff8:	636f4361 	.word	0x636f4361
 8003ffc:	3fd287a7 	.word	0x3fd287a7
 8004000:	8b60c8b3 	.word	0x8b60c8b3
 8004004:	3fc68a28 	.word	0x3fc68a28
 8004008:	509f79fb 	.word	0x509f79fb
 800400c:	3fd34413 	.word	0x3fd34413
 8004010:	08007059 	.word	0x08007059
 8004014:	08007070 	.word	0x08007070
 8004018:	7ff00000 	.word	0x7ff00000
 800401c:	08007055 	.word	0x08007055
 8004020:	0800704c 	.word	0x0800704c
 8004024:	08007029 	.word	0x08007029
 8004028:	3ff80000 	.word	0x3ff80000
 800402c:	08007168 	.word	0x08007168
 8004030:	080070cf 	.word	0x080070cf
 8004034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004036:	9a00      	ldr	r2, [sp, #0]
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	2b0e      	cmp	r3, #14
 800403e:	f200 80ad 	bhi.w	800419c <_dtoa_r+0x484>
 8004042:	2d00      	cmp	r5, #0
 8004044:	f000 80aa 	beq.w	800419c <_dtoa_r+0x484>
 8004048:	f1ba 0f00 	cmp.w	sl, #0
 800404c:	dd36      	ble.n	80040bc <_dtoa_r+0x3a4>
 800404e:	4ac3      	ldr	r2, [pc, #780]	; (800435c <_dtoa_r+0x644>)
 8004050:	f00a 030f 	and.w	r3, sl, #15
 8004054:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004058:	ed93 7b00 	vldr	d7, [r3]
 800405c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004060:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004064:	eeb0 8a47 	vmov.f32	s16, s14
 8004068:	eef0 8a67 	vmov.f32	s17, s15
 800406c:	d016      	beq.n	800409c <_dtoa_r+0x384>
 800406e:	4bbc      	ldr	r3, [pc, #752]	; (8004360 <_dtoa_r+0x648>)
 8004070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004078:	f7fc fbe8 	bl	800084c <__aeabi_ddiv>
 800407c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004080:	f007 070f 	and.w	r7, r7, #15
 8004084:	2503      	movs	r5, #3
 8004086:	4eb6      	ldr	r6, [pc, #728]	; (8004360 <_dtoa_r+0x648>)
 8004088:	b957      	cbnz	r7, 80040a0 <_dtoa_r+0x388>
 800408a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800408e:	ec53 2b18 	vmov	r2, r3, d8
 8004092:	f7fc fbdb 	bl	800084c <__aeabi_ddiv>
 8004096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800409a:	e029      	b.n	80040f0 <_dtoa_r+0x3d8>
 800409c:	2502      	movs	r5, #2
 800409e:	e7f2      	b.n	8004086 <_dtoa_r+0x36e>
 80040a0:	07f9      	lsls	r1, r7, #31
 80040a2:	d508      	bpl.n	80040b6 <_dtoa_r+0x39e>
 80040a4:	ec51 0b18 	vmov	r0, r1, d8
 80040a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040ac:	f7fc faa4 	bl	80005f8 <__aeabi_dmul>
 80040b0:	ec41 0b18 	vmov	d8, r0, r1
 80040b4:	3501      	adds	r5, #1
 80040b6:	107f      	asrs	r7, r7, #1
 80040b8:	3608      	adds	r6, #8
 80040ba:	e7e5      	b.n	8004088 <_dtoa_r+0x370>
 80040bc:	f000 80a6 	beq.w	800420c <_dtoa_r+0x4f4>
 80040c0:	f1ca 0600 	rsb	r6, sl, #0
 80040c4:	4ba5      	ldr	r3, [pc, #660]	; (800435c <_dtoa_r+0x644>)
 80040c6:	4fa6      	ldr	r7, [pc, #664]	; (8004360 <_dtoa_r+0x648>)
 80040c8:	f006 020f 	and.w	r2, r6, #15
 80040cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040d8:	f7fc fa8e 	bl	80005f8 <__aeabi_dmul>
 80040dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040e0:	1136      	asrs	r6, r6, #4
 80040e2:	2300      	movs	r3, #0
 80040e4:	2502      	movs	r5, #2
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	f040 8085 	bne.w	80041f6 <_dtoa_r+0x4de>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1d2      	bne.n	8004096 <_dtoa_r+0x37e>
 80040f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 808c 	beq.w	8004210 <_dtoa_r+0x4f8>
 80040f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040fc:	4b99      	ldr	r3, [pc, #612]	; (8004364 <_dtoa_r+0x64c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fcea 	bl	8000adc <__aeabi_dcmplt>
 8004108:	2800      	cmp	r0, #0
 800410a:	f000 8081 	beq.w	8004210 <_dtoa_r+0x4f8>
 800410e:	9b01      	ldr	r3, [sp, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d07d      	beq.n	8004210 <_dtoa_r+0x4f8>
 8004114:	f1b9 0f00 	cmp.w	r9, #0
 8004118:	dd3c      	ble.n	8004194 <_dtoa_r+0x47c>
 800411a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800411e:	9307      	str	r3, [sp, #28]
 8004120:	2200      	movs	r2, #0
 8004122:	4b91      	ldr	r3, [pc, #580]	; (8004368 <_dtoa_r+0x650>)
 8004124:	4630      	mov	r0, r6
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc fa66 	bl	80005f8 <__aeabi_dmul>
 800412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004130:	3501      	adds	r5, #1
 8004132:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004136:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800413a:	4628      	mov	r0, r5
 800413c:	f7fc f9f2 	bl	8000524 <__aeabi_i2d>
 8004140:	4632      	mov	r2, r6
 8004142:	463b      	mov	r3, r7
 8004144:	f7fc fa58 	bl	80005f8 <__aeabi_dmul>
 8004148:	4b88      	ldr	r3, [pc, #544]	; (800436c <_dtoa_r+0x654>)
 800414a:	2200      	movs	r2, #0
 800414c:	f7fc f89e 	bl	800028c <__adddf3>
 8004150:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800415c:	2b00      	cmp	r3, #0
 800415e:	d15c      	bne.n	800421a <_dtoa_r+0x502>
 8004160:	4b83      	ldr	r3, [pc, #524]	; (8004370 <_dtoa_r+0x658>)
 8004162:	2200      	movs	r2, #0
 8004164:	4630      	mov	r0, r6
 8004166:	4639      	mov	r1, r7
 8004168:	f7fc f88e 	bl	8000288 <__aeabi_dsub>
 800416c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004170:	4606      	mov	r6, r0
 8004172:	460f      	mov	r7, r1
 8004174:	f7fc fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 8004178:	2800      	cmp	r0, #0
 800417a:	f040 8296 	bne.w	80046aa <_dtoa_r+0x992>
 800417e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004182:	4630      	mov	r0, r6
 8004184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004188:	4639      	mov	r1, r7
 800418a:	f7fc fca7 	bl	8000adc <__aeabi_dcmplt>
 800418e:	2800      	cmp	r0, #0
 8004190:	f040 8288 	bne.w	80046a4 <_dtoa_r+0x98c>
 8004194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800419c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f2c0 8158 	blt.w	8004454 <_dtoa_r+0x73c>
 80041a4:	f1ba 0f0e 	cmp.w	sl, #14
 80041a8:	f300 8154 	bgt.w	8004454 <_dtoa_r+0x73c>
 80041ac:	4b6b      	ldr	r3, [pc, #428]	; (800435c <_dtoa_r+0x644>)
 80041ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80041b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f280 80e3 	bge.w	8004384 <_dtoa_r+0x66c>
 80041be:	9b01      	ldr	r3, [sp, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f300 80df 	bgt.w	8004384 <_dtoa_r+0x66c>
 80041c6:	f040 826d 	bne.w	80046a4 <_dtoa_r+0x98c>
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <_dtoa_r+0x658>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	4640      	mov	r0, r8
 80041d0:	4649      	mov	r1, r9
 80041d2:	f7fc fa11 	bl	80005f8 <__aeabi_dmul>
 80041d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041da:	f7fc fc93 	bl	8000b04 <__aeabi_dcmpge>
 80041de:	9e01      	ldr	r6, [sp, #4]
 80041e0:	4637      	mov	r7, r6
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f040 8243 	bne.w	800466e <_dtoa_r+0x956>
 80041e8:	9d00      	ldr	r5, [sp, #0]
 80041ea:	2331      	movs	r3, #49	; 0x31
 80041ec:	f805 3b01 	strb.w	r3, [r5], #1
 80041f0:	f10a 0a01 	add.w	sl, sl, #1
 80041f4:	e23f      	b.n	8004676 <_dtoa_r+0x95e>
 80041f6:	07f2      	lsls	r2, r6, #31
 80041f8:	d505      	bpl.n	8004206 <_dtoa_r+0x4ee>
 80041fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fe:	f7fc f9fb 	bl	80005f8 <__aeabi_dmul>
 8004202:	3501      	adds	r5, #1
 8004204:	2301      	movs	r3, #1
 8004206:	1076      	asrs	r6, r6, #1
 8004208:	3708      	adds	r7, #8
 800420a:	e76c      	b.n	80040e6 <_dtoa_r+0x3ce>
 800420c:	2502      	movs	r5, #2
 800420e:	e76f      	b.n	80040f0 <_dtoa_r+0x3d8>
 8004210:	9b01      	ldr	r3, [sp, #4]
 8004212:	f8cd a01c 	str.w	sl, [sp, #28]
 8004216:	930c      	str	r3, [sp, #48]	; 0x30
 8004218:	e78d      	b.n	8004136 <_dtoa_r+0x41e>
 800421a:	9900      	ldr	r1, [sp, #0]
 800421c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800421e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004220:	4b4e      	ldr	r3, [pc, #312]	; (800435c <_dtoa_r+0x644>)
 8004222:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004226:	4401      	add	r1, r0
 8004228:	9102      	str	r1, [sp, #8]
 800422a:	9908      	ldr	r1, [sp, #32]
 800422c:	eeb0 8a47 	vmov.f32	s16, s14
 8004230:	eef0 8a67 	vmov.f32	s17, s15
 8004234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004238:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800423c:	2900      	cmp	r1, #0
 800423e:	d045      	beq.n	80042cc <_dtoa_r+0x5b4>
 8004240:	494c      	ldr	r1, [pc, #304]	; (8004374 <_dtoa_r+0x65c>)
 8004242:	2000      	movs	r0, #0
 8004244:	f7fc fb02 	bl	800084c <__aeabi_ddiv>
 8004248:	ec53 2b18 	vmov	r2, r3, d8
 800424c:	f7fc f81c 	bl	8000288 <__aeabi_dsub>
 8004250:	9d00      	ldr	r5, [sp, #0]
 8004252:	ec41 0b18 	vmov	d8, r0, r1
 8004256:	4639      	mov	r1, r7
 8004258:	4630      	mov	r0, r6
 800425a:	f7fc fc7d 	bl	8000b58 <__aeabi_d2iz>
 800425e:	900c      	str	r0, [sp, #48]	; 0x30
 8004260:	f7fc f960 	bl	8000524 <__aeabi_i2d>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4630      	mov	r0, r6
 800426a:	4639      	mov	r1, r7
 800426c:	f7fc f80c 	bl	8000288 <__aeabi_dsub>
 8004270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004272:	3330      	adds	r3, #48	; 0x30
 8004274:	f805 3b01 	strb.w	r3, [r5], #1
 8004278:	ec53 2b18 	vmov	r2, r3, d8
 800427c:	4606      	mov	r6, r0
 800427e:	460f      	mov	r7, r1
 8004280:	f7fc fc2c 	bl	8000adc <__aeabi_dcmplt>
 8004284:	2800      	cmp	r0, #0
 8004286:	d165      	bne.n	8004354 <_dtoa_r+0x63c>
 8004288:	4632      	mov	r2, r6
 800428a:	463b      	mov	r3, r7
 800428c:	4935      	ldr	r1, [pc, #212]	; (8004364 <_dtoa_r+0x64c>)
 800428e:	2000      	movs	r0, #0
 8004290:	f7fb fffa 	bl	8000288 <__aeabi_dsub>
 8004294:	ec53 2b18 	vmov	r2, r3, d8
 8004298:	f7fc fc20 	bl	8000adc <__aeabi_dcmplt>
 800429c:	2800      	cmp	r0, #0
 800429e:	f040 80b9 	bne.w	8004414 <_dtoa_r+0x6fc>
 80042a2:	9b02      	ldr	r3, [sp, #8]
 80042a4:	429d      	cmp	r5, r3
 80042a6:	f43f af75 	beq.w	8004194 <_dtoa_r+0x47c>
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <_dtoa_r+0x650>)
 80042ac:	ec51 0b18 	vmov	r0, r1, d8
 80042b0:	2200      	movs	r2, #0
 80042b2:	f7fc f9a1 	bl	80005f8 <__aeabi_dmul>
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <_dtoa_r+0x650>)
 80042b8:	ec41 0b18 	vmov	d8, r0, r1
 80042bc:	2200      	movs	r2, #0
 80042be:	4630      	mov	r0, r6
 80042c0:	4639      	mov	r1, r7
 80042c2:	f7fc f999 	bl	80005f8 <__aeabi_dmul>
 80042c6:	4606      	mov	r6, r0
 80042c8:	460f      	mov	r7, r1
 80042ca:	e7c4      	b.n	8004256 <_dtoa_r+0x53e>
 80042cc:	ec51 0b17 	vmov	r0, r1, d7
 80042d0:	f7fc f992 	bl	80005f8 <__aeabi_dmul>
 80042d4:	9b02      	ldr	r3, [sp, #8]
 80042d6:	9d00      	ldr	r5, [sp, #0]
 80042d8:	930c      	str	r3, [sp, #48]	; 0x30
 80042da:	ec41 0b18 	vmov	d8, r0, r1
 80042de:	4639      	mov	r1, r7
 80042e0:	4630      	mov	r0, r6
 80042e2:	f7fc fc39 	bl	8000b58 <__aeabi_d2iz>
 80042e6:	9011      	str	r0, [sp, #68]	; 0x44
 80042e8:	f7fc f91c 	bl	8000524 <__aeabi_i2d>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4630      	mov	r0, r6
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fb ffc8 	bl	8000288 <__aeabi_dsub>
 80042f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042fa:	3330      	adds	r3, #48	; 0x30
 80042fc:	f805 3b01 	strb.w	r3, [r5], #1
 8004300:	9b02      	ldr	r3, [sp, #8]
 8004302:	429d      	cmp	r5, r3
 8004304:	4606      	mov	r6, r0
 8004306:	460f      	mov	r7, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	d134      	bne.n	8004378 <_dtoa_r+0x660>
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <_dtoa_r+0x65c>)
 8004310:	ec51 0b18 	vmov	r0, r1, d8
 8004314:	f7fb ffba 	bl	800028c <__adddf3>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4630      	mov	r0, r6
 800431e:	4639      	mov	r1, r7
 8004320:	f7fc fbfa 	bl	8000b18 <__aeabi_dcmpgt>
 8004324:	2800      	cmp	r0, #0
 8004326:	d175      	bne.n	8004414 <_dtoa_r+0x6fc>
 8004328:	ec53 2b18 	vmov	r2, r3, d8
 800432c:	4911      	ldr	r1, [pc, #68]	; (8004374 <_dtoa_r+0x65c>)
 800432e:	2000      	movs	r0, #0
 8004330:	f7fb ffaa 	bl	8000288 <__aeabi_dsub>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fc fbce 	bl	8000adc <__aeabi_dcmplt>
 8004340:	2800      	cmp	r0, #0
 8004342:	f43f af27 	beq.w	8004194 <_dtoa_r+0x47c>
 8004346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004348:	1e6b      	subs	r3, r5, #1
 800434a:	930c      	str	r3, [sp, #48]	; 0x30
 800434c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004350:	2b30      	cmp	r3, #48	; 0x30
 8004352:	d0f8      	beq.n	8004346 <_dtoa_r+0x62e>
 8004354:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004358:	e04a      	b.n	80043f0 <_dtoa_r+0x6d8>
 800435a:	bf00      	nop
 800435c:	08007168 	.word	0x08007168
 8004360:	08007140 	.word	0x08007140
 8004364:	3ff00000 	.word	0x3ff00000
 8004368:	40240000 	.word	0x40240000
 800436c:	401c0000 	.word	0x401c0000
 8004370:	40140000 	.word	0x40140000
 8004374:	3fe00000 	.word	0x3fe00000
 8004378:	4baf      	ldr	r3, [pc, #700]	; (8004638 <_dtoa_r+0x920>)
 800437a:	f7fc f93d 	bl	80005f8 <__aeabi_dmul>
 800437e:	4606      	mov	r6, r0
 8004380:	460f      	mov	r7, r1
 8004382:	e7ac      	b.n	80042de <_dtoa_r+0x5c6>
 8004384:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004388:	9d00      	ldr	r5, [sp, #0]
 800438a:	4642      	mov	r2, r8
 800438c:	464b      	mov	r3, r9
 800438e:	4630      	mov	r0, r6
 8004390:	4639      	mov	r1, r7
 8004392:	f7fc fa5b 	bl	800084c <__aeabi_ddiv>
 8004396:	f7fc fbdf 	bl	8000b58 <__aeabi_d2iz>
 800439a:	9002      	str	r0, [sp, #8]
 800439c:	f7fc f8c2 	bl	8000524 <__aeabi_i2d>
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	f7fc f928 	bl	80005f8 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4630      	mov	r0, r6
 80043ae:	4639      	mov	r1, r7
 80043b0:	f7fb ff6a 	bl	8000288 <__aeabi_dsub>
 80043b4:	9e02      	ldr	r6, [sp, #8]
 80043b6:	9f01      	ldr	r7, [sp, #4]
 80043b8:	3630      	adds	r6, #48	; 0x30
 80043ba:	f805 6b01 	strb.w	r6, [r5], #1
 80043be:	9e00      	ldr	r6, [sp, #0]
 80043c0:	1bae      	subs	r6, r5, r6
 80043c2:	42b7      	cmp	r7, r6
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	d137      	bne.n	800443a <_dtoa_r+0x722>
 80043ca:	f7fb ff5f 	bl	800028c <__adddf3>
 80043ce:	4642      	mov	r2, r8
 80043d0:	464b      	mov	r3, r9
 80043d2:	4606      	mov	r6, r0
 80043d4:	460f      	mov	r7, r1
 80043d6:	f7fc fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 80043da:	b9c8      	cbnz	r0, 8004410 <_dtoa_r+0x6f8>
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	4630      	mov	r0, r6
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fc fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80043e8:	b110      	cbz	r0, 80043f0 <_dtoa_r+0x6d8>
 80043ea:	9b02      	ldr	r3, [sp, #8]
 80043ec:	07d9      	lsls	r1, r3, #31
 80043ee:	d40f      	bmi.n	8004410 <_dtoa_r+0x6f8>
 80043f0:	4620      	mov	r0, r4
 80043f2:	4659      	mov	r1, fp
 80043f4:	f000 fad6 	bl	80049a4 <_Bfree>
 80043f8:	2300      	movs	r3, #0
 80043fa:	702b      	strb	r3, [r5, #0]
 80043fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043fe:	f10a 0001 	add.w	r0, sl, #1
 8004402:	6018      	str	r0, [r3, #0]
 8004404:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004406:	2b00      	cmp	r3, #0
 8004408:	f43f acd8 	beq.w	8003dbc <_dtoa_r+0xa4>
 800440c:	601d      	str	r5, [r3, #0]
 800440e:	e4d5      	b.n	8003dbc <_dtoa_r+0xa4>
 8004410:	f8cd a01c 	str.w	sl, [sp, #28]
 8004414:	462b      	mov	r3, r5
 8004416:	461d      	mov	r5, r3
 8004418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800441c:	2a39      	cmp	r2, #57	; 0x39
 800441e:	d108      	bne.n	8004432 <_dtoa_r+0x71a>
 8004420:	9a00      	ldr	r2, [sp, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d1f7      	bne.n	8004416 <_dtoa_r+0x6fe>
 8004426:	9a07      	ldr	r2, [sp, #28]
 8004428:	9900      	ldr	r1, [sp, #0]
 800442a:	3201      	adds	r2, #1
 800442c:	9207      	str	r2, [sp, #28]
 800442e:	2230      	movs	r2, #48	; 0x30
 8004430:	700a      	strb	r2, [r1, #0]
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	3201      	adds	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e78c      	b.n	8004354 <_dtoa_r+0x63c>
 800443a:	4b7f      	ldr	r3, [pc, #508]	; (8004638 <_dtoa_r+0x920>)
 800443c:	2200      	movs	r2, #0
 800443e:	f7fc f8db 	bl	80005f8 <__aeabi_dmul>
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	4606      	mov	r6, r0
 8004448:	460f      	mov	r7, r1
 800444a:	f7fc fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800444e:	2800      	cmp	r0, #0
 8004450:	d09b      	beq.n	800438a <_dtoa_r+0x672>
 8004452:	e7cd      	b.n	80043f0 <_dtoa_r+0x6d8>
 8004454:	9a08      	ldr	r2, [sp, #32]
 8004456:	2a00      	cmp	r2, #0
 8004458:	f000 80c4 	beq.w	80045e4 <_dtoa_r+0x8cc>
 800445c:	9a05      	ldr	r2, [sp, #20]
 800445e:	2a01      	cmp	r2, #1
 8004460:	f300 80a8 	bgt.w	80045b4 <_dtoa_r+0x89c>
 8004464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004466:	2a00      	cmp	r2, #0
 8004468:	f000 80a0 	beq.w	80045ac <_dtoa_r+0x894>
 800446c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004470:	9e06      	ldr	r6, [sp, #24]
 8004472:	4645      	mov	r5, r8
 8004474:	9a04      	ldr	r2, [sp, #16]
 8004476:	2101      	movs	r1, #1
 8004478:	441a      	add	r2, r3
 800447a:	4620      	mov	r0, r4
 800447c:	4498      	add	r8, r3
 800447e:	9204      	str	r2, [sp, #16]
 8004480:	f000 fb4c 	bl	8004b1c <__i2b>
 8004484:	4607      	mov	r7, r0
 8004486:	2d00      	cmp	r5, #0
 8004488:	dd0b      	ble.n	80044a2 <_dtoa_r+0x78a>
 800448a:	9b04      	ldr	r3, [sp, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	dd08      	ble.n	80044a2 <_dtoa_r+0x78a>
 8004490:	42ab      	cmp	r3, r5
 8004492:	9a04      	ldr	r2, [sp, #16]
 8004494:	bfa8      	it	ge
 8004496:	462b      	movge	r3, r5
 8004498:	eba8 0803 	sub.w	r8, r8, r3
 800449c:	1aed      	subs	r5, r5, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	9304      	str	r3, [sp, #16]
 80044a2:	9b06      	ldr	r3, [sp, #24]
 80044a4:	b1fb      	cbz	r3, 80044e6 <_dtoa_r+0x7ce>
 80044a6:	9b08      	ldr	r3, [sp, #32]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 809f 	beq.w	80045ec <_dtoa_r+0x8d4>
 80044ae:	2e00      	cmp	r6, #0
 80044b0:	dd11      	ble.n	80044d6 <_dtoa_r+0x7be>
 80044b2:	4639      	mov	r1, r7
 80044b4:	4632      	mov	r2, r6
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 fbec 	bl	8004c94 <__pow5mult>
 80044bc:	465a      	mov	r2, fp
 80044be:	4601      	mov	r1, r0
 80044c0:	4607      	mov	r7, r0
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 fb40 	bl	8004b48 <__multiply>
 80044c8:	4659      	mov	r1, fp
 80044ca:	9007      	str	r0, [sp, #28]
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fa69 	bl	80049a4 <_Bfree>
 80044d2:	9b07      	ldr	r3, [sp, #28]
 80044d4:	469b      	mov	fp, r3
 80044d6:	9b06      	ldr	r3, [sp, #24]
 80044d8:	1b9a      	subs	r2, r3, r6
 80044da:	d004      	beq.n	80044e6 <_dtoa_r+0x7ce>
 80044dc:	4659      	mov	r1, fp
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 fbd8 	bl	8004c94 <__pow5mult>
 80044e4:	4683      	mov	fp, r0
 80044e6:	2101      	movs	r1, #1
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 fb17 	bl	8004b1c <__i2b>
 80044ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	4606      	mov	r6, r0
 80044f4:	dd7c      	ble.n	80045f0 <_dtoa_r+0x8d8>
 80044f6:	461a      	mov	r2, r3
 80044f8:	4601      	mov	r1, r0
 80044fa:	4620      	mov	r0, r4
 80044fc:	f000 fbca 	bl	8004c94 <__pow5mult>
 8004500:	9b05      	ldr	r3, [sp, #20]
 8004502:	2b01      	cmp	r3, #1
 8004504:	4606      	mov	r6, r0
 8004506:	dd76      	ble.n	80045f6 <_dtoa_r+0x8de>
 8004508:	2300      	movs	r3, #0
 800450a:	9306      	str	r3, [sp, #24]
 800450c:	6933      	ldr	r3, [r6, #16]
 800450e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004512:	6918      	ldr	r0, [r3, #16]
 8004514:	f000 fab2 	bl	8004a7c <__hi0bits>
 8004518:	f1c0 0020 	rsb	r0, r0, #32
 800451c:	9b04      	ldr	r3, [sp, #16]
 800451e:	4418      	add	r0, r3
 8004520:	f010 001f 	ands.w	r0, r0, #31
 8004524:	f000 8086 	beq.w	8004634 <_dtoa_r+0x91c>
 8004528:	f1c0 0320 	rsb	r3, r0, #32
 800452c:	2b04      	cmp	r3, #4
 800452e:	dd7f      	ble.n	8004630 <_dtoa_r+0x918>
 8004530:	f1c0 001c 	rsb	r0, r0, #28
 8004534:	9b04      	ldr	r3, [sp, #16]
 8004536:	4403      	add	r3, r0
 8004538:	4480      	add	r8, r0
 800453a:	4405      	add	r5, r0
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f1b8 0f00 	cmp.w	r8, #0
 8004542:	dd05      	ble.n	8004550 <_dtoa_r+0x838>
 8004544:	4659      	mov	r1, fp
 8004546:	4642      	mov	r2, r8
 8004548:	4620      	mov	r0, r4
 800454a:	f000 fbfd 	bl	8004d48 <__lshift>
 800454e:	4683      	mov	fp, r0
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	dd05      	ble.n	8004562 <_dtoa_r+0x84a>
 8004556:	4631      	mov	r1, r6
 8004558:	461a      	mov	r2, r3
 800455a:	4620      	mov	r0, r4
 800455c:	f000 fbf4 	bl	8004d48 <__lshift>
 8004560:	4606      	mov	r6, r0
 8004562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d069      	beq.n	800463c <_dtoa_r+0x924>
 8004568:	4631      	mov	r1, r6
 800456a:	4658      	mov	r0, fp
 800456c:	f000 fc58 	bl	8004e20 <__mcmp>
 8004570:	2800      	cmp	r0, #0
 8004572:	da63      	bge.n	800463c <_dtoa_r+0x924>
 8004574:	2300      	movs	r3, #0
 8004576:	4659      	mov	r1, fp
 8004578:	220a      	movs	r2, #10
 800457a:	4620      	mov	r0, r4
 800457c:	f000 fa34 	bl	80049e8 <__multadd>
 8004580:	9b08      	ldr	r3, [sp, #32]
 8004582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004586:	4683      	mov	fp, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 818f 	beq.w	80048ac <_dtoa_r+0xb94>
 800458e:	4639      	mov	r1, r7
 8004590:	2300      	movs	r3, #0
 8004592:	220a      	movs	r2, #10
 8004594:	4620      	mov	r0, r4
 8004596:	f000 fa27 	bl	80049e8 <__multadd>
 800459a:	f1b9 0f00 	cmp.w	r9, #0
 800459e:	4607      	mov	r7, r0
 80045a0:	f300 808e 	bgt.w	80046c0 <_dtoa_r+0x9a8>
 80045a4:	9b05      	ldr	r3, [sp, #20]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	dc50      	bgt.n	800464c <_dtoa_r+0x934>
 80045aa:	e089      	b.n	80046c0 <_dtoa_r+0x9a8>
 80045ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80045b2:	e75d      	b.n	8004470 <_dtoa_r+0x758>
 80045b4:	9b01      	ldr	r3, [sp, #4]
 80045b6:	1e5e      	subs	r6, r3, #1
 80045b8:	9b06      	ldr	r3, [sp, #24]
 80045ba:	42b3      	cmp	r3, r6
 80045bc:	bfbf      	itttt	lt
 80045be:	9b06      	ldrlt	r3, [sp, #24]
 80045c0:	9606      	strlt	r6, [sp, #24]
 80045c2:	1af2      	sublt	r2, r6, r3
 80045c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80045c6:	bfb6      	itet	lt
 80045c8:	189b      	addlt	r3, r3, r2
 80045ca:	1b9e      	subge	r6, r3, r6
 80045cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80045ce:	9b01      	ldr	r3, [sp, #4]
 80045d0:	bfb8      	it	lt
 80045d2:	2600      	movlt	r6, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bfb5      	itete	lt
 80045d8:	eba8 0503 	sublt.w	r5, r8, r3
 80045dc:	9b01      	ldrge	r3, [sp, #4]
 80045de:	2300      	movlt	r3, #0
 80045e0:	4645      	movge	r5, r8
 80045e2:	e747      	b.n	8004474 <_dtoa_r+0x75c>
 80045e4:	9e06      	ldr	r6, [sp, #24]
 80045e6:	9f08      	ldr	r7, [sp, #32]
 80045e8:	4645      	mov	r5, r8
 80045ea:	e74c      	b.n	8004486 <_dtoa_r+0x76e>
 80045ec:	9a06      	ldr	r2, [sp, #24]
 80045ee:	e775      	b.n	80044dc <_dtoa_r+0x7c4>
 80045f0:	9b05      	ldr	r3, [sp, #20]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	dc18      	bgt.n	8004628 <_dtoa_r+0x910>
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	b9b3      	cbnz	r3, 8004628 <_dtoa_r+0x910>
 80045fa:	9b03      	ldr	r3, [sp, #12]
 80045fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004600:	b9a3      	cbnz	r3, 800462c <_dtoa_r+0x914>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004608:	0d1b      	lsrs	r3, r3, #20
 800460a:	051b      	lsls	r3, r3, #20
 800460c:	b12b      	cbz	r3, 800461a <_dtoa_r+0x902>
 800460e:	9b04      	ldr	r3, [sp, #16]
 8004610:	3301      	adds	r3, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	f108 0801 	add.w	r8, r8, #1
 8004618:	2301      	movs	r3, #1
 800461a:	9306      	str	r3, [sp, #24]
 800461c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800461e:	2b00      	cmp	r3, #0
 8004620:	f47f af74 	bne.w	800450c <_dtoa_r+0x7f4>
 8004624:	2001      	movs	r0, #1
 8004626:	e779      	b.n	800451c <_dtoa_r+0x804>
 8004628:	2300      	movs	r3, #0
 800462a:	e7f6      	b.n	800461a <_dtoa_r+0x902>
 800462c:	9b02      	ldr	r3, [sp, #8]
 800462e:	e7f4      	b.n	800461a <_dtoa_r+0x902>
 8004630:	d085      	beq.n	800453e <_dtoa_r+0x826>
 8004632:	4618      	mov	r0, r3
 8004634:	301c      	adds	r0, #28
 8004636:	e77d      	b.n	8004534 <_dtoa_r+0x81c>
 8004638:	40240000 	.word	0x40240000
 800463c:	9b01      	ldr	r3, [sp, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	dc38      	bgt.n	80046b4 <_dtoa_r+0x99c>
 8004642:	9b05      	ldr	r3, [sp, #20]
 8004644:	2b02      	cmp	r3, #2
 8004646:	dd35      	ble.n	80046b4 <_dtoa_r+0x99c>
 8004648:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800464c:	f1b9 0f00 	cmp.w	r9, #0
 8004650:	d10d      	bne.n	800466e <_dtoa_r+0x956>
 8004652:	4631      	mov	r1, r6
 8004654:	464b      	mov	r3, r9
 8004656:	2205      	movs	r2, #5
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f9c5 	bl	80049e8 <__multadd>
 800465e:	4601      	mov	r1, r0
 8004660:	4606      	mov	r6, r0
 8004662:	4658      	mov	r0, fp
 8004664:	f000 fbdc 	bl	8004e20 <__mcmp>
 8004668:	2800      	cmp	r0, #0
 800466a:	f73f adbd 	bgt.w	80041e8 <_dtoa_r+0x4d0>
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	9d00      	ldr	r5, [sp, #0]
 8004672:	ea6f 0a03 	mvn.w	sl, r3
 8004676:	f04f 0800 	mov.w	r8, #0
 800467a:	4631      	mov	r1, r6
 800467c:	4620      	mov	r0, r4
 800467e:	f000 f991 	bl	80049a4 <_Bfree>
 8004682:	2f00      	cmp	r7, #0
 8004684:	f43f aeb4 	beq.w	80043f0 <_dtoa_r+0x6d8>
 8004688:	f1b8 0f00 	cmp.w	r8, #0
 800468c:	d005      	beq.n	800469a <_dtoa_r+0x982>
 800468e:	45b8      	cmp	r8, r7
 8004690:	d003      	beq.n	800469a <_dtoa_r+0x982>
 8004692:	4641      	mov	r1, r8
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f985 	bl	80049a4 <_Bfree>
 800469a:	4639      	mov	r1, r7
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f981 	bl	80049a4 <_Bfree>
 80046a2:	e6a5      	b.n	80043f0 <_dtoa_r+0x6d8>
 80046a4:	2600      	movs	r6, #0
 80046a6:	4637      	mov	r7, r6
 80046a8:	e7e1      	b.n	800466e <_dtoa_r+0x956>
 80046aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80046ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80046b0:	4637      	mov	r7, r6
 80046b2:	e599      	b.n	80041e8 <_dtoa_r+0x4d0>
 80046b4:	9b08      	ldr	r3, [sp, #32]
 80046b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80fd 	beq.w	80048ba <_dtoa_r+0xba2>
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	dd05      	ble.n	80046d0 <_dtoa_r+0x9b8>
 80046c4:	4639      	mov	r1, r7
 80046c6:	462a      	mov	r2, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fb3d 	bl	8004d48 <__lshift>
 80046ce:	4607      	mov	r7, r0
 80046d0:	9b06      	ldr	r3, [sp, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d05c      	beq.n	8004790 <_dtoa_r+0xa78>
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4620      	mov	r0, r4
 80046da:	f000 f923 	bl	8004924 <_Balloc>
 80046de:	4605      	mov	r5, r0
 80046e0:	b928      	cbnz	r0, 80046ee <_dtoa_r+0x9d6>
 80046e2:	4b80      	ldr	r3, [pc, #512]	; (80048e4 <_dtoa_r+0xbcc>)
 80046e4:	4602      	mov	r2, r0
 80046e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80046ea:	f7ff bb2e 	b.w	8003d4a <_dtoa_r+0x32>
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	3202      	adds	r2, #2
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	f107 010c 	add.w	r1, r7, #12
 80046f8:	300c      	adds	r0, #12
 80046fa:	f000 f905 	bl	8004908 <memcpy>
 80046fe:	2201      	movs	r2, #1
 8004700:	4629      	mov	r1, r5
 8004702:	4620      	mov	r0, r4
 8004704:	f000 fb20 	bl	8004d48 <__lshift>
 8004708:	9b00      	ldr	r3, [sp, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	9b00      	ldr	r3, [sp, #0]
 8004710:	444b      	add	r3, r9
 8004712:	9307      	str	r3, [sp, #28]
 8004714:	9b02      	ldr	r3, [sp, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	46b8      	mov	r8, r7
 800471c:	9306      	str	r3, [sp, #24]
 800471e:	4607      	mov	r7, r0
 8004720:	9b01      	ldr	r3, [sp, #4]
 8004722:	4631      	mov	r1, r6
 8004724:	3b01      	subs	r3, #1
 8004726:	4658      	mov	r0, fp
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	f7ff fa69 	bl	8003c00 <quorem>
 800472e:	4603      	mov	r3, r0
 8004730:	3330      	adds	r3, #48	; 0x30
 8004732:	9004      	str	r0, [sp, #16]
 8004734:	4641      	mov	r1, r8
 8004736:	4658      	mov	r0, fp
 8004738:	9308      	str	r3, [sp, #32]
 800473a:	f000 fb71 	bl	8004e20 <__mcmp>
 800473e:	463a      	mov	r2, r7
 8004740:	4681      	mov	r9, r0
 8004742:	4631      	mov	r1, r6
 8004744:	4620      	mov	r0, r4
 8004746:	f000 fb87 	bl	8004e58 <__mdiff>
 800474a:	68c2      	ldr	r2, [r0, #12]
 800474c:	9b08      	ldr	r3, [sp, #32]
 800474e:	4605      	mov	r5, r0
 8004750:	bb02      	cbnz	r2, 8004794 <_dtoa_r+0xa7c>
 8004752:	4601      	mov	r1, r0
 8004754:	4658      	mov	r0, fp
 8004756:	f000 fb63 	bl	8004e20 <__mcmp>
 800475a:	9b08      	ldr	r3, [sp, #32]
 800475c:	4602      	mov	r2, r0
 800475e:	4629      	mov	r1, r5
 8004760:	4620      	mov	r0, r4
 8004762:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004766:	f000 f91d 	bl	80049a4 <_Bfree>
 800476a:	9b05      	ldr	r3, [sp, #20]
 800476c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476e:	9d01      	ldr	r5, [sp, #4]
 8004770:	ea43 0102 	orr.w	r1, r3, r2
 8004774:	9b06      	ldr	r3, [sp, #24]
 8004776:	430b      	orrs	r3, r1
 8004778:	9b08      	ldr	r3, [sp, #32]
 800477a:	d10d      	bne.n	8004798 <_dtoa_r+0xa80>
 800477c:	2b39      	cmp	r3, #57	; 0x39
 800477e:	d029      	beq.n	80047d4 <_dtoa_r+0xabc>
 8004780:	f1b9 0f00 	cmp.w	r9, #0
 8004784:	dd01      	ble.n	800478a <_dtoa_r+0xa72>
 8004786:	9b04      	ldr	r3, [sp, #16]
 8004788:	3331      	adds	r3, #49	; 0x31
 800478a:	9a02      	ldr	r2, [sp, #8]
 800478c:	7013      	strb	r3, [r2, #0]
 800478e:	e774      	b.n	800467a <_dtoa_r+0x962>
 8004790:	4638      	mov	r0, r7
 8004792:	e7b9      	b.n	8004708 <_dtoa_r+0x9f0>
 8004794:	2201      	movs	r2, #1
 8004796:	e7e2      	b.n	800475e <_dtoa_r+0xa46>
 8004798:	f1b9 0f00 	cmp.w	r9, #0
 800479c:	db06      	blt.n	80047ac <_dtoa_r+0xa94>
 800479e:	9905      	ldr	r1, [sp, #20]
 80047a0:	ea41 0909 	orr.w	r9, r1, r9
 80047a4:	9906      	ldr	r1, [sp, #24]
 80047a6:	ea59 0101 	orrs.w	r1, r9, r1
 80047aa:	d120      	bne.n	80047ee <_dtoa_r+0xad6>
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	ddec      	ble.n	800478a <_dtoa_r+0xa72>
 80047b0:	4659      	mov	r1, fp
 80047b2:	2201      	movs	r2, #1
 80047b4:	4620      	mov	r0, r4
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	f000 fac6 	bl	8004d48 <__lshift>
 80047bc:	4631      	mov	r1, r6
 80047be:	4683      	mov	fp, r0
 80047c0:	f000 fb2e 	bl	8004e20 <__mcmp>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	9b01      	ldr	r3, [sp, #4]
 80047c8:	dc02      	bgt.n	80047d0 <_dtoa_r+0xab8>
 80047ca:	d1de      	bne.n	800478a <_dtoa_r+0xa72>
 80047cc:	07da      	lsls	r2, r3, #31
 80047ce:	d5dc      	bpl.n	800478a <_dtoa_r+0xa72>
 80047d0:	2b39      	cmp	r3, #57	; 0x39
 80047d2:	d1d8      	bne.n	8004786 <_dtoa_r+0xa6e>
 80047d4:	9a02      	ldr	r2, [sp, #8]
 80047d6:	2339      	movs	r3, #57	; 0x39
 80047d8:	7013      	strb	r3, [r2, #0]
 80047da:	462b      	mov	r3, r5
 80047dc:	461d      	mov	r5, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80047e4:	2a39      	cmp	r2, #57	; 0x39
 80047e6:	d050      	beq.n	800488a <_dtoa_r+0xb72>
 80047e8:	3201      	adds	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e745      	b.n	800467a <_dtoa_r+0x962>
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	dd03      	ble.n	80047fa <_dtoa_r+0xae2>
 80047f2:	2b39      	cmp	r3, #57	; 0x39
 80047f4:	d0ee      	beq.n	80047d4 <_dtoa_r+0xabc>
 80047f6:	3301      	adds	r3, #1
 80047f8:	e7c7      	b.n	800478a <_dtoa_r+0xa72>
 80047fa:	9a01      	ldr	r2, [sp, #4]
 80047fc:	9907      	ldr	r1, [sp, #28]
 80047fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004802:	428a      	cmp	r2, r1
 8004804:	d02a      	beq.n	800485c <_dtoa_r+0xb44>
 8004806:	4659      	mov	r1, fp
 8004808:	2300      	movs	r3, #0
 800480a:	220a      	movs	r2, #10
 800480c:	4620      	mov	r0, r4
 800480e:	f000 f8eb 	bl	80049e8 <__multadd>
 8004812:	45b8      	cmp	r8, r7
 8004814:	4683      	mov	fp, r0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	f04f 020a 	mov.w	r2, #10
 800481e:	4641      	mov	r1, r8
 8004820:	4620      	mov	r0, r4
 8004822:	d107      	bne.n	8004834 <_dtoa_r+0xb1c>
 8004824:	f000 f8e0 	bl	80049e8 <__multadd>
 8004828:	4680      	mov	r8, r0
 800482a:	4607      	mov	r7, r0
 800482c:	9b01      	ldr	r3, [sp, #4]
 800482e:	3301      	adds	r3, #1
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	e775      	b.n	8004720 <_dtoa_r+0xa08>
 8004834:	f000 f8d8 	bl	80049e8 <__multadd>
 8004838:	4639      	mov	r1, r7
 800483a:	4680      	mov	r8, r0
 800483c:	2300      	movs	r3, #0
 800483e:	220a      	movs	r2, #10
 8004840:	4620      	mov	r0, r4
 8004842:	f000 f8d1 	bl	80049e8 <__multadd>
 8004846:	4607      	mov	r7, r0
 8004848:	e7f0      	b.n	800482c <_dtoa_r+0xb14>
 800484a:	f1b9 0f00 	cmp.w	r9, #0
 800484e:	9a00      	ldr	r2, [sp, #0]
 8004850:	bfcc      	ite	gt
 8004852:	464d      	movgt	r5, r9
 8004854:	2501      	movle	r5, #1
 8004856:	4415      	add	r5, r2
 8004858:	f04f 0800 	mov.w	r8, #0
 800485c:	4659      	mov	r1, fp
 800485e:	2201      	movs	r2, #1
 8004860:	4620      	mov	r0, r4
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	f000 fa70 	bl	8004d48 <__lshift>
 8004868:	4631      	mov	r1, r6
 800486a:	4683      	mov	fp, r0
 800486c:	f000 fad8 	bl	8004e20 <__mcmp>
 8004870:	2800      	cmp	r0, #0
 8004872:	dcb2      	bgt.n	80047da <_dtoa_r+0xac2>
 8004874:	d102      	bne.n	800487c <_dtoa_r+0xb64>
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	07db      	lsls	r3, r3, #31
 800487a:	d4ae      	bmi.n	80047da <_dtoa_r+0xac2>
 800487c:	462b      	mov	r3, r5
 800487e:	461d      	mov	r5, r3
 8004880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004884:	2a30      	cmp	r2, #48	; 0x30
 8004886:	d0fa      	beq.n	800487e <_dtoa_r+0xb66>
 8004888:	e6f7      	b.n	800467a <_dtoa_r+0x962>
 800488a:	9a00      	ldr	r2, [sp, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d1a5      	bne.n	80047dc <_dtoa_r+0xac4>
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	2331      	movs	r3, #49	; 0x31
 8004896:	e779      	b.n	800478c <_dtoa_r+0xa74>
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <_dtoa_r+0xbd0>)
 800489a:	f7ff baaf 	b.w	8003dfc <_dtoa_r+0xe4>
 800489e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f47f aa86 	bne.w	8003db2 <_dtoa_r+0x9a>
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <_dtoa_r+0xbd4>)
 80048a8:	f7ff baa8 	b.w	8003dfc <_dtoa_r+0xe4>
 80048ac:	f1b9 0f00 	cmp.w	r9, #0
 80048b0:	dc03      	bgt.n	80048ba <_dtoa_r+0xba2>
 80048b2:	9b05      	ldr	r3, [sp, #20]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	f73f aec9 	bgt.w	800464c <_dtoa_r+0x934>
 80048ba:	9d00      	ldr	r5, [sp, #0]
 80048bc:	4631      	mov	r1, r6
 80048be:	4658      	mov	r0, fp
 80048c0:	f7ff f99e 	bl	8003c00 <quorem>
 80048c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80048c8:	f805 3b01 	strb.w	r3, [r5], #1
 80048cc:	9a00      	ldr	r2, [sp, #0]
 80048ce:	1aaa      	subs	r2, r5, r2
 80048d0:	4591      	cmp	r9, r2
 80048d2:	ddba      	ble.n	800484a <_dtoa_r+0xb32>
 80048d4:	4659      	mov	r1, fp
 80048d6:	2300      	movs	r3, #0
 80048d8:	220a      	movs	r2, #10
 80048da:	4620      	mov	r0, r4
 80048dc:	f000 f884 	bl	80049e8 <__multadd>
 80048e0:	4683      	mov	fp, r0
 80048e2:	e7eb      	b.n	80048bc <_dtoa_r+0xba4>
 80048e4:	080070cf 	.word	0x080070cf
 80048e8:	08007028 	.word	0x08007028
 80048ec:	0800704c 	.word	0x0800704c

080048f0 <_localeconv_r>:
 80048f0:	4800      	ldr	r0, [pc, #0]	; (80048f4 <_localeconv_r+0x4>)
 80048f2:	4770      	bx	lr
 80048f4:	2000015c 	.word	0x2000015c

080048f8 <malloc>:
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <malloc+0xc>)
 80048fa:	4601      	mov	r1, r0
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	f000 bbef 	b.w	80050e0 <_malloc_r>
 8004902:	bf00      	nop
 8004904:	20000008 	.word	0x20000008

08004908 <memcpy>:
 8004908:	440a      	add	r2, r1
 800490a:	4291      	cmp	r1, r2
 800490c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004910:	d100      	bne.n	8004914 <memcpy+0xc>
 8004912:	4770      	bx	lr
 8004914:	b510      	push	{r4, lr}
 8004916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800491e:	4291      	cmp	r1, r2
 8004920:	d1f9      	bne.n	8004916 <memcpy+0xe>
 8004922:	bd10      	pop	{r4, pc}

08004924 <_Balloc>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004928:	4604      	mov	r4, r0
 800492a:	460d      	mov	r5, r1
 800492c:	b976      	cbnz	r6, 800494c <_Balloc+0x28>
 800492e:	2010      	movs	r0, #16
 8004930:	f7ff ffe2 	bl	80048f8 <malloc>
 8004934:	4602      	mov	r2, r0
 8004936:	6260      	str	r0, [r4, #36]	; 0x24
 8004938:	b920      	cbnz	r0, 8004944 <_Balloc+0x20>
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <_Balloc+0x78>)
 800493c:	4818      	ldr	r0, [pc, #96]	; (80049a0 <_Balloc+0x7c>)
 800493e:	2166      	movs	r1, #102	; 0x66
 8004940:	f000 fd94 	bl	800546c <__assert_func>
 8004944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004948:	6006      	str	r6, [r0, #0]
 800494a:	60c6      	str	r6, [r0, #12]
 800494c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800494e:	68f3      	ldr	r3, [r6, #12]
 8004950:	b183      	cbz	r3, 8004974 <_Balloc+0x50>
 8004952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800495a:	b9b8      	cbnz	r0, 800498c <_Balloc+0x68>
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f605 	lsl.w	r6, r1, r5
 8004962:	1d72      	adds	r2, r6, #5
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	4620      	mov	r0, r4
 8004968:	f000 fb5a 	bl	8005020 <_calloc_r>
 800496c:	b160      	cbz	r0, 8004988 <_Balloc+0x64>
 800496e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004972:	e00e      	b.n	8004992 <_Balloc+0x6e>
 8004974:	2221      	movs	r2, #33	; 0x21
 8004976:	2104      	movs	r1, #4
 8004978:	4620      	mov	r0, r4
 800497a:	f000 fb51 	bl	8005020 <_calloc_r>
 800497e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004980:	60f0      	str	r0, [r6, #12]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e4      	bne.n	8004952 <_Balloc+0x2e>
 8004988:	2000      	movs	r0, #0
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	6802      	ldr	r2, [r0, #0]
 800498e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004992:	2300      	movs	r3, #0
 8004994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004998:	e7f7      	b.n	800498a <_Balloc+0x66>
 800499a:	bf00      	nop
 800499c:	08007059 	.word	0x08007059
 80049a0:	080070e0 	.word	0x080070e0

080049a4 <_Bfree>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049a8:	4605      	mov	r5, r0
 80049aa:	460c      	mov	r4, r1
 80049ac:	b976      	cbnz	r6, 80049cc <_Bfree+0x28>
 80049ae:	2010      	movs	r0, #16
 80049b0:	f7ff ffa2 	bl	80048f8 <malloc>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6268      	str	r0, [r5, #36]	; 0x24
 80049b8:	b920      	cbnz	r0, 80049c4 <_Bfree+0x20>
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <_Bfree+0x3c>)
 80049bc:	4809      	ldr	r0, [pc, #36]	; (80049e4 <_Bfree+0x40>)
 80049be:	218a      	movs	r1, #138	; 0x8a
 80049c0:	f000 fd54 	bl	800546c <__assert_func>
 80049c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049c8:	6006      	str	r6, [r0, #0]
 80049ca:	60c6      	str	r6, [r0, #12]
 80049cc:	b13c      	cbz	r4, 80049de <_Bfree+0x3a>
 80049ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049d0:	6862      	ldr	r2, [r4, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049d8:	6021      	str	r1, [r4, #0]
 80049da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	08007059 	.word	0x08007059
 80049e4:	080070e0 	.word	0x080070e0

080049e8 <__multadd>:
 80049e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ec:	690e      	ldr	r6, [r1, #16]
 80049ee:	4607      	mov	r7, r0
 80049f0:	4698      	mov	r8, r3
 80049f2:	460c      	mov	r4, r1
 80049f4:	f101 0014 	add.w	r0, r1, #20
 80049f8:	2300      	movs	r3, #0
 80049fa:	6805      	ldr	r5, [r0, #0]
 80049fc:	b2a9      	uxth	r1, r5
 80049fe:	fb02 8101 	mla	r1, r2, r1, r8
 8004a02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004a06:	0c2d      	lsrs	r5, r5, #16
 8004a08:	fb02 c505 	mla	r5, r2, r5, ip
 8004a0c:	b289      	uxth	r1, r1
 8004a0e:	3301      	adds	r3, #1
 8004a10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004a14:	429e      	cmp	r6, r3
 8004a16:	f840 1b04 	str.w	r1, [r0], #4
 8004a1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004a1e:	dcec      	bgt.n	80049fa <__multadd+0x12>
 8004a20:	f1b8 0f00 	cmp.w	r8, #0
 8004a24:	d022      	beq.n	8004a6c <__multadd+0x84>
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	42b3      	cmp	r3, r6
 8004a2a:	dc19      	bgt.n	8004a60 <__multadd+0x78>
 8004a2c:	6861      	ldr	r1, [r4, #4]
 8004a2e:	4638      	mov	r0, r7
 8004a30:	3101      	adds	r1, #1
 8004a32:	f7ff ff77 	bl	8004924 <_Balloc>
 8004a36:	4605      	mov	r5, r0
 8004a38:	b928      	cbnz	r0, 8004a46 <__multadd+0x5e>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <__multadd+0x8c>)
 8004a3e:	480e      	ldr	r0, [pc, #56]	; (8004a78 <__multadd+0x90>)
 8004a40:	21b5      	movs	r1, #181	; 0xb5
 8004a42:	f000 fd13 	bl	800546c <__assert_func>
 8004a46:	6922      	ldr	r2, [r4, #16]
 8004a48:	3202      	adds	r2, #2
 8004a4a:	f104 010c 	add.w	r1, r4, #12
 8004a4e:	0092      	lsls	r2, r2, #2
 8004a50:	300c      	adds	r0, #12
 8004a52:	f7ff ff59 	bl	8004908 <memcpy>
 8004a56:	4621      	mov	r1, r4
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7ff ffa3 	bl	80049a4 <_Bfree>
 8004a5e:	462c      	mov	r4, r5
 8004a60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a64:	3601      	adds	r6, #1
 8004a66:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a6a:	6126      	str	r6, [r4, #16]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a72:	bf00      	nop
 8004a74:	080070cf 	.word	0x080070cf
 8004a78:	080070e0 	.word	0x080070e0

08004a7c <__hi0bits>:
 8004a7c:	0c03      	lsrs	r3, r0, #16
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	b9d3      	cbnz	r3, 8004ab8 <__hi0bits+0x3c>
 8004a82:	0400      	lsls	r0, r0, #16
 8004a84:	2310      	movs	r3, #16
 8004a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a8a:	bf04      	itt	eq
 8004a8c:	0200      	lsleq	r0, r0, #8
 8004a8e:	3308      	addeq	r3, #8
 8004a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a94:	bf04      	itt	eq
 8004a96:	0100      	lsleq	r0, r0, #4
 8004a98:	3304      	addeq	r3, #4
 8004a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a9e:	bf04      	itt	eq
 8004aa0:	0080      	lsleq	r0, r0, #2
 8004aa2:	3302      	addeq	r3, #2
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	db05      	blt.n	8004ab4 <__hi0bits+0x38>
 8004aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004aac:	f103 0301 	add.w	r3, r3, #1
 8004ab0:	bf08      	it	eq
 8004ab2:	2320      	moveq	r3, #32
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	4770      	bx	lr
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e7e4      	b.n	8004a86 <__hi0bits+0xa>

08004abc <__lo0bits>:
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	f013 0207 	ands.w	r2, r3, #7
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	d00b      	beq.n	8004ade <__lo0bits+0x22>
 8004ac6:	07da      	lsls	r2, r3, #31
 8004ac8:	d424      	bmi.n	8004b14 <__lo0bits+0x58>
 8004aca:	0798      	lsls	r0, r3, #30
 8004acc:	bf49      	itett	mi
 8004ace:	085b      	lsrmi	r3, r3, #1
 8004ad0:	089b      	lsrpl	r3, r3, #2
 8004ad2:	2001      	movmi	r0, #1
 8004ad4:	600b      	strmi	r3, [r1, #0]
 8004ad6:	bf5c      	itt	pl
 8004ad8:	600b      	strpl	r3, [r1, #0]
 8004ada:	2002      	movpl	r0, #2
 8004adc:	4770      	bx	lr
 8004ade:	b298      	uxth	r0, r3
 8004ae0:	b9b0      	cbnz	r0, 8004b10 <__lo0bits+0x54>
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	2010      	movs	r0, #16
 8004ae6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004aea:	bf04      	itt	eq
 8004aec:	0a1b      	lsreq	r3, r3, #8
 8004aee:	3008      	addeq	r0, #8
 8004af0:	071a      	lsls	r2, r3, #28
 8004af2:	bf04      	itt	eq
 8004af4:	091b      	lsreq	r3, r3, #4
 8004af6:	3004      	addeq	r0, #4
 8004af8:	079a      	lsls	r2, r3, #30
 8004afa:	bf04      	itt	eq
 8004afc:	089b      	lsreq	r3, r3, #2
 8004afe:	3002      	addeq	r0, #2
 8004b00:	07da      	lsls	r2, r3, #31
 8004b02:	d403      	bmi.n	8004b0c <__lo0bits+0x50>
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	f100 0001 	add.w	r0, r0, #1
 8004b0a:	d005      	beq.n	8004b18 <__lo0bits+0x5c>
 8004b0c:	600b      	str	r3, [r1, #0]
 8004b0e:	4770      	bx	lr
 8004b10:	4610      	mov	r0, r2
 8004b12:	e7e8      	b.n	8004ae6 <__lo0bits+0x2a>
 8004b14:	2000      	movs	r0, #0
 8004b16:	4770      	bx	lr
 8004b18:	2020      	movs	r0, #32
 8004b1a:	4770      	bx	lr

08004b1c <__i2b>:
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	2101      	movs	r1, #1
 8004b22:	f7ff feff 	bl	8004924 <_Balloc>
 8004b26:	4602      	mov	r2, r0
 8004b28:	b928      	cbnz	r0, 8004b36 <__i2b+0x1a>
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <__i2b+0x24>)
 8004b2c:	4805      	ldr	r0, [pc, #20]	; (8004b44 <__i2b+0x28>)
 8004b2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004b32:	f000 fc9b 	bl	800546c <__assert_func>
 8004b36:	2301      	movs	r3, #1
 8004b38:	6144      	str	r4, [r0, #20]
 8004b3a:	6103      	str	r3, [r0, #16]
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	080070cf 	.word	0x080070cf
 8004b44:	080070e0 	.word	0x080070e0

08004b48 <__multiply>:
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	690a      	ldr	r2, [r1, #16]
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bfb8      	it	lt
 8004b56:	460b      	movlt	r3, r1
 8004b58:	460d      	mov	r5, r1
 8004b5a:	bfbc      	itt	lt
 8004b5c:	4625      	movlt	r5, r4
 8004b5e:	461c      	movlt	r4, r3
 8004b60:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004b64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004b68:	68ab      	ldr	r3, [r5, #8]
 8004b6a:	6869      	ldr	r1, [r5, #4]
 8004b6c:	eb0a 0709 	add.w	r7, sl, r9
 8004b70:	42bb      	cmp	r3, r7
 8004b72:	b085      	sub	sp, #20
 8004b74:	bfb8      	it	lt
 8004b76:	3101      	addlt	r1, #1
 8004b78:	f7ff fed4 	bl	8004924 <_Balloc>
 8004b7c:	b930      	cbnz	r0, 8004b8c <__multiply+0x44>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <__multiply+0x144>)
 8004b82:	4843      	ldr	r0, [pc, #268]	; (8004c90 <__multiply+0x148>)
 8004b84:	f240 115d 	movw	r1, #349	; 0x15d
 8004b88:	f000 fc70 	bl	800546c <__assert_func>
 8004b8c:	f100 0614 	add.w	r6, r0, #20
 8004b90:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b94:	4633      	mov	r3, r6
 8004b96:	2200      	movs	r2, #0
 8004b98:	4543      	cmp	r3, r8
 8004b9a:	d31e      	bcc.n	8004bda <__multiply+0x92>
 8004b9c:	f105 0c14 	add.w	ip, r5, #20
 8004ba0:	f104 0314 	add.w	r3, r4, #20
 8004ba4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004ba8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004bac:	9202      	str	r2, [sp, #8]
 8004bae:	ebac 0205 	sub.w	r2, ip, r5
 8004bb2:	3a15      	subs	r2, #21
 8004bb4:	f022 0203 	bic.w	r2, r2, #3
 8004bb8:	3204      	adds	r2, #4
 8004bba:	f105 0115 	add.w	r1, r5, #21
 8004bbe:	458c      	cmp	ip, r1
 8004bc0:	bf38      	it	cc
 8004bc2:	2204      	movcc	r2, #4
 8004bc4:	9201      	str	r2, [sp, #4]
 8004bc6:	9a02      	ldr	r2, [sp, #8]
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d808      	bhi.n	8004be0 <__multiply+0x98>
 8004bce:	2f00      	cmp	r7, #0
 8004bd0:	dc55      	bgt.n	8004c7e <__multiply+0x136>
 8004bd2:	6107      	str	r7, [r0, #16]
 8004bd4:	b005      	add	sp, #20
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	f843 2b04 	str.w	r2, [r3], #4
 8004bde:	e7db      	b.n	8004b98 <__multiply+0x50>
 8004be0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004be4:	f1ba 0f00 	cmp.w	sl, #0
 8004be8:	d020      	beq.n	8004c2c <__multiply+0xe4>
 8004bea:	f105 0e14 	add.w	lr, r5, #20
 8004bee:	46b1      	mov	r9, r6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004bf6:	f8d9 b000 	ldr.w	fp, [r9]
 8004bfa:	b2a1      	uxth	r1, r4
 8004bfc:	fa1f fb8b 	uxth.w	fp, fp
 8004c00:	fb0a b101 	mla	r1, sl, r1, fp
 8004c04:	4411      	add	r1, r2
 8004c06:	f8d9 2000 	ldr.w	r2, [r9]
 8004c0a:	0c24      	lsrs	r4, r4, #16
 8004c0c:	0c12      	lsrs	r2, r2, #16
 8004c0e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004c12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004c16:	b289      	uxth	r1, r1
 8004c18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004c1c:	45f4      	cmp	ip, lr
 8004c1e:	f849 1b04 	str.w	r1, [r9], #4
 8004c22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004c26:	d8e4      	bhi.n	8004bf2 <__multiply+0xaa>
 8004c28:	9901      	ldr	r1, [sp, #4]
 8004c2a:	5072      	str	r2, [r6, r1]
 8004c2c:	9a03      	ldr	r2, [sp, #12]
 8004c2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004c32:	3304      	adds	r3, #4
 8004c34:	f1b9 0f00 	cmp.w	r9, #0
 8004c38:	d01f      	beq.n	8004c7a <__multiply+0x132>
 8004c3a:	6834      	ldr	r4, [r6, #0]
 8004c3c:	f105 0114 	add.w	r1, r5, #20
 8004c40:	46b6      	mov	lr, r6
 8004c42:	f04f 0a00 	mov.w	sl, #0
 8004c46:	880a      	ldrh	r2, [r1, #0]
 8004c48:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c4c:	fb09 b202 	mla	r2, r9, r2, fp
 8004c50:	4492      	add	sl, r2
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004c58:	f84e 4b04 	str.w	r4, [lr], #4
 8004c5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004c60:	f8be 2000 	ldrh.w	r2, [lr]
 8004c64:	0c24      	lsrs	r4, r4, #16
 8004c66:	fb09 2404 	mla	r4, r9, r4, r2
 8004c6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004c6e:	458c      	cmp	ip, r1
 8004c70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004c74:	d8e7      	bhi.n	8004c46 <__multiply+0xfe>
 8004c76:	9a01      	ldr	r2, [sp, #4]
 8004c78:	50b4      	str	r4, [r6, r2]
 8004c7a:	3604      	adds	r6, #4
 8004c7c:	e7a3      	b.n	8004bc6 <__multiply+0x7e>
 8004c7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1a5      	bne.n	8004bd2 <__multiply+0x8a>
 8004c86:	3f01      	subs	r7, #1
 8004c88:	e7a1      	b.n	8004bce <__multiply+0x86>
 8004c8a:	bf00      	nop
 8004c8c:	080070cf 	.word	0x080070cf
 8004c90:	080070e0 	.word	0x080070e0

08004c94 <__pow5mult>:
 8004c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c98:	4615      	mov	r5, r2
 8004c9a:	f012 0203 	ands.w	r2, r2, #3
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	460f      	mov	r7, r1
 8004ca2:	d007      	beq.n	8004cb4 <__pow5mult+0x20>
 8004ca4:	4c25      	ldr	r4, [pc, #148]	; (8004d3c <__pow5mult+0xa8>)
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cae:	f7ff fe9b 	bl	80049e8 <__multadd>
 8004cb2:	4607      	mov	r7, r0
 8004cb4:	10ad      	asrs	r5, r5, #2
 8004cb6:	d03d      	beq.n	8004d34 <__pow5mult+0xa0>
 8004cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004cba:	b97c      	cbnz	r4, 8004cdc <__pow5mult+0x48>
 8004cbc:	2010      	movs	r0, #16
 8004cbe:	f7ff fe1b 	bl	80048f8 <malloc>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8004cc6:	b928      	cbnz	r0, 8004cd4 <__pow5mult+0x40>
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <__pow5mult+0xac>)
 8004cca:	481e      	ldr	r0, [pc, #120]	; (8004d44 <__pow5mult+0xb0>)
 8004ccc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004cd0:	f000 fbcc 	bl	800546c <__assert_func>
 8004cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cd8:	6004      	str	r4, [r0, #0]
 8004cda:	60c4      	str	r4, [r0, #12]
 8004cdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ce4:	b94c      	cbnz	r4, 8004cfa <__pow5mult+0x66>
 8004ce6:	f240 2171 	movw	r1, #625	; 0x271
 8004cea:	4630      	mov	r0, r6
 8004cec:	f7ff ff16 	bl	8004b1c <__i2b>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	6003      	str	r3, [r0, #0]
 8004cfa:	f04f 0900 	mov.w	r9, #0
 8004cfe:	07eb      	lsls	r3, r5, #31
 8004d00:	d50a      	bpl.n	8004d18 <__pow5mult+0x84>
 8004d02:	4639      	mov	r1, r7
 8004d04:	4622      	mov	r2, r4
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff ff1e 	bl	8004b48 <__multiply>
 8004d0c:	4639      	mov	r1, r7
 8004d0e:	4680      	mov	r8, r0
 8004d10:	4630      	mov	r0, r6
 8004d12:	f7ff fe47 	bl	80049a4 <_Bfree>
 8004d16:	4647      	mov	r7, r8
 8004d18:	106d      	asrs	r5, r5, #1
 8004d1a:	d00b      	beq.n	8004d34 <__pow5mult+0xa0>
 8004d1c:	6820      	ldr	r0, [r4, #0]
 8004d1e:	b938      	cbnz	r0, 8004d30 <__pow5mult+0x9c>
 8004d20:	4622      	mov	r2, r4
 8004d22:	4621      	mov	r1, r4
 8004d24:	4630      	mov	r0, r6
 8004d26:	f7ff ff0f 	bl	8004b48 <__multiply>
 8004d2a:	6020      	str	r0, [r4, #0]
 8004d2c:	f8c0 9000 	str.w	r9, [r0]
 8004d30:	4604      	mov	r4, r0
 8004d32:	e7e4      	b.n	8004cfe <__pow5mult+0x6a>
 8004d34:	4638      	mov	r0, r7
 8004d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3a:	bf00      	nop
 8004d3c:	08007230 	.word	0x08007230
 8004d40:	08007059 	.word	0x08007059
 8004d44:	080070e0 	.word	0x080070e0

08004d48 <__lshift>:
 8004d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	460c      	mov	r4, r1
 8004d4e:	6849      	ldr	r1, [r1, #4]
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	4607      	mov	r7, r0
 8004d5a:	4691      	mov	r9, r2
 8004d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d60:	f108 0601 	add.w	r6, r8, #1
 8004d64:	42b3      	cmp	r3, r6
 8004d66:	db0b      	blt.n	8004d80 <__lshift+0x38>
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7ff fddb 	bl	8004924 <_Balloc>
 8004d6e:	4605      	mov	r5, r0
 8004d70:	b948      	cbnz	r0, 8004d86 <__lshift+0x3e>
 8004d72:	4602      	mov	r2, r0
 8004d74:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <__lshift+0xd0>)
 8004d76:	4829      	ldr	r0, [pc, #164]	; (8004e1c <__lshift+0xd4>)
 8004d78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d7c:	f000 fb76 	bl	800546c <__assert_func>
 8004d80:	3101      	adds	r1, #1
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	e7ee      	b.n	8004d64 <__lshift+0x1c>
 8004d86:	2300      	movs	r3, #0
 8004d88:	f100 0114 	add.w	r1, r0, #20
 8004d8c:	f100 0210 	add.w	r2, r0, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	4553      	cmp	r3, sl
 8004d94:	db33      	blt.n	8004dfe <__lshift+0xb6>
 8004d96:	6920      	ldr	r0, [r4, #16]
 8004d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d9c:	f104 0314 	add.w	r3, r4, #20
 8004da0:	f019 091f 	ands.w	r9, r9, #31
 8004da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004da8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dac:	d02b      	beq.n	8004e06 <__lshift+0xbe>
 8004dae:	f1c9 0e20 	rsb	lr, r9, #32
 8004db2:	468a      	mov	sl, r1
 8004db4:	2200      	movs	r2, #0
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	fa00 f009 	lsl.w	r0, r0, r9
 8004dbc:	4302      	orrs	r2, r0
 8004dbe:	f84a 2b04 	str.w	r2, [sl], #4
 8004dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc6:	459c      	cmp	ip, r3
 8004dc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004dcc:	d8f3      	bhi.n	8004db6 <__lshift+0x6e>
 8004dce:	ebac 0304 	sub.w	r3, ip, r4
 8004dd2:	3b15      	subs	r3, #21
 8004dd4:	f023 0303 	bic.w	r3, r3, #3
 8004dd8:	3304      	adds	r3, #4
 8004dda:	f104 0015 	add.w	r0, r4, #21
 8004dde:	4584      	cmp	ip, r0
 8004de0:	bf38      	it	cc
 8004de2:	2304      	movcc	r3, #4
 8004de4:	50ca      	str	r2, [r1, r3]
 8004de6:	b10a      	cbz	r2, 8004dec <__lshift+0xa4>
 8004de8:	f108 0602 	add.w	r6, r8, #2
 8004dec:	3e01      	subs	r6, #1
 8004dee:	4638      	mov	r0, r7
 8004df0:	612e      	str	r6, [r5, #16]
 8004df2:	4621      	mov	r1, r4
 8004df4:	f7ff fdd6 	bl	80049a4 <_Bfree>
 8004df8:	4628      	mov	r0, r5
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e02:	3301      	adds	r3, #1
 8004e04:	e7c5      	b.n	8004d92 <__lshift+0x4a>
 8004e06:	3904      	subs	r1, #4
 8004e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e10:	459c      	cmp	ip, r3
 8004e12:	d8f9      	bhi.n	8004e08 <__lshift+0xc0>
 8004e14:	e7ea      	b.n	8004dec <__lshift+0xa4>
 8004e16:	bf00      	nop
 8004e18:	080070cf 	.word	0x080070cf
 8004e1c:	080070e0 	.word	0x080070e0

08004e20 <__mcmp>:
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	6902      	ldr	r2, [r0, #16]
 8004e24:	690c      	ldr	r4, [r1, #16]
 8004e26:	1b12      	subs	r2, r2, r4
 8004e28:	d10e      	bne.n	8004e48 <__mcmp+0x28>
 8004e2a:	f100 0314 	add.w	r3, r0, #20
 8004e2e:	3114      	adds	r1, #20
 8004e30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004e34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004e38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004e3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004e40:	42a5      	cmp	r5, r4
 8004e42:	d003      	beq.n	8004e4c <__mcmp+0x2c>
 8004e44:	d305      	bcc.n	8004e52 <__mcmp+0x32>
 8004e46:	2201      	movs	r2, #1
 8004e48:	4610      	mov	r0, r2
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d3f3      	bcc.n	8004e38 <__mcmp+0x18>
 8004e50:	e7fa      	b.n	8004e48 <__mcmp+0x28>
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	e7f7      	b.n	8004e48 <__mcmp+0x28>

08004e58 <__mdiff>:
 8004e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	4606      	mov	r6, r0
 8004e60:	4611      	mov	r1, r2
 8004e62:	4620      	mov	r0, r4
 8004e64:	4617      	mov	r7, r2
 8004e66:	f7ff ffdb 	bl	8004e20 <__mcmp>
 8004e6a:	1e05      	subs	r5, r0, #0
 8004e6c:	d110      	bne.n	8004e90 <__mdiff+0x38>
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff fd57 	bl	8004924 <_Balloc>
 8004e76:	b930      	cbnz	r0, 8004e86 <__mdiff+0x2e>
 8004e78:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <__mdiff+0x108>)
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f240 2132 	movw	r1, #562	; 0x232
 8004e80:	4838      	ldr	r0, [pc, #224]	; (8004f64 <__mdiff+0x10c>)
 8004e82:	f000 faf3 	bl	800546c <__assert_func>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e90:	bfa4      	itt	ge
 8004e92:	463b      	movge	r3, r7
 8004e94:	4627      	movge	r7, r4
 8004e96:	4630      	mov	r0, r6
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	bfa6      	itte	ge
 8004e9c:	461c      	movge	r4, r3
 8004e9e:	2500      	movge	r5, #0
 8004ea0:	2501      	movlt	r5, #1
 8004ea2:	f7ff fd3f 	bl	8004924 <_Balloc>
 8004ea6:	b920      	cbnz	r0, 8004eb2 <__mdiff+0x5a>
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <__mdiff+0x108>)
 8004eaa:	4602      	mov	r2, r0
 8004eac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004eb0:	e7e6      	b.n	8004e80 <__mdiff+0x28>
 8004eb2:	693e      	ldr	r6, [r7, #16]
 8004eb4:	60c5      	str	r5, [r0, #12]
 8004eb6:	6925      	ldr	r5, [r4, #16]
 8004eb8:	f107 0114 	add.w	r1, r7, #20
 8004ebc:	f104 0914 	add.w	r9, r4, #20
 8004ec0:	f100 0e14 	add.w	lr, r0, #20
 8004ec4:	f107 0210 	add.w	r2, r7, #16
 8004ec8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004ecc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004ed0:	46f2      	mov	sl, lr
 8004ed2:	2700      	movs	r7, #0
 8004ed4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ed8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004edc:	fa1f f883 	uxth.w	r8, r3
 8004ee0:	fa17 f78b 	uxtah	r7, r7, fp
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	eba7 0808 	sub.w	r8, r7, r8
 8004eea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004eee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004ef2:	fa1f f888 	uxth.w	r8, r8
 8004ef6:	141f      	asrs	r7, r3, #16
 8004ef8:	454d      	cmp	r5, r9
 8004efa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004efe:	f84a 3b04 	str.w	r3, [sl], #4
 8004f02:	d8e7      	bhi.n	8004ed4 <__mdiff+0x7c>
 8004f04:	1b2b      	subs	r3, r5, r4
 8004f06:	3b15      	subs	r3, #21
 8004f08:	f023 0303 	bic.w	r3, r3, #3
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	3415      	adds	r4, #21
 8004f10:	42a5      	cmp	r5, r4
 8004f12:	bf38      	it	cc
 8004f14:	2304      	movcc	r3, #4
 8004f16:	4419      	add	r1, r3
 8004f18:	4473      	add	r3, lr
 8004f1a:	469e      	mov	lr, r3
 8004f1c:	460d      	mov	r5, r1
 8004f1e:	4565      	cmp	r5, ip
 8004f20:	d30e      	bcc.n	8004f40 <__mdiff+0xe8>
 8004f22:	f10c 0203 	add.w	r2, ip, #3
 8004f26:	1a52      	subs	r2, r2, r1
 8004f28:	f022 0203 	bic.w	r2, r2, #3
 8004f2c:	3903      	subs	r1, #3
 8004f2e:	458c      	cmp	ip, r1
 8004f30:	bf38      	it	cc
 8004f32:	2200      	movcc	r2, #0
 8004f34:	441a      	add	r2, r3
 8004f36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004f3a:	b17b      	cbz	r3, 8004f5c <__mdiff+0x104>
 8004f3c:	6106      	str	r6, [r0, #16]
 8004f3e:	e7a5      	b.n	8004e8c <__mdiff+0x34>
 8004f40:	f855 8b04 	ldr.w	r8, [r5], #4
 8004f44:	fa17 f488 	uxtah	r4, r7, r8
 8004f48:	1422      	asrs	r2, r4, #16
 8004f4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004f4e:	b2a4      	uxth	r4, r4
 8004f50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f54:	f84e 4b04 	str.w	r4, [lr], #4
 8004f58:	1417      	asrs	r7, r2, #16
 8004f5a:	e7e0      	b.n	8004f1e <__mdiff+0xc6>
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	e7ea      	b.n	8004f36 <__mdiff+0xde>
 8004f60:	080070cf 	.word	0x080070cf
 8004f64:	080070e0 	.word	0x080070e0

08004f68 <__d2b>:
 8004f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f6c:	4689      	mov	r9, r1
 8004f6e:	2101      	movs	r1, #1
 8004f70:	ec57 6b10 	vmov	r6, r7, d0
 8004f74:	4690      	mov	r8, r2
 8004f76:	f7ff fcd5 	bl	8004924 <_Balloc>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	b930      	cbnz	r0, 8004f8c <__d2b+0x24>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <__d2b+0xb0>)
 8004f82:	4826      	ldr	r0, [pc, #152]	; (800501c <__d2b+0xb4>)
 8004f84:	f240 310a 	movw	r1, #778	; 0x30a
 8004f88:	f000 fa70 	bl	800546c <__assert_func>
 8004f8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f94:	bb35      	cbnz	r5, 8004fe4 <__d2b+0x7c>
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	d028      	beq.n	8004fee <__d2b+0x86>
 8004f9c:	4668      	mov	r0, sp
 8004f9e:	9600      	str	r6, [sp, #0]
 8004fa0:	f7ff fd8c 	bl	8004abc <__lo0bits>
 8004fa4:	9900      	ldr	r1, [sp, #0]
 8004fa6:	b300      	cbz	r0, 8004fea <__d2b+0x82>
 8004fa8:	9a01      	ldr	r2, [sp, #4]
 8004faa:	f1c0 0320 	rsb	r3, r0, #32
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	40c2      	lsrs	r2, r0
 8004fb6:	6163      	str	r3, [r4, #20]
 8004fb8:	9201      	str	r2, [sp, #4]
 8004fba:	9b01      	ldr	r3, [sp, #4]
 8004fbc:	61a3      	str	r3, [r4, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2202      	movne	r2, #2
 8004fc4:	2201      	moveq	r2, #1
 8004fc6:	6122      	str	r2, [r4, #16]
 8004fc8:	b1d5      	cbz	r5, 8005000 <__d2b+0x98>
 8004fca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004fce:	4405      	add	r5, r0
 8004fd0:	f8c9 5000 	str.w	r5, [r9]
 8004fd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fd8:	f8c8 0000 	str.w	r0, [r8]
 8004fdc:	4620      	mov	r0, r4
 8004fde:	b003      	add	sp, #12
 8004fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe8:	e7d5      	b.n	8004f96 <__d2b+0x2e>
 8004fea:	6161      	str	r1, [r4, #20]
 8004fec:	e7e5      	b.n	8004fba <__d2b+0x52>
 8004fee:	a801      	add	r0, sp, #4
 8004ff0:	f7ff fd64 	bl	8004abc <__lo0bits>
 8004ff4:	9b01      	ldr	r3, [sp, #4]
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	6122      	str	r2, [r4, #16]
 8004ffc:	3020      	adds	r0, #32
 8004ffe:	e7e3      	b.n	8004fc8 <__d2b+0x60>
 8005000:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005004:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005008:	f8c9 0000 	str.w	r0, [r9]
 800500c:	6918      	ldr	r0, [r3, #16]
 800500e:	f7ff fd35 	bl	8004a7c <__hi0bits>
 8005012:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005016:	e7df      	b.n	8004fd8 <__d2b+0x70>
 8005018:	080070cf 	.word	0x080070cf
 800501c:	080070e0 	.word	0x080070e0

08005020 <_calloc_r>:
 8005020:	b513      	push	{r0, r1, r4, lr}
 8005022:	434a      	muls	r2, r1
 8005024:	4611      	mov	r1, r2
 8005026:	9201      	str	r2, [sp, #4]
 8005028:	f000 f85a 	bl	80050e0 <_malloc_r>
 800502c:	4604      	mov	r4, r0
 800502e:	b118      	cbz	r0, 8005038 <_calloc_r+0x18>
 8005030:	9a01      	ldr	r2, [sp, #4]
 8005032:	2100      	movs	r1, #0
 8005034:	f7fe f952 	bl	80032dc <memset>
 8005038:	4620      	mov	r0, r4
 800503a:	b002      	add	sp, #8
 800503c:	bd10      	pop	{r4, pc}
	...

08005040 <_free_r>:
 8005040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005042:	2900      	cmp	r1, #0
 8005044:	d048      	beq.n	80050d8 <_free_r+0x98>
 8005046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504a:	9001      	str	r0, [sp, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f1a1 0404 	sub.w	r4, r1, #4
 8005052:	bfb8      	it	lt
 8005054:	18e4      	addlt	r4, r4, r3
 8005056:	f000 fa65 	bl	8005524 <__malloc_lock>
 800505a:	4a20      	ldr	r2, [pc, #128]	; (80050dc <_free_r+0x9c>)
 800505c:	9801      	ldr	r0, [sp, #4]
 800505e:	6813      	ldr	r3, [r2, #0]
 8005060:	4615      	mov	r5, r2
 8005062:	b933      	cbnz	r3, 8005072 <_free_r+0x32>
 8005064:	6063      	str	r3, [r4, #4]
 8005066:	6014      	str	r4, [r2, #0]
 8005068:	b003      	add	sp, #12
 800506a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800506e:	f000 ba5f 	b.w	8005530 <__malloc_unlock>
 8005072:	42a3      	cmp	r3, r4
 8005074:	d90b      	bls.n	800508e <_free_r+0x4e>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	1862      	adds	r2, r4, r1
 800507a:	4293      	cmp	r3, r2
 800507c:	bf04      	itt	eq
 800507e:	681a      	ldreq	r2, [r3, #0]
 8005080:	685b      	ldreq	r3, [r3, #4]
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	bf04      	itt	eq
 8005086:	1852      	addeq	r2, r2, r1
 8005088:	6022      	streq	r2, [r4, #0]
 800508a:	602c      	str	r4, [r5, #0]
 800508c:	e7ec      	b.n	8005068 <_free_r+0x28>
 800508e:	461a      	mov	r2, r3
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	b10b      	cbz	r3, 8005098 <_free_r+0x58>
 8005094:	42a3      	cmp	r3, r4
 8005096:	d9fa      	bls.n	800508e <_free_r+0x4e>
 8005098:	6811      	ldr	r1, [r2, #0]
 800509a:	1855      	adds	r5, r2, r1
 800509c:	42a5      	cmp	r5, r4
 800509e:	d10b      	bne.n	80050b8 <_free_r+0x78>
 80050a0:	6824      	ldr	r4, [r4, #0]
 80050a2:	4421      	add	r1, r4
 80050a4:	1854      	adds	r4, r2, r1
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	6011      	str	r1, [r2, #0]
 80050aa:	d1dd      	bne.n	8005068 <_free_r+0x28>
 80050ac:	681c      	ldr	r4, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	6053      	str	r3, [r2, #4]
 80050b2:	4421      	add	r1, r4
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	e7d7      	b.n	8005068 <_free_r+0x28>
 80050b8:	d902      	bls.n	80050c0 <_free_r+0x80>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6003      	str	r3, [r0, #0]
 80050be:	e7d3      	b.n	8005068 <_free_r+0x28>
 80050c0:	6825      	ldr	r5, [r4, #0]
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	428b      	cmp	r3, r1
 80050c6:	bf04      	itt	eq
 80050c8:	6819      	ldreq	r1, [r3, #0]
 80050ca:	685b      	ldreq	r3, [r3, #4]
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	bf04      	itt	eq
 80050d0:	1949      	addeq	r1, r1, r5
 80050d2:	6021      	streq	r1, [r4, #0]
 80050d4:	6054      	str	r4, [r2, #4]
 80050d6:	e7c7      	b.n	8005068 <_free_r+0x28>
 80050d8:	b003      	add	sp, #12
 80050da:	bd30      	pop	{r4, r5, pc}
 80050dc:	20000210 	.word	0x20000210

080050e0 <_malloc_r>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	1ccd      	adds	r5, r1, #3
 80050e4:	f025 0503 	bic.w	r5, r5, #3
 80050e8:	3508      	adds	r5, #8
 80050ea:	2d0c      	cmp	r5, #12
 80050ec:	bf38      	it	cc
 80050ee:	250c      	movcc	r5, #12
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	4606      	mov	r6, r0
 80050f4:	db01      	blt.n	80050fa <_malloc_r+0x1a>
 80050f6:	42a9      	cmp	r1, r5
 80050f8:	d903      	bls.n	8005102 <_malloc_r+0x22>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	2000      	movs	r0, #0
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005102:	f000 fa0f 	bl	8005524 <__malloc_lock>
 8005106:	4921      	ldr	r1, [pc, #132]	; (800518c <_malloc_r+0xac>)
 8005108:	680a      	ldr	r2, [r1, #0]
 800510a:	4614      	mov	r4, r2
 800510c:	b99c      	cbnz	r4, 8005136 <_malloc_r+0x56>
 800510e:	4f20      	ldr	r7, [pc, #128]	; (8005190 <_malloc_r+0xb0>)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	b923      	cbnz	r3, 800511e <_malloc_r+0x3e>
 8005114:	4621      	mov	r1, r4
 8005116:	4630      	mov	r0, r6
 8005118:	f000 f998 	bl	800544c <_sbrk_r>
 800511c:	6038      	str	r0, [r7, #0]
 800511e:	4629      	mov	r1, r5
 8005120:	4630      	mov	r0, r6
 8005122:	f000 f993 	bl	800544c <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d123      	bne.n	8005172 <_malloc_r+0x92>
 800512a:	230c      	movs	r3, #12
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f9fe 	bl	8005530 <__malloc_unlock>
 8005134:	e7e3      	b.n	80050fe <_malloc_r+0x1e>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	1b5b      	subs	r3, r3, r5
 800513a:	d417      	bmi.n	800516c <_malloc_r+0x8c>
 800513c:	2b0b      	cmp	r3, #11
 800513e:	d903      	bls.n	8005148 <_malloc_r+0x68>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	441c      	add	r4, r3
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	e004      	b.n	8005152 <_malloc_r+0x72>
 8005148:	6863      	ldr	r3, [r4, #4]
 800514a:	42a2      	cmp	r2, r4
 800514c:	bf0c      	ite	eq
 800514e:	600b      	streq	r3, [r1, #0]
 8005150:	6053      	strne	r3, [r2, #4]
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f9ec 	bl	8005530 <__malloc_unlock>
 8005158:	f104 000b 	add.w	r0, r4, #11
 800515c:	1d23      	adds	r3, r4, #4
 800515e:	f020 0007 	bic.w	r0, r0, #7
 8005162:	1ac2      	subs	r2, r0, r3
 8005164:	d0cc      	beq.n	8005100 <_malloc_r+0x20>
 8005166:	1a1b      	subs	r3, r3, r0
 8005168:	50a3      	str	r3, [r4, r2]
 800516a:	e7c9      	b.n	8005100 <_malloc_r+0x20>
 800516c:	4622      	mov	r2, r4
 800516e:	6864      	ldr	r4, [r4, #4]
 8005170:	e7cc      	b.n	800510c <_malloc_r+0x2c>
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d0e3      	beq.n	8005144 <_malloc_r+0x64>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4630      	mov	r0, r6
 8005180:	f000 f964 	bl	800544c <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d1dd      	bne.n	8005144 <_malloc_r+0x64>
 8005188:	e7cf      	b.n	800512a <_malloc_r+0x4a>
 800518a:	bf00      	nop
 800518c:	20000210 	.word	0x20000210
 8005190:	20000214 	.word	0x20000214

08005194 <__ssputs_r>:
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	688e      	ldr	r6, [r1, #8]
 800519a:	429e      	cmp	r6, r3
 800519c:	4682      	mov	sl, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	4690      	mov	r8, r2
 80051a2:	461f      	mov	r7, r3
 80051a4:	d838      	bhi.n	8005218 <__ssputs_r+0x84>
 80051a6:	898a      	ldrh	r2, [r1, #12]
 80051a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051ac:	d032      	beq.n	8005214 <__ssputs_r+0x80>
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	6909      	ldr	r1, [r1, #16]
 80051b2:	eba5 0901 	sub.w	r9, r5, r1
 80051b6:	6965      	ldr	r5, [r4, #20]
 80051b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051c0:	3301      	adds	r3, #1
 80051c2:	444b      	add	r3, r9
 80051c4:	106d      	asrs	r5, r5, #1
 80051c6:	429d      	cmp	r5, r3
 80051c8:	bf38      	it	cc
 80051ca:	461d      	movcc	r5, r3
 80051cc:	0553      	lsls	r3, r2, #21
 80051ce:	d531      	bpl.n	8005234 <__ssputs_r+0xa0>
 80051d0:	4629      	mov	r1, r5
 80051d2:	f7ff ff85 	bl	80050e0 <_malloc_r>
 80051d6:	4606      	mov	r6, r0
 80051d8:	b950      	cbnz	r0, 80051f0 <__ssputs_r+0x5c>
 80051da:	230c      	movs	r3, #12
 80051dc:	f8ca 3000 	str.w	r3, [sl]
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f0:	6921      	ldr	r1, [r4, #16]
 80051f2:	464a      	mov	r2, r9
 80051f4:	f7ff fb88 	bl	8004908 <memcpy>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	6126      	str	r6, [r4, #16]
 8005206:	6165      	str	r5, [r4, #20]
 8005208:	444e      	add	r6, r9
 800520a:	eba5 0509 	sub.w	r5, r5, r9
 800520e:	6026      	str	r6, [r4, #0]
 8005210:	60a5      	str	r5, [r4, #8]
 8005212:	463e      	mov	r6, r7
 8005214:	42be      	cmp	r6, r7
 8005216:	d900      	bls.n	800521a <__ssputs_r+0x86>
 8005218:	463e      	mov	r6, r7
 800521a:	4632      	mov	r2, r6
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	4641      	mov	r1, r8
 8005220:	f000 f966 	bl	80054f0 <memmove>
 8005224:	68a3      	ldr	r3, [r4, #8]
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	1b9b      	subs	r3, r3, r6
 800522a:	4432      	add	r2, r6
 800522c:	60a3      	str	r3, [r4, #8]
 800522e:	6022      	str	r2, [r4, #0]
 8005230:	2000      	movs	r0, #0
 8005232:	e7db      	b.n	80051ec <__ssputs_r+0x58>
 8005234:	462a      	mov	r2, r5
 8005236:	f000 f981 	bl	800553c <_realloc_r>
 800523a:	4606      	mov	r6, r0
 800523c:	2800      	cmp	r0, #0
 800523e:	d1e1      	bne.n	8005204 <__ssputs_r+0x70>
 8005240:	6921      	ldr	r1, [r4, #16]
 8005242:	4650      	mov	r0, sl
 8005244:	f7ff fefc 	bl	8005040 <_free_r>
 8005248:	e7c7      	b.n	80051da <__ssputs_r+0x46>
	...

0800524c <_svfiprintf_r>:
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	4698      	mov	r8, r3
 8005252:	898b      	ldrh	r3, [r1, #12]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	b09d      	sub	sp, #116	; 0x74
 8005258:	4607      	mov	r7, r0
 800525a:	460d      	mov	r5, r1
 800525c:	4614      	mov	r4, r2
 800525e:	d50e      	bpl.n	800527e <_svfiprintf_r+0x32>
 8005260:	690b      	ldr	r3, [r1, #16]
 8005262:	b963      	cbnz	r3, 800527e <_svfiprintf_r+0x32>
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	f7ff ff3b 	bl	80050e0 <_malloc_r>
 800526a:	6028      	str	r0, [r5, #0]
 800526c:	6128      	str	r0, [r5, #16]
 800526e:	b920      	cbnz	r0, 800527a <_svfiprintf_r+0x2e>
 8005270:	230c      	movs	r3, #12
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	e0d1      	b.n	800541e <_svfiprintf_r+0x1d2>
 800527a:	2340      	movs	r3, #64	; 0x40
 800527c:	616b      	str	r3, [r5, #20]
 800527e:	2300      	movs	r3, #0
 8005280:	9309      	str	r3, [sp, #36]	; 0x24
 8005282:	2320      	movs	r3, #32
 8005284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005288:	f8cd 800c 	str.w	r8, [sp, #12]
 800528c:	2330      	movs	r3, #48	; 0x30
 800528e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005438 <_svfiprintf_r+0x1ec>
 8005292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005296:	f04f 0901 	mov.w	r9, #1
 800529a:	4623      	mov	r3, r4
 800529c:	469a      	mov	sl, r3
 800529e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a2:	b10a      	cbz	r2, 80052a8 <_svfiprintf_r+0x5c>
 80052a4:	2a25      	cmp	r2, #37	; 0x25
 80052a6:	d1f9      	bne.n	800529c <_svfiprintf_r+0x50>
 80052a8:	ebba 0b04 	subs.w	fp, sl, r4
 80052ac:	d00b      	beq.n	80052c6 <_svfiprintf_r+0x7a>
 80052ae:	465b      	mov	r3, fp
 80052b0:	4622      	mov	r2, r4
 80052b2:	4629      	mov	r1, r5
 80052b4:	4638      	mov	r0, r7
 80052b6:	f7ff ff6d 	bl	8005194 <__ssputs_r>
 80052ba:	3001      	adds	r0, #1
 80052bc:	f000 80aa 	beq.w	8005414 <_svfiprintf_r+0x1c8>
 80052c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c2:	445a      	add	r2, fp
 80052c4:	9209      	str	r2, [sp, #36]	; 0x24
 80052c6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a2 	beq.w	8005414 <_svfiprintf_r+0x1c8>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052da:	f10a 0a01 	add.w	sl, sl, #1
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	9307      	str	r3, [sp, #28]
 80052e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e6:	931a      	str	r3, [sp, #104]	; 0x68
 80052e8:	4654      	mov	r4, sl
 80052ea:	2205      	movs	r2, #5
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	4851      	ldr	r0, [pc, #324]	; (8005438 <_svfiprintf_r+0x1ec>)
 80052f2:	f7fa ff75 	bl	80001e0 <memchr>
 80052f6:	9a04      	ldr	r2, [sp, #16]
 80052f8:	b9d8      	cbnz	r0, 8005332 <_svfiprintf_r+0xe6>
 80052fa:	06d0      	lsls	r0, r2, #27
 80052fc:	bf44      	itt	mi
 80052fe:	2320      	movmi	r3, #32
 8005300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005304:	0711      	lsls	r1, r2, #28
 8005306:	bf44      	itt	mi
 8005308:	232b      	movmi	r3, #43	; 0x2b
 800530a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530e:	f89a 3000 	ldrb.w	r3, [sl]
 8005312:	2b2a      	cmp	r3, #42	; 0x2a
 8005314:	d015      	beq.n	8005342 <_svfiprintf_r+0xf6>
 8005316:	9a07      	ldr	r2, [sp, #28]
 8005318:	4654      	mov	r4, sl
 800531a:	2000      	movs	r0, #0
 800531c:	f04f 0c0a 	mov.w	ip, #10
 8005320:	4621      	mov	r1, r4
 8005322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005326:	3b30      	subs	r3, #48	; 0x30
 8005328:	2b09      	cmp	r3, #9
 800532a:	d94e      	bls.n	80053ca <_svfiprintf_r+0x17e>
 800532c:	b1b0      	cbz	r0, 800535c <_svfiprintf_r+0x110>
 800532e:	9207      	str	r2, [sp, #28]
 8005330:	e014      	b.n	800535c <_svfiprintf_r+0x110>
 8005332:	eba0 0308 	sub.w	r3, r0, r8
 8005336:	fa09 f303 	lsl.w	r3, r9, r3
 800533a:	4313      	orrs	r3, r2
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	46a2      	mov	sl, r4
 8005340:	e7d2      	b.n	80052e8 <_svfiprintf_r+0x9c>
 8005342:	9b03      	ldr	r3, [sp, #12]
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	9103      	str	r1, [sp, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfbb      	ittet	lt
 800534e:	425b      	neglt	r3, r3
 8005350:	f042 0202 	orrlt.w	r2, r2, #2
 8005354:	9307      	strge	r3, [sp, #28]
 8005356:	9307      	strlt	r3, [sp, #28]
 8005358:	bfb8      	it	lt
 800535a:	9204      	strlt	r2, [sp, #16]
 800535c:	7823      	ldrb	r3, [r4, #0]
 800535e:	2b2e      	cmp	r3, #46	; 0x2e
 8005360:	d10c      	bne.n	800537c <_svfiprintf_r+0x130>
 8005362:	7863      	ldrb	r3, [r4, #1]
 8005364:	2b2a      	cmp	r3, #42	; 0x2a
 8005366:	d135      	bne.n	80053d4 <_svfiprintf_r+0x188>
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	9203      	str	r2, [sp, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfb8      	it	lt
 8005374:	f04f 33ff 	movlt.w	r3, #4294967295
 8005378:	3402      	adds	r4, #2
 800537a:	9305      	str	r3, [sp, #20]
 800537c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005448 <_svfiprintf_r+0x1fc>
 8005380:	7821      	ldrb	r1, [r4, #0]
 8005382:	2203      	movs	r2, #3
 8005384:	4650      	mov	r0, sl
 8005386:	f7fa ff2b 	bl	80001e0 <memchr>
 800538a:	b140      	cbz	r0, 800539e <_svfiprintf_r+0x152>
 800538c:	2340      	movs	r3, #64	; 0x40
 800538e:	eba0 000a 	sub.w	r0, r0, sl
 8005392:	fa03 f000 	lsl.w	r0, r3, r0
 8005396:	9b04      	ldr	r3, [sp, #16]
 8005398:	4303      	orrs	r3, r0
 800539a:	3401      	adds	r4, #1
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a2:	4826      	ldr	r0, [pc, #152]	; (800543c <_svfiprintf_r+0x1f0>)
 80053a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a8:	2206      	movs	r2, #6
 80053aa:	f7fa ff19 	bl	80001e0 <memchr>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d038      	beq.n	8005424 <_svfiprintf_r+0x1d8>
 80053b2:	4b23      	ldr	r3, [pc, #140]	; (8005440 <_svfiprintf_r+0x1f4>)
 80053b4:	bb1b      	cbnz	r3, 80053fe <_svfiprintf_r+0x1b2>
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	3307      	adds	r3, #7
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	3308      	adds	r3, #8
 80053c0:	9303      	str	r3, [sp, #12]
 80053c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c4:	4433      	add	r3, r6
 80053c6:	9309      	str	r3, [sp, #36]	; 0x24
 80053c8:	e767      	b.n	800529a <_svfiprintf_r+0x4e>
 80053ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ce:	460c      	mov	r4, r1
 80053d0:	2001      	movs	r0, #1
 80053d2:	e7a5      	b.n	8005320 <_svfiprintf_r+0xd4>
 80053d4:	2300      	movs	r3, #0
 80053d6:	3401      	adds	r4, #1
 80053d8:	9305      	str	r3, [sp, #20]
 80053da:	4619      	mov	r1, r3
 80053dc:	f04f 0c0a 	mov.w	ip, #10
 80053e0:	4620      	mov	r0, r4
 80053e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053e6:	3a30      	subs	r2, #48	; 0x30
 80053e8:	2a09      	cmp	r2, #9
 80053ea:	d903      	bls.n	80053f4 <_svfiprintf_r+0x1a8>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0c5      	beq.n	800537c <_svfiprintf_r+0x130>
 80053f0:	9105      	str	r1, [sp, #20]
 80053f2:	e7c3      	b.n	800537c <_svfiprintf_r+0x130>
 80053f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f8:	4604      	mov	r4, r0
 80053fa:	2301      	movs	r3, #1
 80053fc:	e7f0      	b.n	80053e0 <_svfiprintf_r+0x194>
 80053fe:	ab03      	add	r3, sp, #12
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	462a      	mov	r2, r5
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <_svfiprintf_r+0x1f8>)
 8005406:	a904      	add	r1, sp, #16
 8005408:	4638      	mov	r0, r7
 800540a:	f7fe f80f 	bl	800342c <_printf_float>
 800540e:	1c42      	adds	r2, r0, #1
 8005410:	4606      	mov	r6, r0
 8005412:	d1d6      	bne.n	80053c2 <_svfiprintf_r+0x176>
 8005414:	89ab      	ldrh	r3, [r5, #12]
 8005416:	065b      	lsls	r3, r3, #25
 8005418:	f53f af2c 	bmi.w	8005274 <_svfiprintf_r+0x28>
 800541c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800541e:	b01d      	add	sp, #116	; 0x74
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	462a      	mov	r2, r5
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <_svfiprintf_r+0x1f8>)
 800542c:	a904      	add	r1, sp, #16
 800542e:	4638      	mov	r0, r7
 8005430:	f7fe faa0 	bl	8003974 <_printf_i>
 8005434:	e7eb      	b.n	800540e <_svfiprintf_r+0x1c2>
 8005436:	bf00      	nop
 8005438:	0800723c 	.word	0x0800723c
 800543c:	08007246 	.word	0x08007246
 8005440:	0800342d 	.word	0x0800342d
 8005444:	08005195 	.word	0x08005195
 8005448:	08007242 	.word	0x08007242

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	; (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fc fff6 	bl	8002448 <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000230 	.word	0x20000230

0800546c <__assert_func>:
 800546c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800546e:	4614      	mov	r4, r2
 8005470:	461a      	mov	r2, r3
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <__assert_func+0x2c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4605      	mov	r5, r0
 8005478:	68d8      	ldr	r0, [r3, #12]
 800547a:	b14c      	cbz	r4, 8005490 <__assert_func+0x24>
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <__assert_func+0x30>)
 800547e:	9100      	str	r1, [sp, #0]
 8005480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005484:	4906      	ldr	r1, [pc, #24]	; (80054a0 <__assert_func+0x34>)
 8005486:	462b      	mov	r3, r5
 8005488:	f000 f80e 	bl	80054a8 <fiprintf>
 800548c:	f000 faa4 	bl	80059d8 <abort>
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <__assert_func+0x38>)
 8005492:	461c      	mov	r4, r3
 8005494:	e7f3      	b.n	800547e <__assert_func+0x12>
 8005496:	bf00      	nop
 8005498:	20000008 	.word	0x20000008
 800549c:	0800724d 	.word	0x0800724d
 80054a0:	0800725a 	.word	0x0800725a
 80054a4:	08007288 	.word	0x08007288

080054a8 <fiprintf>:
 80054a8:	b40e      	push	{r1, r2, r3}
 80054aa:	b503      	push	{r0, r1, lr}
 80054ac:	4601      	mov	r1, r0
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	4805      	ldr	r0, [pc, #20]	; (80054c8 <fiprintf+0x20>)
 80054b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054b6:	6800      	ldr	r0, [r0, #0]
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	f000 f88f 	bl	80055dc <_vfiprintf_r>
 80054be:	b002      	add	sp, #8
 80054c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c4:	b003      	add	sp, #12
 80054c6:	4770      	bx	lr
 80054c8:	20000008 	.word	0x20000008

080054cc <__ascii_mbtowc>:
 80054cc:	b082      	sub	sp, #8
 80054ce:	b901      	cbnz	r1, 80054d2 <__ascii_mbtowc+0x6>
 80054d0:	a901      	add	r1, sp, #4
 80054d2:	b142      	cbz	r2, 80054e6 <__ascii_mbtowc+0x1a>
 80054d4:	b14b      	cbz	r3, 80054ea <__ascii_mbtowc+0x1e>
 80054d6:	7813      	ldrb	r3, [r2, #0]
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	1e10      	subs	r0, r2, #0
 80054de:	bf18      	it	ne
 80054e0:	2001      	movne	r0, #1
 80054e2:	b002      	add	sp, #8
 80054e4:	4770      	bx	lr
 80054e6:	4610      	mov	r0, r2
 80054e8:	e7fb      	b.n	80054e2 <__ascii_mbtowc+0x16>
 80054ea:	f06f 0001 	mvn.w	r0, #1
 80054ee:	e7f8      	b.n	80054e2 <__ascii_mbtowc+0x16>

080054f0 <memmove>:
 80054f0:	4288      	cmp	r0, r1
 80054f2:	b510      	push	{r4, lr}
 80054f4:	eb01 0402 	add.w	r4, r1, r2
 80054f8:	d902      	bls.n	8005500 <memmove+0x10>
 80054fa:	4284      	cmp	r4, r0
 80054fc:	4623      	mov	r3, r4
 80054fe:	d807      	bhi.n	8005510 <memmove+0x20>
 8005500:	1e43      	subs	r3, r0, #1
 8005502:	42a1      	cmp	r1, r4
 8005504:	d008      	beq.n	8005518 <memmove+0x28>
 8005506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800550a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800550e:	e7f8      	b.n	8005502 <memmove+0x12>
 8005510:	4402      	add	r2, r0
 8005512:	4601      	mov	r1, r0
 8005514:	428a      	cmp	r2, r1
 8005516:	d100      	bne.n	800551a <memmove+0x2a>
 8005518:	bd10      	pop	{r4, pc}
 800551a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800551e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005522:	e7f7      	b.n	8005514 <memmove+0x24>

08005524 <__malloc_lock>:
 8005524:	4801      	ldr	r0, [pc, #4]	; (800552c <__malloc_lock+0x8>)
 8005526:	f000 bc17 	b.w	8005d58 <__retarget_lock_acquire_recursive>
 800552a:	bf00      	nop
 800552c:	20000238 	.word	0x20000238

08005530 <__malloc_unlock>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__malloc_unlock+0x8>)
 8005532:	f000 bc12 	b.w	8005d5a <__retarget_lock_release_recursive>
 8005536:	bf00      	nop
 8005538:	20000238 	.word	0x20000238

0800553c <_realloc_r>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	4607      	mov	r7, r0
 8005540:	4614      	mov	r4, r2
 8005542:	460e      	mov	r6, r1
 8005544:	b921      	cbnz	r1, 8005550 <_realloc_r+0x14>
 8005546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800554a:	4611      	mov	r1, r2
 800554c:	f7ff bdc8 	b.w	80050e0 <_malloc_r>
 8005550:	b922      	cbnz	r2, 800555c <_realloc_r+0x20>
 8005552:	f7ff fd75 	bl	8005040 <_free_r>
 8005556:	4625      	mov	r5, r4
 8005558:	4628      	mov	r0, r5
 800555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800555c:	f000 fc62 	bl	8005e24 <_malloc_usable_size_r>
 8005560:	42a0      	cmp	r0, r4
 8005562:	d20f      	bcs.n	8005584 <_realloc_r+0x48>
 8005564:	4621      	mov	r1, r4
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff fdba 	bl	80050e0 <_malloc_r>
 800556c:	4605      	mov	r5, r0
 800556e:	2800      	cmp	r0, #0
 8005570:	d0f2      	beq.n	8005558 <_realloc_r+0x1c>
 8005572:	4631      	mov	r1, r6
 8005574:	4622      	mov	r2, r4
 8005576:	f7ff f9c7 	bl	8004908 <memcpy>
 800557a:	4631      	mov	r1, r6
 800557c:	4638      	mov	r0, r7
 800557e:	f7ff fd5f 	bl	8005040 <_free_r>
 8005582:	e7e9      	b.n	8005558 <_realloc_r+0x1c>
 8005584:	4635      	mov	r5, r6
 8005586:	e7e7      	b.n	8005558 <_realloc_r+0x1c>

08005588 <__sfputc_r>:
 8005588:	6893      	ldr	r3, [r2, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	b410      	push	{r4}
 8005590:	6093      	str	r3, [r2, #8]
 8005592:	da08      	bge.n	80055a6 <__sfputc_r+0x1e>
 8005594:	6994      	ldr	r4, [r2, #24]
 8005596:	42a3      	cmp	r3, r4
 8005598:	db01      	blt.n	800559e <__sfputc_r+0x16>
 800559a:	290a      	cmp	r1, #10
 800559c:	d103      	bne.n	80055a6 <__sfputc_r+0x1e>
 800559e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a2:	f000 b94b 	b.w	800583c <__swbuf_r>
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	1c58      	adds	r0, r3, #1
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	7019      	strb	r1, [r3, #0]
 80055ae:	4608      	mov	r0, r1
 80055b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <__sfputs_r>:
 80055b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	18d5      	adds	r5, r2, r3
 80055c0:	42ac      	cmp	r4, r5
 80055c2:	d101      	bne.n	80055c8 <__sfputs_r+0x12>
 80055c4:	2000      	movs	r0, #0
 80055c6:	e007      	b.n	80055d8 <__sfputs_r+0x22>
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	463a      	mov	r2, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffda 	bl	8005588 <__sfputc_r>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d1f3      	bne.n	80055c0 <__sfputs_r+0xa>
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055dc <_vfiprintf_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	460d      	mov	r5, r1
 80055e2:	b09d      	sub	sp, #116	; 0x74
 80055e4:	4614      	mov	r4, r2
 80055e6:	4698      	mov	r8, r3
 80055e8:	4606      	mov	r6, r0
 80055ea:	b118      	cbz	r0, 80055f4 <_vfiprintf_r+0x18>
 80055ec:	6983      	ldr	r3, [r0, #24]
 80055ee:	b90b      	cbnz	r3, 80055f4 <_vfiprintf_r+0x18>
 80055f0:	f000 fb14 	bl	8005c1c <__sinit>
 80055f4:	4b89      	ldr	r3, [pc, #548]	; (800581c <_vfiprintf_r+0x240>)
 80055f6:	429d      	cmp	r5, r3
 80055f8:	d11b      	bne.n	8005632 <_vfiprintf_r+0x56>
 80055fa:	6875      	ldr	r5, [r6, #4]
 80055fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055fe:	07d9      	lsls	r1, r3, #31
 8005600:	d405      	bmi.n	800560e <_vfiprintf_r+0x32>
 8005602:	89ab      	ldrh	r3, [r5, #12]
 8005604:	059a      	lsls	r2, r3, #22
 8005606:	d402      	bmi.n	800560e <_vfiprintf_r+0x32>
 8005608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560a:	f000 fba5 	bl	8005d58 <__retarget_lock_acquire_recursive>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	071b      	lsls	r3, r3, #28
 8005612:	d501      	bpl.n	8005618 <_vfiprintf_r+0x3c>
 8005614:	692b      	ldr	r3, [r5, #16]
 8005616:	b9eb      	cbnz	r3, 8005654 <_vfiprintf_r+0x78>
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f000 f96e 	bl	80058fc <__swsetup_r>
 8005620:	b1c0      	cbz	r0, 8005654 <_vfiprintf_r+0x78>
 8005622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005624:	07dc      	lsls	r4, r3, #31
 8005626:	d50e      	bpl.n	8005646 <_vfiprintf_r+0x6a>
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	b01d      	add	sp, #116	; 0x74
 800562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005632:	4b7b      	ldr	r3, [pc, #492]	; (8005820 <_vfiprintf_r+0x244>)
 8005634:	429d      	cmp	r5, r3
 8005636:	d101      	bne.n	800563c <_vfiprintf_r+0x60>
 8005638:	68b5      	ldr	r5, [r6, #8]
 800563a:	e7df      	b.n	80055fc <_vfiprintf_r+0x20>
 800563c:	4b79      	ldr	r3, [pc, #484]	; (8005824 <_vfiprintf_r+0x248>)
 800563e:	429d      	cmp	r5, r3
 8005640:	bf08      	it	eq
 8005642:	68f5      	ldreq	r5, [r6, #12]
 8005644:	e7da      	b.n	80055fc <_vfiprintf_r+0x20>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	0598      	lsls	r0, r3, #22
 800564a:	d4ed      	bmi.n	8005628 <_vfiprintf_r+0x4c>
 800564c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564e:	f000 fb84 	bl	8005d5a <__retarget_lock_release_recursive>
 8005652:	e7e9      	b.n	8005628 <_vfiprintf_r+0x4c>
 8005654:	2300      	movs	r3, #0
 8005656:	9309      	str	r3, [sp, #36]	; 0x24
 8005658:	2320      	movs	r3, #32
 800565a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800565e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005662:	2330      	movs	r3, #48	; 0x30
 8005664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005828 <_vfiprintf_r+0x24c>
 8005668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800566c:	f04f 0901 	mov.w	r9, #1
 8005670:	4623      	mov	r3, r4
 8005672:	469a      	mov	sl, r3
 8005674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005678:	b10a      	cbz	r2, 800567e <_vfiprintf_r+0xa2>
 800567a:	2a25      	cmp	r2, #37	; 0x25
 800567c:	d1f9      	bne.n	8005672 <_vfiprintf_r+0x96>
 800567e:	ebba 0b04 	subs.w	fp, sl, r4
 8005682:	d00b      	beq.n	800569c <_vfiprintf_r+0xc0>
 8005684:	465b      	mov	r3, fp
 8005686:	4622      	mov	r2, r4
 8005688:	4629      	mov	r1, r5
 800568a:	4630      	mov	r0, r6
 800568c:	f7ff ff93 	bl	80055b6 <__sfputs_r>
 8005690:	3001      	adds	r0, #1
 8005692:	f000 80aa 	beq.w	80057ea <_vfiprintf_r+0x20e>
 8005696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005698:	445a      	add	r2, fp
 800569a:	9209      	str	r2, [sp, #36]	; 0x24
 800569c:	f89a 3000 	ldrb.w	r3, [sl]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80a2 	beq.w	80057ea <_vfiprintf_r+0x20e>
 80056a6:	2300      	movs	r3, #0
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b0:	f10a 0a01 	add.w	sl, sl, #1
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	9307      	str	r3, [sp, #28]
 80056b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056bc:	931a      	str	r3, [sp, #104]	; 0x68
 80056be:	4654      	mov	r4, sl
 80056c0:	2205      	movs	r2, #5
 80056c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c6:	4858      	ldr	r0, [pc, #352]	; (8005828 <_vfiprintf_r+0x24c>)
 80056c8:	f7fa fd8a 	bl	80001e0 <memchr>
 80056cc:	9a04      	ldr	r2, [sp, #16]
 80056ce:	b9d8      	cbnz	r0, 8005708 <_vfiprintf_r+0x12c>
 80056d0:	06d1      	lsls	r1, r2, #27
 80056d2:	bf44      	itt	mi
 80056d4:	2320      	movmi	r3, #32
 80056d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056da:	0713      	lsls	r3, r2, #28
 80056dc:	bf44      	itt	mi
 80056de:	232b      	movmi	r3, #43	; 0x2b
 80056e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056e4:	f89a 3000 	ldrb.w	r3, [sl]
 80056e8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ea:	d015      	beq.n	8005718 <_vfiprintf_r+0x13c>
 80056ec:	9a07      	ldr	r2, [sp, #28]
 80056ee:	4654      	mov	r4, sl
 80056f0:	2000      	movs	r0, #0
 80056f2:	f04f 0c0a 	mov.w	ip, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056fc:	3b30      	subs	r3, #48	; 0x30
 80056fe:	2b09      	cmp	r3, #9
 8005700:	d94e      	bls.n	80057a0 <_vfiprintf_r+0x1c4>
 8005702:	b1b0      	cbz	r0, 8005732 <_vfiprintf_r+0x156>
 8005704:	9207      	str	r2, [sp, #28]
 8005706:	e014      	b.n	8005732 <_vfiprintf_r+0x156>
 8005708:	eba0 0308 	sub.w	r3, r0, r8
 800570c:	fa09 f303 	lsl.w	r3, r9, r3
 8005710:	4313      	orrs	r3, r2
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	46a2      	mov	sl, r4
 8005716:	e7d2      	b.n	80056be <_vfiprintf_r+0xe2>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	1d19      	adds	r1, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9103      	str	r1, [sp, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfbb      	ittet	lt
 8005724:	425b      	neglt	r3, r3
 8005726:	f042 0202 	orrlt.w	r2, r2, #2
 800572a:	9307      	strge	r3, [sp, #28]
 800572c:	9307      	strlt	r3, [sp, #28]
 800572e:	bfb8      	it	lt
 8005730:	9204      	strlt	r2, [sp, #16]
 8005732:	7823      	ldrb	r3, [r4, #0]
 8005734:	2b2e      	cmp	r3, #46	; 0x2e
 8005736:	d10c      	bne.n	8005752 <_vfiprintf_r+0x176>
 8005738:	7863      	ldrb	r3, [r4, #1]
 800573a:	2b2a      	cmp	r3, #42	; 0x2a
 800573c:	d135      	bne.n	80057aa <_vfiprintf_r+0x1ce>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	9203      	str	r2, [sp, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfb8      	it	lt
 800574a:	f04f 33ff 	movlt.w	r3, #4294967295
 800574e:	3402      	adds	r4, #2
 8005750:	9305      	str	r3, [sp, #20]
 8005752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005838 <_vfiprintf_r+0x25c>
 8005756:	7821      	ldrb	r1, [r4, #0]
 8005758:	2203      	movs	r2, #3
 800575a:	4650      	mov	r0, sl
 800575c:	f7fa fd40 	bl	80001e0 <memchr>
 8005760:	b140      	cbz	r0, 8005774 <_vfiprintf_r+0x198>
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	eba0 000a 	sub.w	r0, r0, sl
 8005768:	fa03 f000 	lsl.w	r0, r3, r0
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	4303      	orrs	r3, r0
 8005770:	3401      	adds	r4, #1
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005778:	482c      	ldr	r0, [pc, #176]	; (800582c <_vfiprintf_r+0x250>)
 800577a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800577e:	2206      	movs	r2, #6
 8005780:	f7fa fd2e 	bl	80001e0 <memchr>
 8005784:	2800      	cmp	r0, #0
 8005786:	d03f      	beq.n	8005808 <_vfiprintf_r+0x22c>
 8005788:	4b29      	ldr	r3, [pc, #164]	; (8005830 <_vfiprintf_r+0x254>)
 800578a:	bb1b      	cbnz	r3, 80057d4 <_vfiprintf_r+0x1f8>
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	3307      	adds	r3, #7
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	9303      	str	r3, [sp, #12]
 8005798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579a:	443b      	add	r3, r7
 800579c:	9309      	str	r3, [sp, #36]	; 0x24
 800579e:	e767      	b.n	8005670 <_vfiprintf_r+0x94>
 80057a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057a4:	460c      	mov	r4, r1
 80057a6:	2001      	movs	r0, #1
 80057a8:	e7a5      	b.n	80056f6 <_vfiprintf_r+0x11a>
 80057aa:	2300      	movs	r3, #0
 80057ac:	3401      	adds	r4, #1
 80057ae:	9305      	str	r3, [sp, #20]
 80057b0:	4619      	mov	r1, r3
 80057b2:	f04f 0c0a 	mov.w	ip, #10
 80057b6:	4620      	mov	r0, r4
 80057b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057bc:	3a30      	subs	r2, #48	; 0x30
 80057be:	2a09      	cmp	r2, #9
 80057c0:	d903      	bls.n	80057ca <_vfiprintf_r+0x1ee>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0c5      	beq.n	8005752 <_vfiprintf_r+0x176>
 80057c6:	9105      	str	r1, [sp, #20]
 80057c8:	e7c3      	b.n	8005752 <_vfiprintf_r+0x176>
 80057ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ce:	4604      	mov	r4, r0
 80057d0:	2301      	movs	r3, #1
 80057d2:	e7f0      	b.n	80057b6 <_vfiprintf_r+0x1da>
 80057d4:	ab03      	add	r3, sp, #12
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	462a      	mov	r2, r5
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <_vfiprintf_r+0x258>)
 80057dc:	a904      	add	r1, sp, #16
 80057de:	4630      	mov	r0, r6
 80057e0:	f7fd fe24 	bl	800342c <_printf_float>
 80057e4:	4607      	mov	r7, r0
 80057e6:	1c78      	adds	r0, r7, #1
 80057e8:	d1d6      	bne.n	8005798 <_vfiprintf_r+0x1bc>
 80057ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057ec:	07d9      	lsls	r1, r3, #31
 80057ee:	d405      	bmi.n	80057fc <_vfiprintf_r+0x220>
 80057f0:	89ab      	ldrh	r3, [r5, #12]
 80057f2:	059a      	lsls	r2, r3, #22
 80057f4:	d402      	bmi.n	80057fc <_vfiprintf_r+0x220>
 80057f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f8:	f000 faaf 	bl	8005d5a <__retarget_lock_release_recursive>
 80057fc:	89ab      	ldrh	r3, [r5, #12]
 80057fe:	065b      	lsls	r3, r3, #25
 8005800:	f53f af12 	bmi.w	8005628 <_vfiprintf_r+0x4c>
 8005804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005806:	e711      	b.n	800562c <_vfiprintf_r+0x50>
 8005808:	ab03      	add	r3, sp, #12
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	462a      	mov	r2, r5
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <_vfiprintf_r+0x258>)
 8005810:	a904      	add	r1, sp, #16
 8005812:	4630      	mov	r0, r6
 8005814:	f7fe f8ae 	bl	8003974 <_printf_i>
 8005818:	e7e4      	b.n	80057e4 <_vfiprintf_r+0x208>
 800581a:	bf00      	nop
 800581c:	080073b4 	.word	0x080073b4
 8005820:	080073d4 	.word	0x080073d4
 8005824:	08007394 	.word	0x08007394
 8005828:	0800723c 	.word	0x0800723c
 800582c:	08007246 	.word	0x08007246
 8005830:	0800342d 	.word	0x0800342d
 8005834:	080055b7 	.word	0x080055b7
 8005838:	08007242 	.word	0x08007242

0800583c <__swbuf_r>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	460e      	mov	r6, r1
 8005840:	4614      	mov	r4, r2
 8005842:	4605      	mov	r5, r0
 8005844:	b118      	cbz	r0, 800584e <__swbuf_r+0x12>
 8005846:	6983      	ldr	r3, [r0, #24]
 8005848:	b90b      	cbnz	r3, 800584e <__swbuf_r+0x12>
 800584a:	f000 f9e7 	bl	8005c1c <__sinit>
 800584e:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <__swbuf_r+0x98>)
 8005850:	429c      	cmp	r4, r3
 8005852:	d12b      	bne.n	80058ac <__swbuf_r+0x70>
 8005854:	686c      	ldr	r4, [r5, #4]
 8005856:	69a3      	ldr	r3, [r4, #24]
 8005858:	60a3      	str	r3, [r4, #8]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	071a      	lsls	r2, r3, #28
 800585e:	d52f      	bpl.n	80058c0 <__swbuf_r+0x84>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	b36b      	cbz	r3, 80058c0 <__swbuf_r+0x84>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	6820      	ldr	r0, [r4, #0]
 8005868:	1ac0      	subs	r0, r0, r3
 800586a:	6963      	ldr	r3, [r4, #20]
 800586c:	b2f6      	uxtb	r6, r6
 800586e:	4283      	cmp	r3, r0
 8005870:	4637      	mov	r7, r6
 8005872:	dc04      	bgt.n	800587e <__swbuf_r+0x42>
 8005874:	4621      	mov	r1, r4
 8005876:	4628      	mov	r0, r5
 8005878:	f000 f93c 	bl	8005af4 <_fflush_r>
 800587c:	bb30      	cbnz	r0, 80058cc <__swbuf_r+0x90>
 800587e:	68a3      	ldr	r3, [r4, #8]
 8005880:	3b01      	subs	r3, #1
 8005882:	60a3      	str	r3, [r4, #8]
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	6022      	str	r2, [r4, #0]
 800588a:	701e      	strb	r6, [r3, #0]
 800588c:	6963      	ldr	r3, [r4, #20]
 800588e:	3001      	adds	r0, #1
 8005890:	4283      	cmp	r3, r0
 8005892:	d004      	beq.n	800589e <__swbuf_r+0x62>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	07db      	lsls	r3, r3, #31
 8005898:	d506      	bpl.n	80058a8 <__swbuf_r+0x6c>
 800589a:	2e0a      	cmp	r6, #10
 800589c:	d104      	bne.n	80058a8 <__swbuf_r+0x6c>
 800589e:	4621      	mov	r1, r4
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 f927 	bl	8005af4 <_fflush_r>
 80058a6:	b988      	cbnz	r0, 80058cc <__swbuf_r+0x90>
 80058a8:	4638      	mov	r0, r7
 80058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <__swbuf_r+0x9c>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d101      	bne.n	80058b6 <__swbuf_r+0x7a>
 80058b2:	68ac      	ldr	r4, [r5, #8]
 80058b4:	e7cf      	b.n	8005856 <__swbuf_r+0x1a>
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <__swbuf_r+0xa0>)
 80058b8:	429c      	cmp	r4, r3
 80058ba:	bf08      	it	eq
 80058bc:	68ec      	ldreq	r4, [r5, #12]
 80058be:	e7ca      	b.n	8005856 <__swbuf_r+0x1a>
 80058c0:	4621      	mov	r1, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f81a 	bl	80058fc <__swsetup_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d0cb      	beq.n	8005864 <__swbuf_r+0x28>
 80058cc:	f04f 37ff 	mov.w	r7, #4294967295
 80058d0:	e7ea      	b.n	80058a8 <__swbuf_r+0x6c>
 80058d2:	bf00      	nop
 80058d4:	080073b4 	.word	0x080073b4
 80058d8:	080073d4 	.word	0x080073d4
 80058dc:	08007394 	.word	0x08007394

080058e0 <__ascii_wctomb>:
 80058e0:	b149      	cbz	r1, 80058f6 <__ascii_wctomb+0x16>
 80058e2:	2aff      	cmp	r2, #255	; 0xff
 80058e4:	bf85      	ittet	hi
 80058e6:	238a      	movhi	r3, #138	; 0x8a
 80058e8:	6003      	strhi	r3, [r0, #0]
 80058ea:	700a      	strbls	r2, [r1, #0]
 80058ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80058f0:	bf98      	it	ls
 80058f2:	2001      	movls	r0, #1
 80058f4:	4770      	bx	lr
 80058f6:	4608      	mov	r0, r1
 80058f8:	4770      	bx	lr
	...

080058fc <__swsetup_r>:
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <__swsetup_r+0xcc>)
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	681d      	ldr	r5, [r3, #0]
 8005902:	4606      	mov	r6, r0
 8005904:	460c      	mov	r4, r1
 8005906:	b125      	cbz	r5, 8005912 <__swsetup_r+0x16>
 8005908:	69ab      	ldr	r3, [r5, #24]
 800590a:	b913      	cbnz	r3, 8005912 <__swsetup_r+0x16>
 800590c:	4628      	mov	r0, r5
 800590e:	f000 f985 	bl	8005c1c <__sinit>
 8005912:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <__swsetup_r+0xd0>)
 8005914:	429c      	cmp	r4, r3
 8005916:	d10f      	bne.n	8005938 <__swsetup_r+0x3c>
 8005918:	686c      	ldr	r4, [r5, #4]
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005920:	0719      	lsls	r1, r3, #28
 8005922:	d42c      	bmi.n	800597e <__swsetup_r+0x82>
 8005924:	06dd      	lsls	r5, r3, #27
 8005926:	d411      	bmi.n	800594c <__swsetup_r+0x50>
 8005928:	2309      	movs	r3, #9
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	e03e      	b.n	80059b6 <__swsetup_r+0xba>
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <__swsetup_r+0xd4>)
 800593a:	429c      	cmp	r4, r3
 800593c:	d101      	bne.n	8005942 <__swsetup_r+0x46>
 800593e:	68ac      	ldr	r4, [r5, #8]
 8005940:	e7eb      	b.n	800591a <__swsetup_r+0x1e>
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <__swsetup_r+0xd8>)
 8005944:	429c      	cmp	r4, r3
 8005946:	bf08      	it	eq
 8005948:	68ec      	ldreq	r4, [r5, #12]
 800594a:	e7e6      	b.n	800591a <__swsetup_r+0x1e>
 800594c:	0758      	lsls	r0, r3, #29
 800594e:	d512      	bpl.n	8005976 <__swsetup_r+0x7a>
 8005950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005952:	b141      	cbz	r1, 8005966 <__swsetup_r+0x6a>
 8005954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005958:	4299      	cmp	r1, r3
 800595a:	d002      	beq.n	8005962 <__swsetup_r+0x66>
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff fb6f 	bl	8005040 <_free_r>
 8005962:	2300      	movs	r3, #0
 8005964:	6363      	str	r3, [r4, #52]	; 0x34
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	2300      	movs	r3, #0
 8005970:	6063      	str	r3, [r4, #4]
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f043 0308 	orr.w	r3, r3, #8
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	b94b      	cbnz	r3, 8005996 <__swsetup_r+0x9a>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598c:	d003      	beq.n	8005996 <__swsetup_r+0x9a>
 800598e:	4621      	mov	r1, r4
 8005990:	4630      	mov	r0, r6
 8005992:	f000 fa07 	bl	8005da4 <__smakebuf_r>
 8005996:	89a0      	ldrh	r0, [r4, #12]
 8005998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800599c:	f010 0301 	ands.w	r3, r0, #1
 80059a0:	d00a      	beq.n	80059b8 <__swsetup_r+0xbc>
 80059a2:	2300      	movs	r3, #0
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	6963      	ldr	r3, [r4, #20]
 80059a8:	425b      	negs	r3, r3
 80059aa:	61a3      	str	r3, [r4, #24]
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	b943      	cbnz	r3, 80059c2 <__swsetup_r+0xc6>
 80059b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059b4:	d1ba      	bne.n	800592c <__swsetup_r+0x30>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	0781      	lsls	r1, r0, #30
 80059ba:	bf58      	it	pl
 80059bc:	6963      	ldrpl	r3, [r4, #20]
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	e7f4      	b.n	80059ac <__swsetup_r+0xb0>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e7f7      	b.n	80059b6 <__swsetup_r+0xba>
 80059c6:	bf00      	nop
 80059c8:	20000008 	.word	0x20000008
 80059cc:	080073b4 	.word	0x080073b4
 80059d0:	080073d4 	.word	0x080073d4
 80059d4:	08007394 	.word	0x08007394

080059d8 <abort>:
 80059d8:	b508      	push	{r3, lr}
 80059da:	2006      	movs	r0, #6
 80059dc:	f000 fa52 	bl	8005e84 <raise>
 80059e0:	2001      	movs	r0, #1
 80059e2:	f7fc fcba 	bl	800235a <_exit>
	...

080059e8 <__sflush_r>:
 80059e8:	898a      	ldrh	r2, [r1, #12]
 80059ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	4605      	mov	r5, r0
 80059f0:	0710      	lsls	r0, r2, #28
 80059f2:	460c      	mov	r4, r1
 80059f4:	d458      	bmi.n	8005aa8 <__sflush_r+0xc0>
 80059f6:	684b      	ldr	r3, [r1, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dc05      	bgt.n	8005a08 <__sflush_r+0x20>
 80059fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc02      	bgt.n	8005a08 <__sflush_r+0x20>
 8005a02:	2000      	movs	r0, #0
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d0f9      	beq.n	8005a02 <__sflush_r+0x1a>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a14:	682f      	ldr	r7, [r5, #0]
 8005a16:	602b      	str	r3, [r5, #0]
 8005a18:	d032      	beq.n	8005a80 <__sflush_r+0x98>
 8005a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	075a      	lsls	r2, r3, #29
 8005a20:	d505      	bpl.n	8005a2e <__sflush_r+0x46>
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	1ac0      	subs	r0, r0, r3
 8005a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a28:	b10b      	cbz	r3, 8005a2e <__sflush_r+0x46>
 8005a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4602      	mov	r2, r0
 8005a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a34:	6a21      	ldr	r1, [r4, #32]
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b0      	blx	r6
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	d106      	bne.n	8005a4e <__sflush_r+0x66>
 8005a40:	6829      	ldr	r1, [r5, #0]
 8005a42:	291d      	cmp	r1, #29
 8005a44:	d82c      	bhi.n	8005aa0 <__sflush_r+0xb8>
 8005a46:	4a2a      	ldr	r2, [pc, #168]	; (8005af0 <__sflush_r+0x108>)
 8005a48:	40ca      	lsrs	r2, r1
 8005a4a:	07d6      	lsls	r6, r2, #31
 8005a4c:	d528      	bpl.n	8005aa0 <__sflush_r+0xb8>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6062      	str	r2, [r4, #4]
 8005a52:	04d9      	lsls	r1, r3, #19
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	d504      	bpl.n	8005a64 <__sflush_r+0x7c>
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0x7a>
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	b903      	cbnz	r3, 8005a64 <__sflush_r+0x7c>
 8005a62:	6560      	str	r0, [r4, #84]	; 0x54
 8005a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a66:	602f      	str	r7, [r5, #0]
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d0ca      	beq.n	8005a02 <__sflush_r+0x1a>
 8005a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d002      	beq.n	8005a7a <__sflush_r+0x92>
 8005a74:	4628      	mov	r0, r5
 8005a76:	f7ff fae3 	bl	8005040 <_free_r>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a7e:	e7c1      	b.n	8005a04 <__sflush_r+0x1c>
 8005a80:	6a21      	ldr	r1, [r4, #32]
 8005a82:	2301      	movs	r3, #1
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b0      	blx	r6
 8005a88:	1c41      	adds	r1, r0, #1
 8005a8a:	d1c7      	bne.n	8005a1c <__sflush_r+0x34>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0c4      	beq.n	8005a1c <__sflush_r+0x34>
 8005a92:	2b1d      	cmp	r3, #29
 8005a94:	d001      	beq.n	8005a9a <__sflush_r+0xb2>
 8005a96:	2b16      	cmp	r3, #22
 8005a98:	d101      	bne.n	8005a9e <__sflush_r+0xb6>
 8005a9a:	602f      	str	r7, [r5, #0]
 8005a9c:	e7b1      	b.n	8005a02 <__sflush_r+0x1a>
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa4:	81a3      	strh	r3, [r4, #12]
 8005aa6:	e7ad      	b.n	8005a04 <__sflush_r+0x1c>
 8005aa8:	690f      	ldr	r7, [r1, #16]
 8005aaa:	2f00      	cmp	r7, #0
 8005aac:	d0a9      	beq.n	8005a02 <__sflush_r+0x1a>
 8005aae:	0793      	lsls	r3, r2, #30
 8005ab0:	680e      	ldr	r6, [r1, #0]
 8005ab2:	bf08      	it	eq
 8005ab4:	694b      	ldreq	r3, [r1, #20]
 8005ab6:	600f      	str	r7, [r1, #0]
 8005ab8:	bf18      	it	ne
 8005aba:	2300      	movne	r3, #0
 8005abc:	eba6 0807 	sub.w	r8, r6, r7
 8005ac0:	608b      	str	r3, [r1, #8]
 8005ac2:	f1b8 0f00 	cmp.w	r8, #0
 8005ac6:	dd9c      	ble.n	8005a02 <__sflush_r+0x1a>
 8005ac8:	6a21      	ldr	r1, [r4, #32]
 8005aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005acc:	4643      	mov	r3, r8
 8005ace:	463a      	mov	r2, r7
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b0      	blx	r6
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	dc06      	bgt.n	8005ae6 <__sflush_r+0xfe>
 8005ad8:	89a3      	ldrh	r3, [r4, #12]
 8005ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e78e      	b.n	8005a04 <__sflush_r+0x1c>
 8005ae6:	4407      	add	r7, r0
 8005ae8:	eba8 0800 	sub.w	r8, r8, r0
 8005aec:	e7e9      	b.n	8005ac2 <__sflush_r+0xda>
 8005aee:	bf00      	nop
 8005af0:	20400001 	.word	0x20400001

08005af4 <_fflush_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	4605      	mov	r5, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b913      	cbnz	r3, 8005b04 <_fflush_r+0x10>
 8005afe:	2500      	movs	r5, #0
 8005b00:	4628      	mov	r0, r5
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	b118      	cbz	r0, 8005b0e <_fflush_r+0x1a>
 8005b06:	6983      	ldr	r3, [r0, #24]
 8005b08:	b90b      	cbnz	r3, 8005b0e <_fflush_r+0x1a>
 8005b0a:	f000 f887 	bl	8005c1c <__sinit>
 8005b0e:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <_fflush_r+0x6c>)
 8005b10:	429c      	cmp	r4, r3
 8005b12:	d11b      	bne.n	8005b4c <_fflush_r+0x58>
 8005b14:	686c      	ldr	r4, [r5, #4]
 8005b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ef      	beq.n	8005afe <_fflush_r+0xa>
 8005b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b20:	07d0      	lsls	r0, r2, #31
 8005b22:	d404      	bmi.n	8005b2e <_fflush_r+0x3a>
 8005b24:	0599      	lsls	r1, r3, #22
 8005b26:	d402      	bmi.n	8005b2e <_fflush_r+0x3a>
 8005b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b2a:	f000 f915 	bl	8005d58 <__retarget_lock_acquire_recursive>
 8005b2e:	4628      	mov	r0, r5
 8005b30:	4621      	mov	r1, r4
 8005b32:	f7ff ff59 	bl	80059e8 <__sflush_r>
 8005b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b38:	07da      	lsls	r2, r3, #31
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	d4e0      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	059b      	lsls	r3, r3, #22
 8005b42:	d4dd      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b46:	f000 f908 	bl	8005d5a <__retarget_lock_release_recursive>
 8005b4a:	e7d9      	b.n	8005b00 <_fflush_r+0xc>
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <_fflush_r+0x70>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d101      	bne.n	8005b56 <_fflush_r+0x62>
 8005b52:	68ac      	ldr	r4, [r5, #8]
 8005b54:	e7df      	b.n	8005b16 <_fflush_r+0x22>
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <_fflush_r+0x74>)
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	bf08      	it	eq
 8005b5c:	68ec      	ldreq	r4, [r5, #12]
 8005b5e:	e7da      	b.n	8005b16 <_fflush_r+0x22>
 8005b60:	080073b4 	.word	0x080073b4
 8005b64:	080073d4 	.word	0x080073d4
 8005b68:	08007394 	.word	0x08007394

08005b6c <std>:
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	4604      	mov	r4, r0
 8005b72:	e9c0 3300 	strd	r3, r3, [r0]
 8005b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b7a:	6083      	str	r3, [r0, #8]
 8005b7c:	8181      	strh	r1, [r0, #12]
 8005b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b80:	81c2      	strh	r2, [r0, #14]
 8005b82:	6183      	str	r3, [r0, #24]
 8005b84:	4619      	mov	r1, r3
 8005b86:	2208      	movs	r2, #8
 8005b88:	305c      	adds	r0, #92	; 0x5c
 8005b8a:	f7fd fba7 	bl	80032dc <memset>
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x38>)
 8005b90:	6263      	str	r3, [r4, #36]	; 0x24
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x3c>)
 8005b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x40>)
 8005b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <std+0x44>)
 8005b9c:	6224      	str	r4, [r4, #32]
 8005b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	bf00      	nop
 8005ba4:	08005ebd 	.word	0x08005ebd
 8005ba8:	08005edf 	.word	0x08005edf
 8005bac:	08005f17 	.word	0x08005f17
 8005bb0:	08005f3b 	.word	0x08005f3b

08005bb4 <_cleanup_r>:
 8005bb4:	4901      	ldr	r1, [pc, #4]	; (8005bbc <_cleanup_r+0x8>)
 8005bb6:	f000 b8af 	b.w	8005d18 <_fwalk_reent>
 8005bba:	bf00      	nop
 8005bbc:	08005af5 	.word	0x08005af5

08005bc0 <__sfmoreglue>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	1e4a      	subs	r2, r1, #1
 8005bc4:	2568      	movs	r5, #104	; 0x68
 8005bc6:	4355      	muls	r5, r2
 8005bc8:	460e      	mov	r6, r1
 8005bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bce:	f7ff fa87 	bl	80050e0 <_malloc_r>
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	b140      	cbz	r0, 8005be8 <__sfmoreglue+0x28>
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bdc:	300c      	adds	r0, #12
 8005bde:	60a0      	str	r0, [r4, #8]
 8005be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005be4:	f7fd fb7a 	bl	80032dc <memset>
 8005be8:	4620      	mov	r0, r4
 8005bea:	bd70      	pop	{r4, r5, r6, pc}

08005bec <__sfp_lock_acquire>:
 8005bec:	4801      	ldr	r0, [pc, #4]	; (8005bf4 <__sfp_lock_acquire+0x8>)
 8005bee:	f000 b8b3 	b.w	8005d58 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	2000023c 	.word	0x2000023c

08005bf8 <__sfp_lock_release>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	; (8005c00 <__sfp_lock_release+0x8>)
 8005bfa:	f000 b8ae 	b.w	8005d5a <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	2000023c 	.word	0x2000023c

08005c04 <__sinit_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sinit_lock_acquire+0x8>)
 8005c06:	f000 b8a7 	b.w	8005d58 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000237 	.word	0x20000237

08005c10 <__sinit_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sinit_lock_release+0x8>)
 8005c12:	f000 b8a2 	b.w	8005d5a <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20000237 	.word	0x20000237

08005c1c <__sinit>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f7ff fff0 	bl	8005c04 <__sinit_lock_acquire>
 8005c24:	69a3      	ldr	r3, [r4, #24]
 8005c26:	b11b      	cbz	r3, 8005c30 <__sinit+0x14>
 8005c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c2c:	f7ff bff0 	b.w	8005c10 <__sinit_lock_release>
 8005c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c34:	6523      	str	r3, [r4, #80]	; 0x50
 8005c36:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <__sinit+0x68>)
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <__sinit+0x6c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	bf04      	itt	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	61a3      	streq	r3, [r4, #24]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f820 	bl	8005c8c <__sfp>
 8005c4c:	6060      	str	r0, [r4, #4]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 f81c 	bl	8005c8c <__sfp>
 8005c54:	60a0      	str	r0, [r4, #8]
 8005c56:	4620      	mov	r0, r4
 8005c58:	f000 f818 	bl	8005c8c <__sfp>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	60e0      	str	r0, [r4, #12]
 8005c60:	2104      	movs	r1, #4
 8005c62:	6860      	ldr	r0, [r4, #4]
 8005c64:	f7ff ff82 	bl	8005b6c <std>
 8005c68:	68a0      	ldr	r0, [r4, #8]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2109      	movs	r1, #9
 8005c6e:	f7ff ff7d 	bl	8005b6c <std>
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	2202      	movs	r2, #2
 8005c76:	2112      	movs	r1, #18
 8005c78:	f7ff ff78 	bl	8005b6c <std>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	61a3      	str	r3, [r4, #24]
 8005c80:	e7d2      	b.n	8005c28 <__sinit+0xc>
 8005c82:	bf00      	nop
 8005c84:	08007014 	.word	0x08007014
 8005c88:	08005bb5 	.word	0x08005bb5

08005c8c <__sfp>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	4607      	mov	r7, r0
 8005c90:	f7ff ffac 	bl	8005bec <__sfp_lock_acquire>
 8005c94:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <__sfp+0x84>)
 8005c96:	681e      	ldr	r6, [r3, #0]
 8005c98:	69b3      	ldr	r3, [r6, #24]
 8005c9a:	b913      	cbnz	r3, 8005ca2 <__sfp+0x16>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ffbd 	bl	8005c1c <__sinit>
 8005ca2:	3648      	adds	r6, #72	; 0x48
 8005ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	d503      	bpl.n	8005cb4 <__sfp+0x28>
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	b30b      	cbz	r3, 8005cf4 <__sfp+0x68>
 8005cb0:	6836      	ldr	r6, [r6, #0]
 8005cb2:	e7f7      	b.n	8005ca4 <__sfp+0x18>
 8005cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb8:	b9d5      	cbnz	r5, 8005cf0 <__sfp+0x64>
 8005cba:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <__sfp+0x88>)
 8005cbc:	60e3      	str	r3, [r4, #12]
 8005cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8005cc4:	f000 f847 	bl	8005d56 <__retarget_lock_init_recursive>
 8005cc8:	f7ff ff96 	bl	8005bf8 <__sfp_lock_release>
 8005ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cd4:	6025      	str	r5, [r4, #0]
 8005cd6:	61a5      	str	r5, [r4, #24]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ce0:	f7fd fafc 	bl	80032dc <memset>
 8005ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cec:	4620      	mov	r0, r4
 8005cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf0:	3468      	adds	r4, #104	; 0x68
 8005cf2:	e7d9      	b.n	8005ca8 <__sfp+0x1c>
 8005cf4:	2104      	movs	r1, #4
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7ff ff62 	bl	8005bc0 <__sfmoreglue>
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	6030      	str	r0, [r6, #0]
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d1d5      	bne.n	8005cb0 <__sfp+0x24>
 8005d04:	f7ff ff78 	bl	8005bf8 <__sfp_lock_release>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	e7ee      	b.n	8005cec <__sfp+0x60>
 8005d0e:	bf00      	nop
 8005d10:	08007014 	.word	0x08007014
 8005d14:	ffff0001 	.word	0xffff0001

08005d18 <_fwalk_reent>:
 8005d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d24:	2700      	movs	r7, #0
 8005d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2e:	d505      	bpl.n	8005d3c <_fwalk_reent+0x24>
 8005d30:	6824      	ldr	r4, [r4, #0]
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	d1f7      	bne.n	8005d26 <_fwalk_reent+0xe>
 8005d36:	4638      	mov	r0, r7
 8005d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d3c:	89ab      	ldrh	r3, [r5, #12]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d907      	bls.n	8005d52 <_fwalk_reent+0x3a>
 8005d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d46:	3301      	adds	r3, #1
 8005d48:	d003      	beq.n	8005d52 <_fwalk_reent+0x3a>
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	47c0      	blx	r8
 8005d50:	4307      	orrs	r7, r0
 8005d52:	3568      	adds	r5, #104	; 0x68
 8005d54:	e7e9      	b.n	8005d2a <_fwalk_reent+0x12>

08005d56 <__retarget_lock_init_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <__retarget_lock_acquire_recursive>:
 8005d58:	4770      	bx	lr

08005d5a <__retarget_lock_release_recursive>:
 8005d5a:	4770      	bx	lr

08005d5c <__swhatbuf_r>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	460e      	mov	r6, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	2900      	cmp	r1, #0
 8005d66:	b096      	sub	sp, #88	; 0x58
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	da07      	bge.n	8005d7e <__swhatbuf_r+0x22>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	89b3      	ldrh	r3, [r6, #12]
 8005d74:	061a      	lsls	r2, r3, #24
 8005d76:	d410      	bmi.n	8005d9a <__swhatbuf_r+0x3e>
 8005d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7c:	e00e      	b.n	8005d9c <__swhatbuf_r+0x40>
 8005d7e:	466a      	mov	r2, sp
 8005d80:	f000 f902 	bl	8005f88 <_fstat_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dbf2      	blt.n	8005d6e <__swhatbuf_r+0x12>
 8005d88:	9a01      	ldr	r2, [sp, #4]
 8005d8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d92:	425a      	negs	r2, r3
 8005d94:	415a      	adcs	r2, r3
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	e7ee      	b.n	8005d78 <__swhatbuf_r+0x1c>
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	b016      	add	sp, #88	; 0x58
 8005da2:	bd70      	pop	{r4, r5, r6, pc}

08005da4 <__smakebuf_r>:
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da8:	079d      	lsls	r5, r3, #30
 8005daa:	4606      	mov	r6, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	d507      	bpl.n	8005dc0 <__smakebuf_r+0x1c>
 8005db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	2301      	movs	r3, #1
 8005dba:	6163      	str	r3, [r4, #20]
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	ab01      	add	r3, sp, #4
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	f7ff ffca 	bl	8005d5c <__swhatbuf_r>
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff f987 	bl	80050e0 <_malloc_r>
 8005dd2:	b948      	cbnz	r0, 8005de8 <__smakebuf_r+0x44>
 8005dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d4ef      	bmi.n	8005dbc <__smakebuf_r+0x18>
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7e3      	b.n	8005db0 <__smakebuf_r+0xc>
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <__smakebuf_r+0x7c>)
 8005dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	6163      	str	r3, [r4, #20]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	6120      	str	r0, [r4, #16]
 8005dfe:	b15b      	cbz	r3, 8005e18 <__smakebuf_r+0x74>
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 f8d1 	bl	8005fac <_isatty_r>
 8005e0a:	b128      	cbz	r0, 8005e18 <__smakebuf_r+0x74>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	89a0      	ldrh	r0, [r4, #12]
 8005e1a:	4305      	orrs	r5, r0
 8005e1c:	81a5      	strh	r5, [r4, #12]
 8005e1e:	e7cd      	b.n	8005dbc <__smakebuf_r+0x18>
 8005e20:	08005bb5 	.word	0x08005bb5

08005e24 <_malloc_usable_size_r>:
 8005e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e28:	1f18      	subs	r0, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bfbc      	itt	lt
 8005e2e:	580b      	ldrlt	r3, [r1, r0]
 8005e30:	18c0      	addlt	r0, r0, r3
 8005e32:	4770      	bx	lr

08005e34 <_raise_r>:
 8005e34:	291f      	cmp	r1, #31
 8005e36:	b538      	push	{r3, r4, r5, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	d904      	bls.n	8005e48 <_raise_r+0x14>
 8005e3e:	2316      	movs	r3, #22
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e4a:	b112      	cbz	r2, 8005e52 <_raise_r+0x1e>
 8005e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e50:	b94b      	cbnz	r3, 8005e66 <_raise_r+0x32>
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f830 	bl	8005eb8 <_getpid_r>
 8005e58:	462a      	mov	r2, r5
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e62:	f000 b817 	b.w	8005e94 <_kill_r>
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d00a      	beq.n	8005e80 <_raise_r+0x4c>
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	d103      	bne.n	8005e76 <_raise_r+0x42>
 8005e6e:	2316      	movs	r3, #22
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	2001      	movs	r0, #1
 8005e74:	e7e7      	b.n	8005e46 <_raise_r+0x12>
 8005e76:	2400      	movs	r4, #0
 8005e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	4798      	blx	r3
 8005e80:	2000      	movs	r0, #0
 8005e82:	e7e0      	b.n	8005e46 <_raise_r+0x12>

08005e84 <raise>:
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <raise+0xc>)
 8005e86:	4601      	mov	r1, r0
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	f7ff bfd3 	b.w	8005e34 <_raise_r>
 8005e8e:	bf00      	nop
 8005e90:	20000008 	.word	0x20000008

08005e94 <_kill_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_kill_r+0x20>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	f7fc fa4a 	bl	800233a <_kill>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d102      	bne.n	8005eb0 <_kill_r+0x1c>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	b103      	cbz	r3, 8005eb0 <_kill_r+0x1c>
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000230 	.word	0x20000230

08005eb8 <_getpid_r>:
 8005eb8:	f7fc ba37 	b.w	800232a <_getpid>

08005ebc <__sread>:
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	f000 f894 	bl	8005ff0 <_read_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	bfab      	itete	ge
 8005ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ece:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed0:	181b      	addge	r3, r3, r0
 8005ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ed6:	bfac      	ite	ge
 8005ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eda:	81a3      	strhlt	r3, [r4, #12]
 8005edc:	bd10      	pop	{r4, pc}

08005ede <__swrite>:
 8005ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	4605      	mov	r5, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	4616      	mov	r6, r2
 8005eee:	d505      	bpl.n	8005efc <__swrite+0x1e>
 8005ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f000 f868 	bl	8005fcc <_lseek_r>
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	4632      	mov	r2, r6
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	f000 b817 	b.w	8005f44 <_write_r>

08005f16 <__sseek>:
 8005f16:	b510      	push	{r4, lr}
 8005f18:	460c      	mov	r4, r1
 8005f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1e:	f000 f855 	bl	8005fcc <_lseek_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	bf15      	itete	ne
 8005f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f32:	81a3      	strheq	r3, [r4, #12]
 8005f34:	bf18      	it	ne
 8005f36:	81a3      	strhne	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__sclose>:
 8005f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3e:	f000 b813 	b.w	8005f68 <_close_r>
	...

08005f44 <_write_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d07      	ldr	r5, [pc, #28]	; (8005f64 <_write_r+0x20>)
 8005f48:	4604      	mov	r4, r0
 8005f4a:	4608      	mov	r0, r1
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	2200      	movs	r2, #0
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f7fc fa28 	bl	80023a8 <_write>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_write_r+0x1e>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_write_r+0x1e>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20000230 	.word	0x20000230

08005f68 <_close_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d06      	ldr	r5, [pc, #24]	; (8005f84 <_close_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fc fa34 	bl	80023e0 <_close>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_close_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_close_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20000230 	.word	0x20000230

08005f88 <_fstat_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_fstat_r+0x20>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	f7fc fa2f 	bl	80023f8 <_fstat>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d102      	bne.n	8005fa4 <_fstat_r+0x1c>
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	b103      	cbz	r3, 8005fa4 <_fstat_r+0x1c>
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000230 	.word	0x20000230

08005fac <_isatty_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	; (8005fc8 <_isatty_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fc fa2e 	bl	8002418 <_isatty>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_isatty_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_isatty_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000230 	.word	0x20000230

08005fcc <_lseek_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_lseek_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fc fa27 	bl	800242e <_lseek>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_lseek_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_lseek_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000230 	.word	0x20000230

08005ff0 <_read_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	; (8006010 <_read_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fc f9b5 	bl	800236e <_read>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_read_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_read_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20000230 	.word	0x20000230

08006014 <pow>:
 8006014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006018:	ec59 8b10 	vmov	r8, r9, d0
 800601c:	ec57 6b11 	vmov	r6, r7, d1
 8006020:	f000 f8a6 	bl	8006170 <__ieee754_pow>
 8006024:	4b4e      	ldr	r3, [pc, #312]	; (8006160 <pow+0x14c>)
 8006026:	f993 3000 	ldrsb.w	r3, [r3]
 800602a:	3301      	adds	r3, #1
 800602c:	ec55 4b10 	vmov	r4, r5, d0
 8006030:	d015      	beq.n	800605e <pow+0x4a>
 8006032:	4632      	mov	r2, r6
 8006034:	463b      	mov	r3, r7
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa fd77 	bl	8000b2c <__aeabi_dcmpun>
 800603e:	b970      	cbnz	r0, 800605e <pow+0x4a>
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa fd70 	bl	8000b2c <__aeabi_dcmpun>
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	b148      	cbz	r0, 8006066 <pow+0x52>
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	f7fa fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800605a:	2800      	cmp	r0, #0
 800605c:	d17d      	bne.n	800615a <pow+0x146>
 800605e:	ec45 4b10 	vmov	d0, r4, r5
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	4640      	mov	r0, r8
 8006068:	4649      	mov	r1, r9
 800606a:	f7fa fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800606e:	b1e0      	cbz	r0, 80060aa <pow+0x96>
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800607c:	2800      	cmp	r0, #0
 800607e:	d16c      	bne.n	800615a <pow+0x146>
 8006080:	ec47 6b10 	vmov	d0, r6, r7
 8006084:	f000 fe53 	bl	8006d2e <finite>
 8006088:	2800      	cmp	r0, #0
 800608a:	d0e8      	beq.n	800605e <pow+0x4a>
 800608c:	2200      	movs	r2, #0
 800608e:	2300      	movs	r3, #0
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa fd22 	bl	8000adc <__aeabi_dcmplt>
 8006098:	2800      	cmp	r0, #0
 800609a:	d0e0      	beq.n	800605e <pow+0x4a>
 800609c:	f7fd f8f4 	bl	8003288 <__errno>
 80060a0:	2321      	movs	r3, #33	; 0x21
 80060a2:	6003      	str	r3, [r0, #0]
 80060a4:	2400      	movs	r4, #0
 80060a6:	4d2f      	ldr	r5, [pc, #188]	; (8006164 <pow+0x150>)
 80060a8:	e7d9      	b.n	800605e <pow+0x4a>
 80060aa:	ec45 4b10 	vmov	d0, r4, r5
 80060ae:	f000 fe3e 	bl	8006d2e <finite>
 80060b2:	bbb8      	cbnz	r0, 8006124 <pow+0x110>
 80060b4:	ec49 8b10 	vmov	d0, r8, r9
 80060b8:	f000 fe39 	bl	8006d2e <finite>
 80060bc:	b390      	cbz	r0, 8006124 <pow+0x110>
 80060be:	ec47 6b10 	vmov	d0, r6, r7
 80060c2:	f000 fe34 	bl	8006d2e <finite>
 80060c6:	b368      	cbz	r0, 8006124 <pow+0x110>
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7fa fd2c 	bl	8000b2c <__aeabi_dcmpun>
 80060d4:	b160      	cbz	r0, 80060f0 <pow+0xdc>
 80060d6:	f7fd f8d7 	bl	8003288 <__errno>
 80060da:	2321      	movs	r3, #33	; 0x21
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	2200      	movs	r2, #0
 80060e0:	2300      	movs	r3, #0
 80060e2:	4610      	mov	r0, r2
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fa fbb1 	bl	800084c <__aeabi_ddiv>
 80060ea:	4604      	mov	r4, r0
 80060ec:	460d      	mov	r5, r1
 80060ee:	e7b6      	b.n	800605e <pow+0x4a>
 80060f0:	f7fd f8ca 	bl	8003288 <__errno>
 80060f4:	2322      	movs	r3, #34	; 0x22
 80060f6:	6003      	str	r3, [r0, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fcec 	bl	8000adc <__aeabi_dcmplt>
 8006104:	2400      	movs	r4, #0
 8006106:	b158      	cbz	r0, 8006120 <pow+0x10c>
 8006108:	ec47 6b10 	vmov	d0, r6, r7
 800610c:	f000 fe24 	bl	8006d58 <rint>
 8006110:	4632      	mov	r2, r6
 8006112:	ec51 0b10 	vmov	r0, r1, d0
 8006116:	463b      	mov	r3, r7
 8006118:	f7fa fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800611c:	2800      	cmp	r0, #0
 800611e:	d0c2      	beq.n	80060a6 <pow+0x92>
 8006120:	4d11      	ldr	r5, [pc, #68]	; (8006168 <pow+0x154>)
 8006122:	e79c      	b.n	800605e <pow+0x4a>
 8006124:	2200      	movs	r2, #0
 8006126:	2300      	movs	r3, #0
 8006128:	4620      	mov	r0, r4
 800612a:	4629      	mov	r1, r5
 800612c:	f7fa fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006130:	2800      	cmp	r0, #0
 8006132:	d094      	beq.n	800605e <pow+0x4a>
 8006134:	ec49 8b10 	vmov	d0, r8, r9
 8006138:	f000 fdf9 	bl	8006d2e <finite>
 800613c:	2800      	cmp	r0, #0
 800613e:	d08e      	beq.n	800605e <pow+0x4a>
 8006140:	ec47 6b10 	vmov	d0, r6, r7
 8006144:	f000 fdf3 	bl	8006d2e <finite>
 8006148:	2800      	cmp	r0, #0
 800614a:	d088      	beq.n	800605e <pow+0x4a>
 800614c:	f7fd f89c 	bl	8003288 <__errno>
 8006150:	2322      	movs	r3, #34	; 0x22
 8006152:	6003      	str	r3, [r0, #0]
 8006154:	2400      	movs	r4, #0
 8006156:	2500      	movs	r5, #0
 8006158:	e781      	b.n	800605e <pow+0x4a>
 800615a:	4d04      	ldr	r5, [pc, #16]	; (800616c <pow+0x158>)
 800615c:	2400      	movs	r4, #0
 800615e:	e77e      	b.n	800605e <pow+0x4a>
 8006160:	200001d8 	.word	0x200001d8
 8006164:	fff00000 	.word	0xfff00000
 8006168:	7ff00000 	.word	0x7ff00000
 800616c:	3ff00000 	.word	0x3ff00000

08006170 <__ieee754_pow>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ed2d 8b06 	vpush	{d8-d10}
 8006178:	b08d      	sub	sp, #52	; 0x34
 800617a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800617e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006182:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006186:	ea56 0100 	orrs.w	r1, r6, r0
 800618a:	ec53 2b10 	vmov	r2, r3, d0
 800618e:	f000 84d1 	beq.w	8006b34 <__ieee754_pow+0x9c4>
 8006192:	497f      	ldr	r1, [pc, #508]	; (8006390 <__ieee754_pow+0x220>)
 8006194:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006198:	428c      	cmp	r4, r1
 800619a:	ee10 8a10 	vmov	r8, s0
 800619e:	4699      	mov	r9, r3
 80061a0:	dc09      	bgt.n	80061b6 <__ieee754_pow+0x46>
 80061a2:	d103      	bne.n	80061ac <__ieee754_pow+0x3c>
 80061a4:	b97a      	cbnz	r2, 80061c6 <__ieee754_pow+0x56>
 80061a6:	42a6      	cmp	r6, r4
 80061a8:	dd02      	ble.n	80061b0 <__ieee754_pow+0x40>
 80061aa:	e00c      	b.n	80061c6 <__ieee754_pow+0x56>
 80061ac:	428e      	cmp	r6, r1
 80061ae:	dc02      	bgt.n	80061b6 <__ieee754_pow+0x46>
 80061b0:	428e      	cmp	r6, r1
 80061b2:	d110      	bne.n	80061d6 <__ieee754_pow+0x66>
 80061b4:	b178      	cbz	r0, 80061d6 <__ieee754_pow+0x66>
 80061b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80061ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80061be:	ea54 0308 	orrs.w	r3, r4, r8
 80061c2:	f000 84b7 	beq.w	8006b34 <__ieee754_pow+0x9c4>
 80061c6:	4873      	ldr	r0, [pc, #460]	; (8006394 <__ieee754_pow+0x224>)
 80061c8:	b00d      	add	sp, #52	; 0x34
 80061ca:	ecbd 8b06 	vpop	{d8-d10}
 80061ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d2:	f000 bdb9 	b.w	8006d48 <nan>
 80061d6:	f1b9 0f00 	cmp.w	r9, #0
 80061da:	da36      	bge.n	800624a <__ieee754_pow+0xda>
 80061dc:	496e      	ldr	r1, [pc, #440]	; (8006398 <__ieee754_pow+0x228>)
 80061de:	428e      	cmp	r6, r1
 80061e0:	dc51      	bgt.n	8006286 <__ieee754_pow+0x116>
 80061e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80061e6:	428e      	cmp	r6, r1
 80061e8:	f340 84af 	ble.w	8006b4a <__ieee754_pow+0x9da>
 80061ec:	1531      	asrs	r1, r6, #20
 80061ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80061f2:	2914      	cmp	r1, #20
 80061f4:	dd0f      	ble.n	8006216 <__ieee754_pow+0xa6>
 80061f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80061fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80061fe:	fa0c f101 	lsl.w	r1, ip, r1
 8006202:	4281      	cmp	r1, r0
 8006204:	f040 84a1 	bne.w	8006b4a <__ieee754_pow+0x9da>
 8006208:	f00c 0c01 	and.w	ip, ip, #1
 800620c:	f1cc 0102 	rsb	r1, ip, #2
 8006210:	9100      	str	r1, [sp, #0]
 8006212:	b180      	cbz	r0, 8006236 <__ieee754_pow+0xc6>
 8006214:	e059      	b.n	80062ca <__ieee754_pow+0x15a>
 8006216:	2800      	cmp	r0, #0
 8006218:	d155      	bne.n	80062c6 <__ieee754_pow+0x156>
 800621a:	f1c1 0114 	rsb	r1, r1, #20
 800621e:	fa46 fc01 	asr.w	ip, r6, r1
 8006222:	fa0c f101 	lsl.w	r1, ip, r1
 8006226:	42b1      	cmp	r1, r6
 8006228:	f040 848c 	bne.w	8006b44 <__ieee754_pow+0x9d4>
 800622c:	f00c 0c01 	and.w	ip, ip, #1
 8006230:	f1cc 0102 	rsb	r1, ip, #2
 8006234:	9100      	str	r1, [sp, #0]
 8006236:	4959      	ldr	r1, [pc, #356]	; (800639c <__ieee754_pow+0x22c>)
 8006238:	428e      	cmp	r6, r1
 800623a:	d12d      	bne.n	8006298 <__ieee754_pow+0x128>
 800623c:	2f00      	cmp	r7, #0
 800623e:	da79      	bge.n	8006334 <__ieee754_pow+0x1c4>
 8006240:	4956      	ldr	r1, [pc, #344]	; (800639c <__ieee754_pow+0x22c>)
 8006242:	2000      	movs	r0, #0
 8006244:	f7fa fb02 	bl	800084c <__aeabi_ddiv>
 8006248:	e016      	b.n	8006278 <__ieee754_pow+0x108>
 800624a:	2100      	movs	r1, #0
 800624c:	9100      	str	r1, [sp, #0]
 800624e:	2800      	cmp	r0, #0
 8006250:	d13b      	bne.n	80062ca <__ieee754_pow+0x15a>
 8006252:	494f      	ldr	r1, [pc, #316]	; (8006390 <__ieee754_pow+0x220>)
 8006254:	428e      	cmp	r6, r1
 8006256:	d1ee      	bne.n	8006236 <__ieee754_pow+0xc6>
 8006258:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800625c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006260:	ea53 0308 	orrs.w	r3, r3, r8
 8006264:	f000 8466 	beq.w	8006b34 <__ieee754_pow+0x9c4>
 8006268:	4b4d      	ldr	r3, [pc, #308]	; (80063a0 <__ieee754_pow+0x230>)
 800626a:	429c      	cmp	r4, r3
 800626c:	dd0d      	ble.n	800628a <__ieee754_pow+0x11a>
 800626e:	2f00      	cmp	r7, #0
 8006270:	f280 8464 	bge.w	8006b3c <__ieee754_pow+0x9cc>
 8006274:	2000      	movs	r0, #0
 8006276:	2100      	movs	r1, #0
 8006278:	ec41 0b10 	vmov	d0, r0, r1
 800627c:	b00d      	add	sp, #52	; 0x34
 800627e:	ecbd 8b06 	vpop	{d8-d10}
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006286:	2102      	movs	r1, #2
 8006288:	e7e0      	b.n	800624c <__ieee754_pow+0xdc>
 800628a:	2f00      	cmp	r7, #0
 800628c:	daf2      	bge.n	8006274 <__ieee754_pow+0x104>
 800628e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006292:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006296:	e7ef      	b.n	8006278 <__ieee754_pow+0x108>
 8006298:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800629c:	d104      	bne.n	80062a8 <__ieee754_pow+0x138>
 800629e:	4610      	mov	r0, r2
 80062a0:	4619      	mov	r1, r3
 80062a2:	f7fa f9a9 	bl	80005f8 <__aeabi_dmul>
 80062a6:	e7e7      	b.n	8006278 <__ieee754_pow+0x108>
 80062a8:	493e      	ldr	r1, [pc, #248]	; (80063a4 <__ieee754_pow+0x234>)
 80062aa:	428f      	cmp	r7, r1
 80062ac:	d10d      	bne.n	80062ca <__ieee754_pow+0x15a>
 80062ae:	f1b9 0f00 	cmp.w	r9, #0
 80062b2:	db0a      	blt.n	80062ca <__ieee754_pow+0x15a>
 80062b4:	ec43 2b10 	vmov	d0, r2, r3
 80062b8:	b00d      	add	sp, #52	; 0x34
 80062ba:	ecbd 8b06 	vpop	{d8-d10}
 80062be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c2:	f000 bc77 	b.w	8006bb4 <__ieee754_sqrt>
 80062c6:	2100      	movs	r1, #0
 80062c8:	9100      	str	r1, [sp, #0]
 80062ca:	ec43 2b10 	vmov	d0, r2, r3
 80062ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062d2:	f000 fd23 	bl	8006d1c <fabs>
 80062d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062da:	ec51 0b10 	vmov	r0, r1, d0
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	d12a      	bne.n	800633a <__ieee754_pow+0x1ca>
 80062e4:	b12c      	cbz	r4, 80062f2 <__ieee754_pow+0x182>
 80062e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800639c <__ieee754_pow+0x22c>
 80062ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80062ee:	45e6      	cmp	lr, ip
 80062f0:	d123      	bne.n	800633a <__ieee754_pow+0x1ca>
 80062f2:	2f00      	cmp	r7, #0
 80062f4:	da05      	bge.n	8006302 <__ieee754_pow+0x192>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	2000      	movs	r0, #0
 80062fc:	4927      	ldr	r1, [pc, #156]	; (800639c <__ieee754_pow+0x22c>)
 80062fe:	f7fa faa5 	bl	800084c <__aeabi_ddiv>
 8006302:	f1b9 0f00 	cmp.w	r9, #0
 8006306:	dab7      	bge.n	8006278 <__ieee754_pow+0x108>
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800630e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006312:	4323      	orrs	r3, r4
 8006314:	d108      	bne.n	8006328 <__ieee754_pow+0x1b8>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f7f9 ffb3 	bl	8000288 <__aeabi_dsub>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	e78d      	b.n	8006244 <__ieee754_pow+0xd4>
 8006328:	9b00      	ldr	r3, [sp, #0]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d1a4      	bne.n	8006278 <__ieee754_pow+0x108>
 800632e:	4602      	mov	r2, r0
 8006330:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	e79e      	b.n	8006278 <__ieee754_pow+0x108>
 800633a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800633e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006342:	950a      	str	r5, [sp, #40]	; 0x28
 8006344:	9d00      	ldr	r5, [sp, #0]
 8006346:	46ac      	mov	ip, r5
 8006348:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800634a:	ea5c 0505 	orrs.w	r5, ip, r5
 800634e:	d0e4      	beq.n	800631a <__ieee754_pow+0x1aa>
 8006350:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <__ieee754_pow+0x238>)
 8006352:	429e      	cmp	r6, r3
 8006354:	f340 80fc 	ble.w	8006550 <__ieee754_pow+0x3e0>
 8006358:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800635c:	429e      	cmp	r6, r3
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <__ieee754_pow+0x230>)
 8006360:	dd07      	ble.n	8006372 <__ieee754_pow+0x202>
 8006362:	429c      	cmp	r4, r3
 8006364:	dc0a      	bgt.n	800637c <__ieee754_pow+0x20c>
 8006366:	2f00      	cmp	r7, #0
 8006368:	da84      	bge.n	8006274 <__ieee754_pow+0x104>
 800636a:	a307      	add	r3, pc, #28	; (adr r3, 8006388 <__ieee754_pow+0x218>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	e795      	b.n	800629e <__ieee754_pow+0x12e>
 8006372:	429c      	cmp	r4, r3
 8006374:	dbf7      	blt.n	8006366 <__ieee754_pow+0x1f6>
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <__ieee754_pow+0x22c>)
 8006378:	429c      	cmp	r4, r3
 800637a:	dd17      	ble.n	80063ac <__ieee754_pow+0x23c>
 800637c:	2f00      	cmp	r7, #0
 800637e:	dcf4      	bgt.n	800636a <__ieee754_pow+0x1fa>
 8006380:	e778      	b.n	8006274 <__ieee754_pow+0x104>
 8006382:	bf00      	nop
 8006384:	f3af 8000 	nop.w
 8006388:	8800759c 	.word	0x8800759c
 800638c:	7e37e43c 	.word	0x7e37e43c
 8006390:	7ff00000 	.word	0x7ff00000
 8006394:	08007288 	.word	0x08007288
 8006398:	433fffff 	.word	0x433fffff
 800639c:	3ff00000 	.word	0x3ff00000
 80063a0:	3fefffff 	.word	0x3fefffff
 80063a4:	3fe00000 	.word	0x3fe00000
 80063a8:	41e00000 	.word	0x41e00000
 80063ac:	4b64      	ldr	r3, [pc, #400]	; (8006540 <__ieee754_pow+0x3d0>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	f7f9 ff6a 	bl	8000288 <__aeabi_dsub>
 80063b4:	a356      	add	r3, pc, #344	; (adr r3, 8006510 <__ieee754_pow+0x3a0>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	4604      	mov	r4, r0
 80063bc:	460d      	mov	r5, r1
 80063be:	f7fa f91b 	bl	80005f8 <__aeabi_dmul>
 80063c2:	a355      	add	r3, pc, #340	; (adr r3, 8006518 <__ieee754_pow+0x3a8>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	4606      	mov	r6, r0
 80063ca:	460f      	mov	r7, r1
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7fa f912 	bl	80005f8 <__aeabi_dmul>
 80063d4:	4b5b      	ldr	r3, [pc, #364]	; (8006544 <__ieee754_pow+0x3d4>)
 80063d6:	4682      	mov	sl, r0
 80063d8:	468b      	mov	fp, r1
 80063da:	2200      	movs	r2, #0
 80063dc:	4620      	mov	r0, r4
 80063de:	4629      	mov	r1, r5
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	a14d      	add	r1, pc, #308	; (adr r1, 8006520 <__ieee754_pow+0x3b0>)
 80063ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ee:	f7f9 ff4b 	bl	8000288 <__aeabi_dsub>
 80063f2:	4622      	mov	r2, r4
 80063f4:	462b      	mov	r3, r5
 80063f6:	f7fa f8ff 	bl	80005f8 <__aeabi_dmul>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	2000      	movs	r0, #0
 8006400:	4951      	ldr	r1, [pc, #324]	; (8006548 <__ieee754_pow+0x3d8>)
 8006402:	f7f9 ff41 	bl	8000288 <__aeabi_dsub>
 8006406:	4622      	mov	r2, r4
 8006408:	4680      	mov	r8, r0
 800640a:	4689      	mov	r9, r1
 800640c:	462b      	mov	r3, r5
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa f8f1 	bl	80005f8 <__aeabi_dmul>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4640      	mov	r0, r8
 800641c:	4649      	mov	r1, r9
 800641e:	f7fa f8eb 	bl	80005f8 <__aeabi_dmul>
 8006422:	a341      	add	r3, pc, #260	; (adr r3, 8006528 <__ieee754_pow+0x3b8>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4650      	mov	r0, sl
 8006432:	4659      	mov	r1, fp
 8006434:	f7f9 ff28 	bl	8000288 <__aeabi_dsub>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 ff22 	bl	800028c <__adddf3>
 8006448:	2400      	movs	r4, #0
 800644a:	4632      	mov	r2, r6
 800644c:	463b      	mov	r3, r7
 800644e:	4620      	mov	r0, r4
 8006450:	460d      	mov	r5, r1
 8006452:	f7f9 ff19 	bl	8000288 <__aeabi_dsub>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 ff13 	bl	8000288 <__aeabi_dsub>
 8006462:	9b00      	ldr	r3, [sp, #0]
 8006464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006466:	3b01      	subs	r3, #1
 8006468:	4313      	orrs	r3, r2
 800646a:	4682      	mov	sl, r0
 800646c:	468b      	mov	fp, r1
 800646e:	f040 81f1 	bne.w	8006854 <__ieee754_pow+0x6e4>
 8006472:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006530 <__ieee754_pow+0x3c0>
 8006476:	eeb0 8a47 	vmov.f32	s16, s14
 800647a:	eef0 8a67 	vmov.f32	s17, s15
 800647e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006482:	2600      	movs	r6, #0
 8006484:	4632      	mov	r2, r6
 8006486:	463b      	mov	r3, r7
 8006488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648c:	f7f9 fefc 	bl	8000288 <__aeabi_dsub>
 8006490:	4622      	mov	r2, r4
 8006492:	462b      	mov	r3, r5
 8006494:	f7fa f8b0 	bl	80005f8 <__aeabi_dmul>
 8006498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800649c:	4680      	mov	r8, r0
 800649e:	4689      	mov	r9, r1
 80064a0:	4650      	mov	r0, sl
 80064a2:	4659      	mov	r1, fp
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f7f9 feec 	bl	800028c <__adddf3>
 80064b4:	4632      	mov	r2, r6
 80064b6:	463b      	mov	r3, r7
 80064b8:	4680      	mov	r8, r0
 80064ba:	4689      	mov	r9, r1
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7fa f89a 	bl	80005f8 <__aeabi_dmul>
 80064c4:	460b      	mov	r3, r1
 80064c6:	4604      	mov	r4, r0
 80064c8:	460d      	mov	r5, r1
 80064ca:	4602      	mov	r2, r0
 80064cc:	4649      	mov	r1, r9
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7f9 fedc 	bl	800028c <__adddf3>
 80064d4:	4b1d      	ldr	r3, [pc, #116]	; (800654c <__ieee754_pow+0x3dc>)
 80064d6:	4299      	cmp	r1, r3
 80064d8:	ec45 4b19 	vmov	d9, r4, r5
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	468b      	mov	fp, r1
 80064e2:	f340 82fe 	ble.w	8006ae2 <__ieee754_pow+0x972>
 80064e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80064ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80064ee:	4303      	orrs	r3, r0
 80064f0:	f000 81f0 	beq.w	80068d4 <__ieee754_pow+0x764>
 80064f4:	a310      	add	r3, pc, #64	; (adr r3, 8006538 <__ieee754_pow+0x3c8>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	ec51 0b18 	vmov	r0, r1, d8
 80064fe:	f7fa f87b 	bl	80005f8 <__aeabi_dmul>
 8006502:	a30d      	add	r3, pc, #52	; (adr r3, 8006538 <__ieee754_pow+0x3c8>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	e6cb      	b.n	80062a2 <__ieee754_pow+0x132>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	60000000 	.word	0x60000000
 8006514:	3ff71547 	.word	0x3ff71547
 8006518:	f85ddf44 	.word	0xf85ddf44
 800651c:	3e54ae0b 	.word	0x3e54ae0b
 8006520:	55555555 	.word	0x55555555
 8006524:	3fd55555 	.word	0x3fd55555
 8006528:	652b82fe 	.word	0x652b82fe
 800652c:	3ff71547 	.word	0x3ff71547
 8006530:	00000000 	.word	0x00000000
 8006534:	bff00000 	.word	0xbff00000
 8006538:	8800759c 	.word	0x8800759c
 800653c:	7e37e43c 	.word	0x7e37e43c
 8006540:	3ff00000 	.word	0x3ff00000
 8006544:	3fd00000 	.word	0x3fd00000
 8006548:	3fe00000 	.word	0x3fe00000
 800654c:	408fffff 	.word	0x408fffff
 8006550:	4bd7      	ldr	r3, [pc, #860]	; (80068b0 <__ieee754_pow+0x740>)
 8006552:	ea03 0309 	and.w	r3, r3, r9
 8006556:	2200      	movs	r2, #0
 8006558:	b92b      	cbnz	r3, 8006566 <__ieee754_pow+0x3f6>
 800655a:	4bd6      	ldr	r3, [pc, #856]	; (80068b4 <__ieee754_pow+0x744>)
 800655c:	f7fa f84c 	bl	80005f8 <__aeabi_dmul>
 8006560:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006564:	460c      	mov	r4, r1
 8006566:	1523      	asrs	r3, r4, #20
 8006568:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800656c:	4413      	add	r3, r2
 800656e:	9309      	str	r3, [sp, #36]	; 0x24
 8006570:	4bd1      	ldr	r3, [pc, #836]	; (80068b8 <__ieee754_pow+0x748>)
 8006572:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006576:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800657a:	429c      	cmp	r4, r3
 800657c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006580:	dd08      	ble.n	8006594 <__ieee754_pow+0x424>
 8006582:	4bce      	ldr	r3, [pc, #824]	; (80068bc <__ieee754_pow+0x74c>)
 8006584:	429c      	cmp	r4, r3
 8006586:	f340 8163 	ble.w	8006850 <__ieee754_pow+0x6e0>
 800658a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658c:	3301      	adds	r3, #1
 800658e:	9309      	str	r3, [sp, #36]	; 0x24
 8006590:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006594:	2400      	movs	r4, #0
 8006596:	00e3      	lsls	r3, r4, #3
 8006598:	930b      	str	r3, [sp, #44]	; 0x2c
 800659a:	4bc9      	ldr	r3, [pc, #804]	; (80068c0 <__ieee754_pow+0x750>)
 800659c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065a0:	ed93 7b00 	vldr	d7, [r3]
 80065a4:	4629      	mov	r1, r5
 80065a6:	ec53 2b17 	vmov	r2, r3, d7
 80065aa:	eeb0 8a47 	vmov.f32	s16, s14
 80065ae:	eef0 8a67 	vmov.f32	s17, s15
 80065b2:	4682      	mov	sl, r0
 80065b4:	f7f9 fe68 	bl	8000288 <__aeabi_dsub>
 80065b8:	4652      	mov	r2, sl
 80065ba:	4606      	mov	r6, r0
 80065bc:	460f      	mov	r7, r1
 80065be:	462b      	mov	r3, r5
 80065c0:	ec51 0b18 	vmov	r0, r1, d8
 80065c4:	f7f9 fe62 	bl	800028c <__adddf3>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	2000      	movs	r0, #0
 80065ce:	49bd      	ldr	r1, [pc, #756]	; (80068c4 <__ieee754_pow+0x754>)
 80065d0:	f7fa f93c 	bl	800084c <__aeabi_ddiv>
 80065d4:	ec41 0b19 	vmov	d9, r0, r1
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7fa f80a 	bl	80005f8 <__aeabi_dmul>
 80065e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065f0:	2300      	movs	r3, #0
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80065f8:	46ab      	mov	fp, r5
 80065fa:	106d      	asrs	r5, r5, #1
 80065fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006600:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006604:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006608:	2200      	movs	r2, #0
 800660a:	4640      	mov	r0, r8
 800660c:	4649      	mov	r1, r9
 800660e:	4614      	mov	r4, r2
 8006610:	461d      	mov	r5, r3
 8006612:	f7f9 fff1 	bl	80005f8 <__aeabi_dmul>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7f9 fe33 	bl	8000288 <__aeabi_dsub>
 8006622:	ec53 2b18 	vmov	r2, r3, d8
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	4620      	mov	r0, r4
 800662c:	4629      	mov	r1, r5
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4650      	mov	r0, sl
 8006638:	4659      	mov	r1, fp
 800663a:	f7f9 fe25 	bl	8000288 <__aeabi_dsub>
 800663e:	4642      	mov	r2, r8
 8006640:	464b      	mov	r3, r9
 8006642:	f7f9 ffd9 	bl	80005f8 <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	ec53 2b19 	vmov	r2, r3, d9
 8006656:	f7f9 ffcf 	bl	80005f8 <__aeabi_dmul>
 800665a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800665e:	ec41 0b18 	vmov	d8, r0, r1
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7f9 ffc7 	bl	80005f8 <__aeabi_dmul>
 800666a:	a37d      	add	r3, pc, #500	; (adr r3, 8006860 <__ieee754_pow+0x6f0>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	f7f9 ffc0 	bl	80005f8 <__aeabi_dmul>
 8006678:	a37b      	add	r3, pc, #492	; (adr r3, 8006868 <__ieee754_pow+0x6f8>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 fe05 	bl	800028c <__adddf3>
 8006682:	4622      	mov	r2, r4
 8006684:	462b      	mov	r3, r5
 8006686:	f7f9 ffb7 	bl	80005f8 <__aeabi_dmul>
 800668a:	a379      	add	r3, pc, #484	; (adr r3, 8006870 <__ieee754_pow+0x700>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f7f9 fdfc 	bl	800028c <__adddf3>
 8006694:	4622      	mov	r2, r4
 8006696:	462b      	mov	r3, r5
 8006698:	f7f9 ffae 	bl	80005f8 <__aeabi_dmul>
 800669c:	a376      	add	r3, pc, #472	; (adr r3, 8006878 <__ieee754_pow+0x708>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f7f9 fdf3 	bl	800028c <__adddf3>
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	a374      	add	r3, pc, #464	; (adr r3, 8006880 <__ieee754_pow+0x710>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fdea 	bl	800028c <__adddf3>
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	f7f9 ff9c 	bl	80005f8 <__aeabi_dmul>
 80066c0:	a371      	add	r3, pc, #452	; (adr r3, 8006888 <__ieee754_pow+0x718>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fde1 	bl	800028c <__adddf3>
 80066ca:	4622      	mov	r2, r4
 80066cc:	4606      	mov	r6, r0
 80066ce:	460f      	mov	r7, r1
 80066d0:	462b      	mov	r3, r5
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 ff89 	bl	80005f8 <__aeabi_dmul>
 80066e6:	4642      	mov	r2, r8
 80066e8:	4604      	mov	r4, r0
 80066ea:	460d      	mov	r5, r1
 80066ec:	464b      	mov	r3, r9
 80066ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f2:	f7f9 fdcb 	bl	800028c <__adddf3>
 80066f6:	ec53 2b18 	vmov	r2, r3, d8
 80066fa:	f7f9 ff7d 	bl	80005f8 <__aeabi_dmul>
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f7f9 fdc3 	bl	800028c <__adddf3>
 8006706:	4642      	mov	r2, r8
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	464b      	mov	r3, r9
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	4b6c      	ldr	r3, [pc, #432]	; (80068c8 <__ieee754_pow+0x758>)
 8006718:	2200      	movs	r2, #0
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	f7f9 fdb5 	bl	800028c <__adddf3>
 8006722:	4652      	mov	r2, sl
 8006724:	465b      	mov	r3, fp
 8006726:	f7f9 fdb1 	bl	800028c <__adddf3>
 800672a:	9c04      	ldr	r4, [sp, #16]
 800672c:	460d      	mov	r5, r1
 800672e:	4622      	mov	r2, r4
 8006730:	460b      	mov	r3, r1
 8006732:	4640      	mov	r0, r8
 8006734:	4649      	mov	r1, r9
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	4b63      	ldr	r3, [pc, #396]	; (80068c8 <__ieee754_pow+0x758>)
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	2200      	movs	r2, #0
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 fd9f 	bl	8000288 <__aeabi_dsub>
 800674a:	4632      	mov	r2, r6
 800674c:	463b      	mov	r3, r7
 800674e:	f7f9 fd9b 	bl	8000288 <__aeabi_dsub>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4650      	mov	r0, sl
 8006758:	4659      	mov	r1, fp
 800675a:	f7f9 fd95 	bl	8000288 <__aeabi_dsub>
 800675e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006762:	f7f9 ff49 	bl	80005f8 <__aeabi_dmul>
 8006766:	4622      	mov	r2, r4
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	462b      	mov	r3, r5
 800676e:	ec51 0b18 	vmov	r0, r1, d8
 8006772:	f7f9 ff41 	bl	80005f8 <__aeabi_dmul>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7f9 fd85 	bl	800028c <__adddf3>
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7f9 fd7d 	bl	800028c <__adddf3>
 8006792:	9c04      	ldr	r4, [sp, #16]
 8006794:	a33e      	add	r3, pc, #248	; (adr r3, 8006890 <__ieee754_pow+0x720>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	4620      	mov	r0, r4
 800679c:	460d      	mov	r5, r1
 800679e:	f7f9 ff2b 	bl	80005f8 <__aeabi_dmul>
 80067a2:	4642      	mov	r2, r8
 80067a4:	ec41 0b18 	vmov	d8, r0, r1
 80067a8:	464b      	mov	r3, r9
 80067aa:	4620      	mov	r0, r4
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7f9 fd6b 	bl	8000288 <__aeabi_dsub>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7f9 fd65 	bl	8000288 <__aeabi_dsub>
 80067be:	a336      	add	r3, pc, #216	; (adr r3, 8006898 <__ieee754_pow+0x728>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	a335      	add	r3, pc, #212	; (adr r3, 80068a0 <__ieee754_pow+0x730>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	4606      	mov	r6, r0
 80067d0:	460f      	mov	r7, r1
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 ff0f 	bl	80005f8 <__aeabi_dmul>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 fd53 	bl	800028c <__adddf3>
 80067e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067e8:	4b38      	ldr	r3, [pc, #224]	; (80068cc <__ieee754_pow+0x75c>)
 80067ea:	4413      	add	r3, r2
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fd4c 	bl	800028c <__adddf3>
 80067f4:	4682      	mov	sl, r0
 80067f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067f8:	468b      	mov	fp, r1
 80067fa:	f7f9 fe93 	bl	8000524 <__aeabi_i2d>
 80067fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006800:	4b33      	ldr	r3, [pc, #204]	; (80068d0 <__ieee754_pow+0x760>)
 8006802:	4413      	add	r3, r2
 8006804:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006808:	4606      	mov	r6, r0
 800680a:	460f      	mov	r7, r1
 800680c:	4652      	mov	r2, sl
 800680e:	465b      	mov	r3, fp
 8006810:	ec51 0b18 	vmov	r0, r1, d8
 8006814:	f7f9 fd3a 	bl	800028c <__adddf3>
 8006818:	4642      	mov	r2, r8
 800681a:	464b      	mov	r3, r9
 800681c:	f7f9 fd36 	bl	800028c <__adddf3>
 8006820:	4632      	mov	r2, r6
 8006822:	463b      	mov	r3, r7
 8006824:	f7f9 fd32 	bl	800028c <__adddf3>
 8006828:	9c04      	ldr	r4, [sp, #16]
 800682a:	4632      	mov	r2, r6
 800682c:	463b      	mov	r3, r7
 800682e:	4620      	mov	r0, r4
 8006830:	460d      	mov	r5, r1
 8006832:	f7f9 fd29 	bl	8000288 <__aeabi_dsub>
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	f7f9 fd25 	bl	8000288 <__aeabi_dsub>
 800683e:	ec53 2b18 	vmov	r2, r3, d8
 8006842:	f7f9 fd21 	bl	8000288 <__aeabi_dsub>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4650      	mov	r0, sl
 800684c:	4659      	mov	r1, fp
 800684e:	e606      	b.n	800645e <__ieee754_pow+0x2ee>
 8006850:	2401      	movs	r4, #1
 8006852:	e6a0      	b.n	8006596 <__ieee754_pow+0x426>
 8006854:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80068a8 <__ieee754_pow+0x738>
 8006858:	e60d      	b.n	8006476 <__ieee754_pow+0x306>
 800685a:	bf00      	nop
 800685c:	f3af 8000 	nop.w
 8006860:	4a454eef 	.word	0x4a454eef
 8006864:	3fca7e28 	.word	0x3fca7e28
 8006868:	93c9db65 	.word	0x93c9db65
 800686c:	3fcd864a 	.word	0x3fcd864a
 8006870:	a91d4101 	.word	0xa91d4101
 8006874:	3fd17460 	.word	0x3fd17460
 8006878:	518f264d 	.word	0x518f264d
 800687c:	3fd55555 	.word	0x3fd55555
 8006880:	db6fabff 	.word	0xdb6fabff
 8006884:	3fdb6db6 	.word	0x3fdb6db6
 8006888:	33333303 	.word	0x33333303
 800688c:	3fe33333 	.word	0x3fe33333
 8006890:	e0000000 	.word	0xe0000000
 8006894:	3feec709 	.word	0x3feec709
 8006898:	dc3a03fd 	.word	0xdc3a03fd
 800689c:	3feec709 	.word	0x3feec709
 80068a0:	145b01f5 	.word	0x145b01f5
 80068a4:	be3e2fe0 	.word	0xbe3e2fe0
 80068a8:	00000000 	.word	0x00000000
 80068ac:	3ff00000 	.word	0x3ff00000
 80068b0:	7ff00000 	.word	0x7ff00000
 80068b4:	43400000 	.word	0x43400000
 80068b8:	0003988e 	.word	0x0003988e
 80068bc:	000bb679 	.word	0x000bb679
 80068c0:	080073f8 	.word	0x080073f8
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	40080000 	.word	0x40080000
 80068cc:	08007418 	.word	0x08007418
 80068d0:	08007408 	.word	0x08007408
 80068d4:	a3b5      	add	r3, pc, #724	; (adr r3, 8006bac <__ieee754_pow+0xa3c>)
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7f9 fcd5 	bl	800028c <__adddf3>
 80068e2:	4622      	mov	r2, r4
 80068e4:	ec41 0b1a 	vmov	d10, r0, r1
 80068e8:	462b      	mov	r3, r5
 80068ea:	4630      	mov	r0, r6
 80068ec:	4639      	mov	r1, r7
 80068ee:	f7f9 fccb 	bl	8000288 <__aeabi_dsub>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	ec51 0b1a 	vmov	r0, r1, d10
 80068fa:	f7fa f90d 	bl	8000b18 <__aeabi_dcmpgt>
 80068fe:	2800      	cmp	r0, #0
 8006900:	f47f adf8 	bne.w	80064f4 <__ieee754_pow+0x384>
 8006904:	4aa4      	ldr	r2, [pc, #656]	; (8006b98 <__ieee754_pow+0xa28>)
 8006906:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800690a:	4293      	cmp	r3, r2
 800690c:	f340 810b 	ble.w	8006b26 <__ieee754_pow+0x9b6>
 8006910:	151b      	asrs	r3, r3, #20
 8006912:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006916:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800691a:	fa4a f303 	asr.w	r3, sl, r3
 800691e:	445b      	add	r3, fp
 8006920:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006924:	4e9d      	ldr	r6, [pc, #628]	; (8006b9c <__ieee754_pow+0xa2c>)
 8006926:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800692a:	4116      	asrs	r6, r2
 800692c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006930:	2000      	movs	r0, #0
 8006932:	ea23 0106 	bic.w	r1, r3, r6
 8006936:	f1c2 0214 	rsb	r2, r2, #20
 800693a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800693e:	fa4a fa02 	asr.w	sl, sl, r2
 8006942:	f1bb 0f00 	cmp.w	fp, #0
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4620      	mov	r0, r4
 800694c:	4629      	mov	r1, r5
 800694e:	bfb8      	it	lt
 8006950:	f1ca 0a00 	rsblt	sl, sl, #0
 8006954:	f7f9 fc98 	bl	8000288 <__aeabi_dsub>
 8006958:	ec41 0b19 	vmov	d9, r0, r1
 800695c:	4642      	mov	r2, r8
 800695e:	464b      	mov	r3, r9
 8006960:	ec51 0b19 	vmov	r0, r1, d9
 8006964:	f7f9 fc92 	bl	800028c <__adddf3>
 8006968:	2400      	movs	r4, #0
 800696a:	a379      	add	r3, pc, #484	; (adr r3, 8006b50 <__ieee754_pow+0x9e0>)
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	4620      	mov	r0, r4
 8006972:	460d      	mov	r5, r1
 8006974:	f7f9 fe40 	bl	80005f8 <__aeabi_dmul>
 8006978:	ec53 2b19 	vmov	r2, r3, d9
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	4620      	mov	r0, r4
 8006982:	4629      	mov	r1, r5
 8006984:	f7f9 fc80 	bl	8000288 <__aeabi_dsub>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4640      	mov	r0, r8
 800698e:	4649      	mov	r1, r9
 8006990:	f7f9 fc7a 	bl	8000288 <__aeabi_dsub>
 8006994:	a370      	add	r3, pc, #448	; (adr r3, 8006b58 <__ieee754_pow+0x9e8>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f7f9 fe2d 	bl	80005f8 <__aeabi_dmul>
 800699e:	a370      	add	r3, pc, #448	; (adr r3, 8006b60 <__ieee754_pow+0x9f0>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	4680      	mov	r8, r0
 80069a6:	4689      	mov	r9, r1
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7f9 fe24 	bl	80005f8 <__aeabi_dmul>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7f9 fc68 	bl	800028c <__adddf3>
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc60 	bl	800028c <__adddf3>
 80069cc:	4632      	mov	r2, r6
 80069ce:	463b      	mov	r3, r7
 80069d0:	4680      	mov	r8, r0
 80069d2:	4689      	mov	r9, r1
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4620      	mov	r0, r4
 80069de:	4629      	mov	r1, r5
 80069e0:	f7f9 fc52 	bl	8000288 <__aeabi_dsub>
 80069e4:	4642      	mov	r2, r8
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	464b      	mov	r3, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fe02 	bl	80005f8 <__aeabi_dmul>
 80069f4:	a35c      	add	r3, pc, #368	; (adr r3, 8006b68 <__ieee754_pow+0x9f8>)
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	4604      	mov	r4, r0
 80069fc:	460d      	mov	r5, r1
 80069fe:	f7f9 fdfb 	bl	80005f8 <__aeabi_dmul>
 8006a02:	a35b      	add	r3, pc, #364	; (adr r3, 8006b70 <__ieee754_pow+0xa00>)
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f7f9 fc3e 	bl	8000288 <__aeabi_dsub>
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	462b      	mov	r3, r5
 8006a10:	f7f9 fdf2 	bl	80005f8 <__aeabi_dmul>
 8006a14:	a358      	add	r3, pc, #352	; (adr r3, 8006b78 <__ieee754_pow+0xa08>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f7f9 fc37 	bl	800028c <__adddf3>
 8006a1e:	4622      	mov	r2, r4
 8006a20:	462b      	mov	r3, r5
 8006a22:	f7f9 fde9 	bl	80005f8 <__aeabi_dmul>
 8006a26:	a356      	add	r3, pc, #344	; (adr r3, 8006b80 <__ieee754_pow+0xa10>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fc2c 	bl	8000288 <__aeabi_dsub>
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	f7f9 fde0 	bl	80005f8 <__aeabi_dmul>
 8006a38:	a353      	add	r3, pc, #332	; (adr r3, 8006b88 <__ieee754_pow+0xa18>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fc25 	bl	800028c <__adddf3>
 8006a42:	4622      	mov	r2, r4
 8006a44:	462b      	mov	r3, r5
 8006a46:	f7f9 fdd7 	bl	80005f8 <__aeabi_dmul>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f7f9 fc19 	bl	8000288 <__aeabi_dsub>
 8006a56:	4604      	mov	r4, r0
 8006a58:	460d      	mov	r5, r1
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4640      	mov	r0, r8
 8006a60:	4649      	mov	r1, r9
 8006a62:	f7f9 fdc9 	bl	80005f8 <__aeabi_dmul>
 8006a66:	2200      	movs	r2, #0
 8006a68:	ec41 0b19 	vmov	d9, r0, r1
 8006a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a70:	4620      	mov	r0, r4
 8006a72:	4629      	mov	r1, r5
 8006a74:	f7f9 fc08 	bl	8000288 <__aeabi_dsub>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	ec51 0b19 	vmov	r0, r1, d9
 8006a80:	f7f9 fee4 	bl	800084c <__aeabi_ddiv>
 8006a84:	4632      	mov	r2, r6
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	4649      	mov	r1, r9
 8006a90:	f7f9 fdb2 	bl	80005f8 <__aeabi_dmul>
 8006a94:	4632      	mov	r2, r6
 8006a96:	463b      	mov	r3, r7
 8006a98:	f7f9 fbf8 	bl	800028c <__adddf3>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	f7f9 fbec 	bl	8000288 <__aeabi_dsub>
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	493a      	ldr	r1, [pc, #232]	; (8006ba0 <__ieee754_pow+0xa30>)
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f7f9 fbe6 	bl	8000288 <__aeabi_dsub>
 8006abc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aca:	da2f      	bge.n	8006b2c <__ieee754_pow+0x9bc>
 8006acc:	4650      	mov	r0, sl
 8006ace:	ed9d 0b00 	vldr	d0, [sp]
 8006ad2:	f000 f9cd 	bl	8006e70 <scalbn>
 8006ad6:	ec51 0b10 	vmov	r0, r1, d0
 8006ada:	ec53 2b18 	vmov	r2, r3, d8
 8006ade:	f7ff bbe0 	b.w	80062a2 <__ieee754_pow+0x132>
 8006ae2:	4b30      	ldr	r3, [pc, #192]	; (8006ba4 <__ieee754_pow+0xa34>)
 8006ae4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006ae8:	429e      	cmp	r6, r3
 8006aea:	f77f af0b 	ble.w	8006904 <__ieee754_pow+0x794>
 8006aee:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <__ieee754_pow+0xa38>)
 8006af0:	440b      	add	r3, r1
 8006af2:	4303      	orrs	r3, r0
 8006af4:	d00b      	beq.n	8006b0e <__ieee754_pow+0x99e>
 8006af6:	a326      	add	r3, pc, #152	; (adr r3, 8006b90 <__ieee754_pow+0xa20>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	ec51 0b18 	vmov	r0, r1, d8
 8006b00:	f7f9 fd7a 	bl	80005f8 <__aeabi_dmul>
 8006b04:	a322      	add	r3, pc, #136	; (adr r3, 8006b90 <__ieee754_pow+0xa20>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7ff bbca 	b.w	80062a2 <__ieee754_pow+0x132>
 8006b0e:	4622      	mov	r2, r4
 8006b10:	462b      	mov	r3, r5
 8006b12:	f7f9 fbb9 	bl	8000288 <__aeabi_dsub>
 8006b16:	4642      	mov	r2, r8
 8006b18:	464b      	mov	r3, r9
 8006b1a:	f7f9 fff3 	bl	8000b04 <__aeabi_dcmpge>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f aef0 	beq.w	8006904 <__ieee754_pow+0x794>
 8006b24:	e7e7      	b.n	8006af6 <__ieee754_pow+0x986>
 8006b26:	f04f 0a00 	mov.w	sl, #0
 8006b2a:	e717      	b.n	800695c <__ieee754_pow+0x7ec>
 8006b2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b30:	4619      	mov	r1, r3
 8006b32:	e7d2      	b.n	8006ada <__ieee754_pow+0x96a>
 8006b34:	491a      	ldr	r1, [pc, #104]	; (8006ba0 <__ieee754_pow+0xa30>)
 8006b36:	2000      	movs	r0, #0
 8006b38:	f7ff bb9e 	b.w	8006278 <__ieee754_pow+0x108>
 8006b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b40:	f7ff bb9a 	b.w	8006278 <__ieee754_pow+0x108>
 8006b44:	9000      	str	r0, [sp, #0]
 8006b46:	f7ff bb76 	b.w	8006236 <__ieee754_pow+0xc6>
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f7ff bb60 	b.w	8006210 <__ieee754_pow+0xa0>
 8006b50:	00000000 	.word	0x00000000
 8006b54:	3fe62e43 	.word	0x3fe62e43
 8006b58:	fefa39ef 	.word	0xfefa39ef
 8006b5c:	3fe62e42 	.word	0x3fe62e42
 8006b60:	0ca86c39 	.word	0x0ca86c39
 8006b64:	be205c61 	.word	0xbe205c61
 8006b68:	72bea4d0 	.word	0x72bea4d0
 8006b6c:	3e663769 	.word	0x3e663769
 8006b70:	c5d26bf1 	.word	0xc5d26bf1
 8006b74:	3ebbbd41 	.word	0x3ebbbd41
 8006b78:	af25de2c 	.word	0xaf25de2c
 8006b7c:	3f11566a 	.word	0x3f11566a
 8006b80:	16bebd93 	.word	0x16bebd93
 8006b84:	3f66c16c 	.word	0x3f66c16c
 8006b88:	5555553e 	.word	0x5555553e
 8006b8c:	3fc55555 	.word	0x3fc55555
 8006b90:	c2f8f359 	.word	0xc2f8f359
 8006b94:	01a56e1f 	.word	0x01a56e1f
 8006b98:	3fe00000 	.word	0x3fe00000
 8006b9c:	000fffff 	.word	0x000fffff
 8006ba0:	3ff00000 	.word	0x3ff00000
 8006ba4:	4090cbff 	.word	0x4090cbff
 8006ba8:	3f6f3400 	.word	0x3f6f3400
 8006bac:	652b82fe 	.word	0x652b82fe
 8006bb0:	3c971547 	.word	0x3c971547

08006bb4 <__ieee754_sqrt>:
 8006bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb8:	ec55 4b10 	vmov	r4, r5, d0
 8006bbc:	4e56      	ldr	r6, [pc, #344]	; (8006d18 <__ieee754_sqrt+0x164>)
 8006bbe:	43ae      	bics	r6, r5
 8006bc0:	ee10 0a10 	vmov	r0, s0
 8006bc4:	ee10 3a10 	vmov	r3, s0
 8006bc8:	4629      	mov	r1, r5
 8006bca:	462a      	mov	r2, r5
 8006bcc:	d110      	bne.n	8006bf0 <__ieee754_sqrt+0x3c>
 8006bce:	ee10 2a10 	vmov	r2, s0
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	f7f9 fd10 	bl	80005f8 <__aeabi_dmul>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4629      	mov	r1, r5
 8006be0:	f7f9 fb54 	bl	800028c <__adddf3>
 8006be4:	4604      	mov	r4, r0
 8006be6:	460d      	mov	r5, r1
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dc10      	bgt.n	8006c16 <__ieee754_sqrt+0x62>
 8006bf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bf8:	4330      	orrs	r0, r6
 8006bfa:	d0f5      	beq.n	8006be8 <__ieee754_sqrt+0x34>
 8006bfc:	b15d      	cbz	r5, 8006c16 <__ieee754_sqrt+0x62>
 8006bfe:	ee10 2a10 	vmov	r2, s0
 8006c02:	462b      	mov	r3, r5
 8006c04:	ee10 0a10 	vmov	r0, s0
 8006c08:	f7f9 fb3e 	bl	8000288 <__aeabi_dsub>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	f7f9 fe1c 	bl	800084c <__aeabi_ddiv>
 8006c14:	e7e6      	b.n	8006be4 <__ieee754_sqrt+0x30>
 8006c16:	1509      	asrs	r1, r1, #20
 8006c18:	d076      	beq.n	8006d08 <__ieee754_sqrt+0x154>
 8006c1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006c1e:	07ce      	lsls	r6, r1, #31
 8006c20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006c24:	bf5e      	ittt	pl
 8006c26:	0fda      	lsrpl	r2, r3, #31
 8006c28:	005b      	lslpl	r3, r3, #1
 8006c2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006c2e:	0fda      	lsrs	r2, r3, #31
 8006c30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006c34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006c38:	2000      	movs	r0, #0
 8006c3a:	106d      	asrs	r5, r5, #1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	f04f 0e16 	mov.w	lr, #22
 8006c42:	4684      	mov	ip, r0
 8006c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c48:	eb0c 0401 	add.w	r4, ip, r1
 8006c4c:	4294      	cmp	r4, r2
 8006c4e:	bfde      	ittt	le
 8006c50:	1b12      	suble	r2, r2, r4
 8006c52:	eb04 0c01 	addle.w	ip, r4, r1
 8006c56:	1840      	addle	r0, r0, r1
 8006c58:	0052      	lsls	r2, r2, #1
 8006c5a:	f1be 0e01 	subs.w	lr, lr, #1
 8006c5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006c62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c6a:	d1ed      	bne.n	8006c48 <__ieee754_sqrt+0x94>
 8006c6c:	4671      	mov	r1, lr
 8006c6e:	2720      	movs	r7, #32
 8006c70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006c74:	4562      	cmp	r2, ip
 8006c76:	eb04 060e 	add.w	r6, r4, lr
 8006c7a:	dc02      	bgt.n	8006c82 <__ieee754_sqrt+0xce>
 8006c7c:	d113      	bne.n	8006ca6 <__ieee754_sqrt+0xf2>
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	d811      	bhi.n	8006ca6 <__ieee754_sqrt+0xf2>
 8006c82:	2e00      	cmp	r6, #0
 8006c84:	eb06 0e04 	add.w	lr, r6, r4
 8006c88:	da43      	bge.n	8006d12 <__ieee754_sqrt+0x15e>
 8006c8a:	f1be 0f00 	cmp.w	lr, #0
 8006c8e:	db40      	blt.n	8006d12 <__ieee754_sqrt+0x15e>
 8006c90:	f10c 0801 	add.w	r8, ip, #1
 8006c94:	eba2 020c 	sub.w	r2, r2, ip
 8006c98:	429e      	cmp	r6, r3
 8006c9a:	bf88      	it	hi
 8006c9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006ca0:	1b9b      	subs	r3, r3, r6
 8006ca2:	4421      	add	r1, r4
 8006ca4:	46c4      	mov	ip, r8
 8006ca6:	0052      	lsls	r2, r2, #1
 8006ca8:	3f01      	subs	r7, #1
 8006caa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006cae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006cb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cb6:	d1dd      	bne.n	8006c74 <__ieee754_sqrt+0xc0>
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d006      	beq.n	8006cca <__ieee754_sqrt+0x116>
 8006cbc:	1c4c      	adds	r4, r1, #1
 8006cbe:	bf13      	iteet	ne
 8006cc0:	3101      	addne	r1, #1
 8006cc2:	3001      	addeq	r0, #1
 8006cc4:	4639      	moveq	r1, r7
 8006cc6:	f021 0101 	bicne.w	r1, r1, #1
 8006cca:	1043      	asrs	r3, r0, #1
 8006ccc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006cd0:	0849      	lsrs	r1, r1, #1
 8006cd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006cd6:	07c2      	lsls	r2, r0, #31
 8006cd8:	bf48      	it	mi
 8006cda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006cde:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	463d      	mov	r5, r7
 8006ce6:	e77f      	b.n	8006be8 <__ieee754_sqrt+0x34>
 8006ce8:	0ada      	lsrs	r2, r3, #11
 8006cea:	3815      	subs	r0, #21
 8006cec:	055b      	lsls	r3, r3, #21
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	d0fa      	beq.n	8006ce8 <__ieee754_sqrt+0x134>
 8006cf2:	02d7      	lsls	r7, r2, #11
 8006cf4:	d50a      	bpl.n	8006d0c <__ieee754_sqrt+0x158>
 8006cf6:	f1c1 0420 	rsb	r4, r1, #32
 8006cfa:	fa23 f404 	lsr.w	r4, r3, r4
 8006cfe:	1e4d      	subs	r5, r1, #1
 8006d00:	408b      	lsls	r3, r1
 8006d02:	4322      	orrs	r2, r4
 8006d04:	1b41      	subs	r1, r0, r5
 8006d06:	e788      	b.n	8006c1a <__ieee754_sqrt+0x66>
 8006d08:	4608      	mov	r0, r1
 8006d0a:	e7f0      	b.n	8006cee <__ieee754_sqrt+0x13a>
 8006d0c:	0052      	lsls	r2, r2, #1
 8006d0e:	3101      	adds	r1, #1
 8006d10:	e7ef      	b.n	8006cf2 <__ieee754_sqrt+0x13e>
 8006d12:	46e0      	mov	r8, ip
 8006d14:	e7be      	b.n	8006c94 <__ieee754_sqrt+0xe0>
 8006d16:	bf00      	nop
 8006d18:	7ff00000 	.word	0x7ff00000

08006d1c <fabs>:
 8006d1c:	ec51 0b10 	vmov	r0, r1, d0
 8006d20:	ee10 2a10 	vmov	r2, s0
 8006d24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d28:	ec43 2b10 	vmov	d0, r2, r3
 8006d2c:	4770      	bx	lr

08006d2e <finite>:
 8006d2e:	b082      	sub	sp, #8
 8006d30:	ed8d 0b00 	vstr	d0, [sp]
 8006d34:	9801      	ldr	r0, [sp, #4]
 8006d36:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006d3a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006d3e:	0fc0      	lsrs	r0, r0, #31
 8006d40:	b002      	add	sp, #8
 8006d42:	4770      	bx	lr
 8006d44:	0000      	movs	r0, r0
	...

08006d48 <nan>:
 8006d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006d50 <nan+0x8>
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	00000000 	.word	0x00000000
 8006d54:	7ff80000 	.word	0x7ff80000

08006d58 <rint>:
 8006d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5a:	ec51 0b10 	vmov	r0, r1, d0
 8006d5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d62:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006d66:	2e13      	cmp	r6, #19
 8006d68:	ee10 4a10 	vmov	r4, s0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006d72:	dc58      	bgt.n	8006e26 <rint+0xce>
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	da2b      	bge.n	8006dd0 <rint+0x78>
 8006d78:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006d7c:	4302      	orrs	r2, r0
 8006d7e:	d023      	beq.n	8006dc8 <rint+0x70>
 8006d80:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006d84:	4302      	orrs	r2, r0
 8006d86:	4254      	negs	r4, r2
 8006d88:	4314      	orrs	r4, r2
 8006d8a:	0c4b      	lsrs	r3, r1, #17
 8006d8c:	0b24      	lsrs	r4, r4, #12
 8006d8e:	045b      	lsls	r3, r3, #17
 8006d90:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006d94:	ea44 0103 	orr.w	r1, r4, r3
 8006d98:	4b32      	ldr	r3, [pc, #200]	; (8006e64 <rint+0x10c>)
 8006d9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006d9e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4630      	mov	r0, r6
 8006da8:	4639      	mov	r1, r7
 8006daa:	f7f9 fa6f 	bl	800028c <__adddf3>
 8006dae:	e9cd 0100 	strd	r0, r1, [sp]
 8006db2:	463b      	mov	r3, r7
 8006db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db8:	4632      	mov	r2, r6
 8006dba:	f7f9 fa65 	bl	8000288 <__aeabi_dsub>
 8006dbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dc2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	ec41 0b10 	vmov	d0, r0, r1
 8006dcc:	b003      	add	sp, #12
 8006dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd0:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <rint+0x110>)
 8006dd2:	4132      	asrs	r2, r6
 8006dd4:	ea01 0702 	and.w	r7, r1, r2
 8006dd8:	4307      	orrs	r7, r0
 8006dda:	d0f5      	beq.n	8006dc8 <rint+0x70>
 8006ddc:	0851      	lsrs	r1, r2, #1
 8006dde:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006de2:	4314      	orrs	r4, r2
 8006de4:	d00c      	beq.n	8006e00 <rint+0xa8>
 8006de6:	ea23 0201 	bic.w	r2, r3, r1
 8006dea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dee:	2e13      	cmp	r6, #19
 8006df0:	fa43 f606 	asr.w	r6, r3, r6
 8006df4:	bf0c      	ite	eq
 8006df6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006dfa:	2400      	movne	r4, #0
 8006dfc:	ea42 0306 	orr.w	r3, r2, r6
 8006e00:	4918      	ldr	r1, [pc, #96]	; (8006e64 <rint+0x10c>)
 8006e02:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006e06:	4622      	mov	r2, r4
 8006e08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7f9 fa3c 	bl	800028c <__adddf3>
 8006e14:	e9cd 0100 	strd	r0, r1, [sp]
 8006e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f7f9 fa32 	bl	8000288 <__aeabi_dsub>
 8006e24:	e7d0      	b.n	8006dc8 <rint+0x70>
 8006e26:	2e33      	cmp	r6, #51	; 0x33
 8006e28:	dd07      	ble.n	8006e3a <rint+0xe2>
 8006e2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e2e:	d1cb      	bne.n	8006dc8 <rint+0x70>
 8006e30:	ee10 2a10 	vmov	r2, s0
 8006e34:	f7f9 fa2a 	bl	800028c <__adddf3>
 8006e38:	e7c6      	b.n	8006dc8 <rint+0x70>
 8006e3a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006e3e:	f04f 36ff 	mov.w	r6, #4294967295
 8006e42:	40d6      	lsrs	r6, r2
 8006e44:	4230      	tst	r0, r6
 8006e46:	d0bf      	beq.n	8006dc8 <rint+0x70>
 8006e48:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006e4c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006e50:	bf1f      	itttt	ne
 8006e52:	ea24 0101 	bicne.w	r1, r4, r1
 8006e56:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006e5a:	fa44 f202 	asrne.w	r2, r4, r2
 8006e5e:	ea41 0402 	orrne.w	r4, r1, r2
 8006e62:	e7cd      	b.n	8006e00 <rint+0xa8>
 8006e64:	08007428 	.word	0x08007428
 8006e68:	000fffff 	.word	0x000fffff
 8006e6c:	00000000 	.word	0x00000000

08006e70 <scalbn>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	ec55 4b10 	vmov	r4, r5, d0
 8006e76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	b99a      	cbnz	r2, 8006ea8 <scalbn+0x38>
 8006e80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e84:	4323      	orrs	r3, r4
 8006e86:	d036      	beq.n	8006ef6 <scalbn+0x86>
 8006e88:	4b39      	ldr	r3, [pc, #228]	; (8006f70 <scalbn+0x100>)
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	ee10 0a10 	vmov	r0, s0
 8006e90:	2200      	movs	r2, #0
 8006e92:	f7f9 fbb1 	bl	80005f8 <__aeabi_dmul>
 8006e96:	4b37      	ldr	r3, [pc, #220]	; (8006f74 <scalbn+0x104>)
 8006e98:	429e      	cmp	r6, r3
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	da10      	bge.n	8006ec2 <scalbn+0x52>
 8006ea0:	a32b      	add	r3, pc, #172	; (adr r3, 8006f50 <scalbn+0xe0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	e03a      	b.n	8006f1e <scalbn+0xae>
 8006ea8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006eac:	428a      	cmp	r2, r1
 8006eae:	d10c      	bne.n	8006eca <scalbn+0x5a>
 8006eb0:	ee10 2a10 	vmov	r2, s0
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 f9e8 	bl	800028c <__adddf3>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	e019      	b.n	8006ef6 <scalbn+0x86>
 8006ec2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	3a36      	subs	r2, #54	; 0x36
 8006eca:	4432      	add	r2, r6
 8006ecc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ed0:	428a      	cmp	r2, r1
 8006ed2:	dd08      	ble.n	8006ee6 <scalbn+0x76>
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	a120      	add	r1, pc, #128	; (adr r1, 8006f58 <scalbn+0xe8>)
 8006ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006edc:	da1c      	bge.n	8006f18 <scalbn+0xa8>
 8006ede:	a120      	add	r1, pc, #128	; (adr r1, 8006f60 <scalbn+0xf0>)
 8006ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ee4:	e018      	b.n	8006f18 <scalbn+0xa8>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	dd08      	ble.n	8006efc <scalbn+0x8c>
 8006eea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006eee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ef2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ef6:	ec45 4b10 	vmov	d0, r4, r5
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f00:	da19      	bge.n	8006f36 <scalbn+0xc6>
 8006f02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006f06:	429e      	cmp	r6, r3
 8006f08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006f0c:	dd0a      	ble.n	8006f24 <scalbn+0xb4>
 8006f0e:	a112      	add	r1, pc, #72	; (adr r1, 8006f58 <scalbn+0xe8>)
 8006f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e2      	bne.n	8006ede <scalbn+0x6e>
 8006f18:	a30f      	add	r3, pc, #60	; (adr r3, 8006f58 <scalbn+0xe8>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fb6b 	bl	80005f8 <__aeabi_dmul>
 8006f22:	e7cb      	b.n	8006ebc <scalbn+0x4c>
 8006f24:	a10a      	add	r1, pc, #40	; (adr r1, 8006f50 <scalbn+0xe0>)
 8006f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0b8      	beq.n	8006ea0 <scalbn+0x30>
 8006f2e:	a10e      	add	r1, pc, #56	; (adr r1, 8006f68 <scalbn+0xf8>)
 8006f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f34:	e7b4      	b.n	8006ea0 <scalbn+0x30>
 8006f36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f3a:	3236      	adds	r2, #54	; 0x36
 8006f3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006f44:	4620      	mov	r0, r4
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <scalbn+0x108>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	e7e8      	b.n	8006f1e <scalbn+0xae>
 8006f4c:	f3af 8000 	nop.w
 8006f50:	c2f8f359 	.word	0xc2f8f359
 8006f54:	01a56e1f 	.word	0x01a56e1f
 8006f58:	8800759c 	.word	0x8800759c
 8006f5c:	7e37e43c 	.word	0x7e37e43c
 8006f60:	8800759c 	.word	0x8800759c
 8006f64:	fe37e43c 	.word	0xfe37e43c
 8006f68:	c2f8f359 	.word	0xc2f8f359
 8006f6c:	81a56e1f 	.word	0x81a56e1f
 8006f70:	43500000 	.word	0x43500000
 8006f74:	ffff3cb0 	.word	0xffff3cb0
 8006f78:	3c900000 	.word	0x3c900000

08006f7c <_init>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr

08006f88 <_fini>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	bf00      	nop
 8006f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8e:	bc08      	pop	{r3}
 8006f90:	469e      	mov	lr, r3
 8006f92:	4770      	bx	lr
