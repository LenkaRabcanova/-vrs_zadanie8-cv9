
vrs_zadanie8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08007218  08007218  00017218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b8  080076b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080076b8  080076b8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076b8  080076b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b8  080076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080076c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000084  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ebf  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8e  00000000  00000000  0002a0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018128  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007668  00000000  00000000  00045100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c0ac  00000000  00000000  0004c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8814  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000366c  00000000  00000000  000c8868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071fc 	.word	0x080071fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080071fc 	.word	0x080071fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_write_byte>:
static float H1rh = 0;
static float H0T0out = 0;
static float H1T0out = 0;

void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <hts221_write_byte+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79f9      	ldrb	r1, [r7, #7]
 8000c5e:	79b8      	ldrb	r0, [r7, #6]
 8000c60:	2300      	movs	r3, #0
 8000c62:	f000 fe71 	bl	8001948 <i2c_master_write>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <hts221_read_byte>:

uint8_t  hts221_read_byte(uint8_t reg_addr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <hts221_read_byte+0x30>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	f107 000f 	add.w	r0, r7, #15
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	9100      	str	r1, [sp, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	f000 fe9d 	bl	80019d0 <i2c_master_read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	781b      	ldrb	r3, [r3, #0]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <hts221_init>:

uint8_t hts221_init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	77fb      	strb	r3, [r7, #31]

	LL_mDelay(100);
 8000cb2:	2064      	movs	r0, #100	; 0x64
 8000cb4:	f002 fbf2 	bl	800349c <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_REG_WHO_AM_I_ADDR);
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f7ff ffdb 	bl	8000c74 <hts221_read_byte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	77bb      	strb	r3, [r7, #30]

	if(val == HTS221_WHO_AM_I_VALUE)
 8000cc2:	7fbb      	ldrb	r3, [r7, #30]
 8000cc4:	2bbc      	cmp	r3, #188	; 0xbc
 8000cc6:	d102      	bne.n	8000cce <hts221_init+0x26>
	{
		status = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	77fb      	strb	r3, [r7, #31]
 8000ccc:	e001      	b.n	8000cd2 <hts221_init+0x2a>
	}
	else			//if the device is not found on one address, try another one
	{
		status = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]

	}
	//nastavenie registrov
	uint8_t ctrl1 = 0b10000011; //PD active mode, reserved, BDU cont update, 12.5Hz rate
 8000cd2:	2383      	movs	r3, #131	; 0x83
 8000cd4:	777b      	strb	r3, [r7, #29]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8000cd6:	7f7b      	ldrb	r3, [r7, #29]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2020      	movs	r0, #32
 8000cdc:	f7ff ffb4 	bl	8000c48 <hts221_write_byte>



	//nastavenie kalibracnych registrov
	uint8_t H0rHx2 = hts221_read_byte(HTS221_ADDRESS_H0rHx2);
 8000ce0:	2030      	movs	r0, #48	; 0x30
 8000ce2:	f7ff ffc7 	bl	8000c74 <hts221_read_byte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	773b      	strb	r3, [r7, #28]
	uint8_t H1rHx2 = hts221_read_byte(HTS221_ADDRESS_H1rHx2);
 8000cea:	2031      	movs	r0, #49	; 0x31
 8000cec:	f7ff ffc2 	bl	8000c74 <hts221_read_byte>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	76fb      	strb	r3, [r7, #27]



	uint8_t T0degCx8 = hts221_read_byte(HTS221_ADDRESS_T0degCx8);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f7ff ffbd 	bl	8000c74 <hts221_read_byte>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	76bb      	strb	r3, [r7, #26]
	uint8_t T1degCx8 = hts221_read_byte(HTS221_ADDRESS_T1degCx8);
 8000cfe:	2033      	movs	r0, #51	; 0x33
 8000d00:	f7ff ffb8 	bl	8000c74 <hts221_read_byte>
 8000d04:	4603      	mov	r3, r0
 8000d06:	767b      	strb	r3, [r7, #25]

	uint8_t T1T0MSB = hts221_read_byte(HTS221_ADDRESS_T1T0MSB);
 8000d08:	2035      	movs	r0, #53	; 0x35
 8000d0a:	f7ff ffb3 	bl	8000c74 <hts221_read_byte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	763b      	strb	r3, [r7, #24]

	uint16_t T0degCx8MSB =  T1T0MSB & 0x3;
 8000d12:	7e3b      	ldrb	r3, [r7, #24]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	82fb      	strh	r3, [r7, #22]
	uint16_t T1degCx8MSB =  (T1T0MSB & (0x3 << 2) >> 2);
 8000d1c:	7e3b      	ldrb	r3, [r7, #24]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	82bb      	strh	r3, [r7, #20]

	uint16_t T0degCx8_final = T0degCx8  | (T0degCx8MSB << 8);
 8000d26:	7ebb      	ldrb	r3, [r7, #26]
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	8afb      	ldrh	r3, [r7, #22]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	827b      	strh	r3, [r7, #18]
	uint16_t T1degCx8_final = T1degCx8  | (T1degCx8MSB << 8);
 8000d36:	7e7b      	ldrb	r3, [r7, #25]
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	8abb      	ldrh	r3, [r7, #20]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	823b      	strh	r3, [r7, #16]




	uint8_t H0T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_H0T0OUTL);
 8000d46:	2036      	movs	r0, #54	; 0x36
 8000d48:	f7ff ff94 	bl	8000c74 <hts221_read_byte>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	uint8_t H0T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_H0T0OUTH);
 8000d50:	2037      	movs	r0, #55	; 0x37
 8000d52:	f7ff ff8f 	bl	8000c74 <hts221_read_byte>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73bb      	strb	r3, [r7, #14]

	uint16_t H0T0OUT = H0T0OUTLOW | (H0T0OUTHIGH << 8);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	81bb      	strh	r3, [r7, #12]



	uint8_t H1T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_H1T0OUTL);
 8000d6a:	203a      	movs	r0, #58	; 0x3a
 8000d6c:	f7ff ff82 	bl	8000c74 <hts221_read_byte>
 8000d70:	4603      	mov	r3, r0
 8000d72:	72fb      	strb	r3, [r7, #11]
	uint8_t H1T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_H1T0OUTH);
 8000d74:	203b      	movs	r0, #59	; 0x3b
 8000d76:	f7ff ff7d 	bl	8000c74 <hts221_read_byte>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	72bb      	strb	r3, [r7, #10]

	uint16_t H1TOUT = H1T0OUTLOW  | (H1T0OUTHIGH << 8);
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	7abb      	ldrb	r3, [r7, #10]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	813b      	strh	r3, [r7, #8]




	uint8_t T0OUTLOW = hts221_read_byte(HTS221_ADDRESS_T0OUTL);
 8000d8e:	203c      	movs	r0, #60	; 0x3c
 8000d90:	f7ff ff70 	bl	8000c74 <hts221_read_byte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	71fb      	strb	r3, [r7, #7]
	uint8_t T0OUTHIGH = hts221_read_byte(HTS221_ADDRESS_T0OUTH);
 8000d98:	203d      	movs	r0, #61	; 0x3d
 8000d9a:	f7ff ff6b 	bl	8000c74 <hts221_read_byte>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71bb      	strb	r3, [r7, #6]

	uint16_t T0OUT = T0OUTLOW | (T0OUTHIGH << 8);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	80bb      	strh	r3, [r7, #4]




	uint8_t T1OUTLOW = hts221_read_byte(HTS221_ADDRESS_T1OUTL);
 8000db2:	203e      	movs	r0, #62	; 0x3e
 8000db4:	f7ff ff5e 	bl	8000c74 <hts221_read_byte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	70fb      	strb	r3, [r7, #3]
	uint8_t T1OUTHIGH = hts221_read_byte(HTS221_ADDRESS_T1OUTH);
 8000dbc:	203f      	movs	r0, #63	; 0x3f
 8000dbe:	f7ff ff59 	bl	8000c74 <hts221_read_byte>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	70bb      	strb	r3, [r7, #2]

	uint16_t T1OUT =  T1OUTLOW | (T1OUTHIGH << 8);
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	78bb      	ldrb	r3, [r7, #2]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	803b      	strh	r3, [r7, #0]


	//HODNOTY POTREBNE PRE KALIBRACIU VYSLEDNEJ HODNOTY TEPLOTY (TEMPETATURE)
	T0deg = T0degCx8_final/8;
 8000dd6:	8a7b      	ldrh	r3, [r7, #18]
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <hts221_init+0x1c8>)
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	T1deg = T1degCx8_final/8;
 8000dea:	8a3b      	ldrh	r3, [r7, #16]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <hts221_init+0x1cc>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]

	T0out = T0OUT;
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <hts221_init+0x1d0>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]
	T1out = T1OUT;
 8000e0e:	883b      	ldrh	r3, [r7, #0]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <hts221_init+0x1d4>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]

	//HODNOTY POTREBNE PRE KALIBRACIU VYSLEDNEJ HODNOTY VLHKOSTI (RELATIVE HUMIDITY)
	H0rh = H0rHx2/2;
 8000e1e:	7f3b      	ldrb	r3, [r7, #28]
 8000e20:	085b      	lsrs	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <hts221_init+0x1d8>)
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
	H1rh = H1rHx2/2;
 8000e32:	7efb      	ldrb	r3, [r7, #27]
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <hts221_init+0x1dc>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]

	H0T0out = H0T0OUT;
 8000e46:	89bb      	ldrh	r3, [r7, #12]
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <hts221_init+0x1e0>)
 8000e52:	edc3 7a00 	vstr	s15, [r3]
	H1T0out = H1TOUT;
 8000e56:	893b      	ldrh	r3, [r7, #8]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <hts221_init+0x1e4>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8000e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001f8 	.word	0x200001f8
 8000e74:	200001fc 	.word	0x200001fc
 8000e78:	20000200 	.word	0x20000200
 8000e7c:	20000204 	.word	0x20000204
 8000e80:	20000208 	.word	0x20000208
 8000e84:	2000020c 	.word	0x2000020c
 8000e88:	20000210 	.word	0x20000210
 8000e8c:	20000214 	.word	0x20000214

08000e90 <hts221_get_temperature>:

float hts221_get_temperature()  {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	//LINEARNA INTERPOLACIA VZOREC: y = y1 + ((x – x1) / (x2 – x1)) * (y2 – y1)

	//TEPLOTA: x = temperature out(measured), x1 = T0out, x2 = T1out
	// y = temperature deg(measured), y1 = T0deg, y2 = T1deg

	uint8_t l_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTL);
 8000e96:	202a      	movs	r0, #42	; 0x2a
 8000e98:	f7ff feec 	bl	8000c74 <hts221_read_byte>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
	uint8_t h_temperature = hts221_read_byte(HTS221_ADDRESS_TEMPOUTH);
 8000ea0:	202b      	movs	r0, #43	; 0x2b
 8000ea2:	f7ff fee7 	bl	8000c74 <hts221_read_byte>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71bb      	strb	r3, [r7, #6]

	int16_t temperature = l_temperature | (h_temperature << 8);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	80bb      	strh	r3, [r7, #4]

	float final_temperature = T0deg + ((temperature - T0out) / (T1out-T0out)) * (T1deg - T0deg);
 8000eb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <hts221_get_temperature+0x84>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <hts221_get_temperature+0x88>)
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <hts221_get_temperature+0x84>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <hts221_get_temperature+0x8c>)
 8000ee4:	edd3 6a00 	vldr	s13, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <hts221_get_temperature+0x90>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <hts221_get_temperature+0x90>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f00:	edc7 7a00 	vstr	s15, [r7]

	return final_temperature;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	ee07 3a90 	vmov	s15, r3
}
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000200 	.word	0x20000200
 8000f18:	20000204 	.word	0x20000204
 8000f1c:	200001fc 	.word	0x200001fc
 8000f20:	200001f8 	.word	0x200001f8

08000f24 <hts221_get_relative_humidity>:

float hts221_get_relative_humidity() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	//LINEARNA INTERPOLACIA VZOREC: y = y1 + ((x – x1) / (x2 – x1)) * (y2 – y1)

	//VLHKOST: x = humidity out(measured), x1 = H0T0out, x2 = H1T0out
    // y = humidity rh(measured), y1 = H0rh, y2 = H1rh

	uint8_t l_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTL);
 8000f2a:	2028      	movs	r0, #40	; 0x28
 8000f2c:	f7ff fea2 	bl	8000c74 <hts221_read_byte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
	uint8_t h_humidity = hts221_read_byte(HTS221_ADDRESS_HUMIDITYOUTH);
 8000f34:	2029      	movs	r0, #41	; 0x29
 8000f36:	f7ff fe9d 	bl	8000c74 <hts221_read_byte>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71bb      	strb	r3, [r7, #6]

	int16_t humidity = l_humidity | (h_humidity  << 8);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	80bb      	strh	r3, [r7, #4]

	float final_humidity = H0rh + ((humidity - H0T0out) / (H1T0out-H0T0out)) * (H1rh - H0rh);
 8000f4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <hts221_get_relative_humidity+0x84>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <hts221_get_relative_humidity+0x88>)
 8000f64:	ed93 7a00 	vldr	s14, [r3]
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <hts221_get_relative_humidity+0x84>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <hts221_get_relative_humidity+0x8c>)
 8000f78:	edd3 6a00 	vldr	s13, [r3]
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <hts221_get_relative_humidity+0x90>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <hts221_get_relative_humidity+0x90>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f94:	edc7 7a00 	vstr	s15, [r7]

	return final_humidity;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	ee07 3a90 	vmov	s15, r3
}
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000210 	.word	0x20000210
 8000fac:	20000214 	.word	0x20000214
 8000fb0:	2000020c 	.word	0x2000020c
 8000fb4:	20000208 	.word	0x20000208

08000fb8 <lps25hb_write_byte>:
#include "math.h"

static uint8_t address = LPS25HB_I2C_ADDRESS_1;

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <lps25hb_write_byte+0x28>)
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	79f9      	ldrb	r1, [r7, #7]
 8000fce:	79b8      	ldrb	r0, [r7, #6]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f000 fcb9 	bl	8001948 <i2c_master_write>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000001 	.word	0x20000001

08000fe4 <lps25hb_read_byte>:


uint8_t  lps25hb_read_byte(uint8_t reg_addr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
	(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <lps25hb_read_byte+0x2c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	f107 000f 	add.w	r0, r7, #15
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	9100      	str	r1, [sp, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	f000 fce5 	bl	80019d0 <i2c_master_read>
	return data;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000001 	.word	0x20000001

08001014 <lps25hb_init>:

uint8_t lps25hb_init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800101e:	2064      	movs	r0, #100	; 0x64
 8001020:	f002 fa3c 	bl	800349c <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_REG_WHO_AM_I_ADDR);
 8001024:	200f      	movs	r0, #15
 8001026:	f7ff ffdd 	bl	8000fe4 <lps25hb_read_byte>
 800102a:	4603      	mov	r3, r0
 800102c:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	2bbd      	cmp	r3, #189	; 0xbd
 8001032:	d102      	bne.n	800103a <lps25hb_init+0x26>
	{
		status = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	e00f      	b.n	800105a <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address = LPS25HB_I2C_ADDRESS_1;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <lps25hb_init+0x60>)
 800103c:	22ba      	movs	r2, #186	; 0xba
 800103e:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_VALUE);
 8001040:	20bd      	movs	r0, #189	; 0xbd
 8001042:	f7ff ffcf 	bl	8000fe4 <lps25hb_read_byte>
 8001046:	4603      	mov	r3, r0
 8001048:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_REG_WHO_AM_I_ADDR)
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d102      	bne.n	8001056 <lps25hb_init+0x42>
		{
			status = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
		}
	}
	//nastavenie registrov

	uint8_t ctrl1 = 0b11000000; // power enable,  ODR 25Hz, interupt off, BDU off, autozero off
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 800105e:	797b      	ldrb	r3, [r7, #5]
 8001060:	4619      	mov	r1, r3
 8001062:	2020      	movs	r0, #32
 8001064:	f7ff ffa8 	bl	8000fb8 <lps25hb_write_byte>

	return status;
 8001068:	79fb      	ldrb	r3, [r7, #7]

}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000001 	.word	0x20000001

08001078 <lps25hb_get_pressure>:

float lps25hb_get_pressure() {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

	uint8_t xl_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTXL);
 800107e:	2028      	movs	r0, #40	; 0x28
 8001080:	f7ff ffb0 	bl	8000fe4 <lps25hb_read_byte>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
	uint8_t l_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTL);
 8001088:	2029      	movs	r0, #41	; 0x29
 800108a:	f7ff ffab 	bl	8000fe4 <lps25hb_read_byte>
 800108e:	4603      	mov	r3, r0
 8001090:	73bb      	strb	r3, [r7, #14]
	uint8_t h_pressure = lps25hb_read_byte(LPS25HB_ADDRESS_PRESSOUTH);
 8001092:	202a      	movs	r0, #42	; 0x2a
 8001094:	f7ff ffa6 	bl	8000fe4 <lps25hb_read_byte>
 8001098:	4603      	mov	r3, r0
 800109a:	737b      	strb	r3, [r7, #13]

	uint32_t pressure = xl_pressure | (l_pressure << 8) | (h_pressure << 16);
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	431a      	orrs	r2, r3
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]

	float final_pressure;

	final_pressure = pressure/4096;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	0b1b      	lsrs	r3, r3, #12
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]

	return final_pressure;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ee07 3a90 	vmov	s15, r3
}
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0000      	movs	r0, r0
	...

080010d0 <lps25hb_get_alltitude>:

float lps25hb_get_alltitude(float final_pressure) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a01 	vstr	s0, [r7, #4]
	//P = measured pressure from the sensor (0~107900 Pa)
	//p0 = reference pressure at sea level (87000~107900 Pa)

	float alltitude;

	alltitude = 44330*(1-pow(final_pressure/1013.25, 1/5.255));
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	a31e      	add	r3, pc, #120	; (adr r3, 800115c <lps25hb_get_alltitude+0x8c>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fbb1 	bl	800084c <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	ec43 2b17 	vmov	d7, r2, r3
 80010f2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001148 <lps25hb_get_alltitude+0x78>
 80010f6:	eeb0 0a47 	vmov.f32	s0, s14
 80010fa:	eef0 0a67 	vmov.f32	s1, s15
 80010fe:	f005 f8c9 	bl	8006294 <pow>
 8001102:	ec53 2b10 	vmov	r2, r3, d0
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4913      	ldr	r1, [pc, #76]	; (8001158 <lps25hb_get_alltitude+0x88>)
 800110c:	f7ff f8bc 	bl	8000288 <__aeabi_dsub>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	a30d      	add	r3, pc, #52	; (adr r3, 8001150 <lps25hb_get_alltitude+0x80>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd3d 	bl	8000ba8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]

	return alltitude;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	ee07 3a90 	vmov	s15, r3
}
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	ccd9456c 	.word	0xccd9456c
 800114c:	3fc85b95 	.word	0x3fc85b95
 8001150:	00000000 	.word	0x00000000
 8001154:	40e5a540 	.word	0x40e5a540
 8001158:	3ff00000 	.word	0x3ff00000
 800115c:	00000000 	.word	0x00000000
 8001160:	408faa00 	.word	0x408faa00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <LL_SYSCFG_SetEXTISource+0x58>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	43db      	mvns	r3, r3
 80012c4:	ea02 0103 	and.w	r1, r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	fa03 f202 	lsl.w	r2, r3, r2
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <LL_SYSCFG_SetEXTISource+0x58>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	430a      	orrs	r2, r1
 80012ee:	3302      	adds	r3, #2
 80012f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40010000 	.word	0x40010000

08001304 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	613b      	str	r3, [r7, #16]
  return result;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2103      	movs	r1, #3
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	61bb      	str	r3, [r7, #24]
  return result;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001362:	b480      	push	{r7}
 8001364:	b089      	sub	sp, #36	; 0x24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	613b      	str	r3, [r7, #16]
  return result;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2103      	movs	r1, #3
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	61bb      	str	r3, [r7, #24]
  return result;
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	fab3 f383 	clz	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	431a      	orrs	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	60da      	str	r2, [r3, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3724      	adds	r7, #36	; 0x24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013fe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001402:	f7ff ff39 	bl	8001278 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001406:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800140a:	f7ff ff35 	bl	8001278 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 800140e:	f641 119f 	movw	r1, #6559	; 0x199f
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f7ff ffd3 	bl	80013c0 <LL_GPIO_ResetOutputPin>
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800141a:	2133      	movs	r1, #51	; 0x33
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <MX_GPIO_Init+0xf0>)
 800141e:	f7ff ffcf 	bl	80013c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8001422:	f641 139f 	movw	r3, #6559	; 0x199f
 8001426:	607b      	str	r3, [r7, #4]
                          |digit1_Pin|digitTime_Pin|segmentC_Pin|segmentE_Pin
                          |digit2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001428:	2301      	movs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f001 fe08 	bl	8003054 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = digit0_Pin|segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 8001444:	2333      	movs	r3, #51	; 0x33
 8001446:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001448:	2301      	movs	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	481b      	ldr	r0, [pc, #108]	; (80014cc <MX_GPIO_Init+0xf0>)
 800145e:	f001 fdf9 	bl	8003054 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 8001462:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff ff1e 	bl	80012a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP);
 800146c:	2201      	movs	r2, #1
 800146e:	2108      	movs	r1, #8
 8001470:	4816      	ldr	r0, [pc, #88]	; (80014cc <MX_GPIO_Init+0xf0>)
 8001472:	f7ff ff76 	bl	8001362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_GPIO_Init+0xf0>)
 800147c:	f7ff ff42 	bl	8001304 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001480:	2308      	movs	r3, #8
 8001482:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001494:	2302      	movs	r3, #2
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fbe0 	bl	8002c64 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a4:	f7ff fe5e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff feae 	bl	8001210 <NVIC_EncodePriority>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4619      	mov	r1, r3
 80014b8:	2009      	movs	r0, #9
 80014ba:	f7ff fe7f 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80014be:	2009      	movs	r0, #9
 80014c0:	f7ff fe5e 	bl	8001180 <__NVIC_EnableIRQ>

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	48000400 	.word	0x48000400

080014d0 <__NVIC_GetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	601a      	str	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001656:	f023 0306 	bic.w	r3, r3, #6
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	431a      	orrs	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	60da      	str	r2, [r3, #12]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 0204 	orr.w	r2, r3, #4
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0204 	bic.w	r2, r3, #4
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d101      	bne.n	80016ea <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b04      	cmp	r3, #4
 800170a:	d101      	bne.n	8001710 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b20      	cmp	r3, #32
 8001730:	d101      	bne.n	8001736 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	f043 0220 	orr.w	r2, r3, #32
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	61da      	str	r2, [r3, #28]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <LL_I2C_HandleTransfer+0x48>)
 80017a0:	430b      	orrs	r3, r1
 80017a2:	43db      	mvns	r3, r3
 80017a4:	401a      	ands	r2, r3
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4319      	orrs	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	4319      	orrs	r1, r3
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4319      	orrs	r1, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	03ff7bff 	.word	0x03ff7bff

080017d0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	b2db      	uxtb	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_AHB1_GRP1_EnableClock>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4013      	ands	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000

08001838 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <LL_APB1_GRP1_EnableClock+0x2c>)
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4013      	ands	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001892:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001896:	f7ff ffb7 	bl	8001808 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800189e:	2302      	movs	r3, #2
 80018a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80018a6:	2301      	movs	r3, #1
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018ae:	2304      	movs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_I2C1_Init+0xd4>)
 80018b8:	f001 fbcc 	bl	8003054 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80018bc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018c0:	f7ff ffba 	bl	8001838 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018c4:	f7ff fe04 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fe54 	bl	800157c <NVIC_EncodePriority>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4619      	mov	r1, r3
 80018d8:	201f      	movs	r0, #31
 80018da:	f7ff fe25 	bl	8001528 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018de:	201f      	movs	r0, #31
 80018e0:	f7ff fe04 	bl	80014ec <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80018e4:	4816      	ldr	r0, [pc, #88]	; (8001940 <MX_I2C1_Init+0xd8>)
 80018e6:	f7ff ff3d 	bl	8001764 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80018ea:	4815      	ldr	r0, [pc, #84]	; (8001940 <MX_I2C1_Init+0xd8>)
 80018ec:	f7ff fec1 	bl	8001672 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80018f0:	4813      	ldr	r0, [pc, #76]	; (8001940 <MX_I2C1_Init+0xd8>)
 80018f2:	f7ff fe96 	bl	8001622 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <MX_I2C1_Init+0xd8>)
 80018f8:	f7ff fe83 	bl	8001602 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_I2C1_Init+0xdc>)
 8001902:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4808      	ldr	r0, [pc, #32]	; (8001940 <MX_I2C1_Init+0xd8>)
 8001920:	f001 fcab 	bl	800327a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_I2C1_Init+0xd8>)
 800192a:	f7ff fe8a 	bl	8001642 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_I2C1_Init+0xd8>)
 8001930:	f7ff fe57 	bl	80015e2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	48000400 	.word	0x48000400
 8001940:	40005400 	.word	0x40005400
 8001944:	2000090e 	.word	0x2000090e

08001948 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	af02      	add	r7, sp, #8
 800194e:	4604      	mov	r4, r0
 8001950:	4608      	mov	r0, r1
 8001952:	4611      	mov	r1, r2
 8001954:	461a      	mov	r2, r3
 8001956:	4623      	mov	r3, r4
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	4603      	mov	r3, r0
 800195c:	71bb      	strb	r3, [r7, #6]
 800195e:	460b      	mov	r3, r1
 8001960:	717b      	strb	r3, [r7, #5]
 8001962:	4613      	mov	r3, r2
 8001964:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001966:	793b      	ldrb	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001972:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001974:	7979      	ldrb	r1, [r7, #5]
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <i2c_master_write+0x80>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2302      	movs	r3, #2
 8001982:	2200      	movs	r2, #0
 8001984:	4811      	ldr	r0, [pc, #68]	; (80019cc <i2c_master_write+0x84>)
 8001986:	f7ff fefd 	bl	8001784 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	4619      	mov	r1, r3
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <i2c_master_write+0x84>)
 8001990:	f7ff ff2b 	bl	80017ea <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001994:	e00a      	b.n	80019ac <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <i2c_master_write+0x84>)
 8001998:	f7ff fe9b 	bl	80016d2 <LL_I2C_IsActiveFlag_TXIS>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <i2c_master_write+0x84>)
 80019a8:	f7ff ff1f 	bl	80017ea <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <i2c_master_write+0x84>)
 80019ae:	f7ff feb6 	bl	800171e <LL_I2C_IsActiveFlag_STOP>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <i2c_master_write+0x84>)
 80019ba:	f7ff fec3 	bl	8001744 <LL_I2C_ClearFlag_STOP>
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	80002000 	.word	0x80002000
 80019cc:	40005400 	.word	0x40005400

080019d0 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	70fb      	strb	r3, [r7, #3]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70bb      	strb	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <i2c_master_read+0xdc>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80019f0:	7c3b      	ldrb	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80019f6:	78bb      	ldrb	r3, [r7, #2]
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <i2c_master_read+0xe0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001a04:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a06:	f7ff fe44 	bl	8001692 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a0a:	7879      	ldrb	r1, [r7, #1]
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <i2c_master_read+0xe8>)
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4826      	ldr	r0, [pc, #152]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a1c:	f7ff feb2 	bl	8001784 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a20:	e00a      	b.n	8001a38 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a22:	4824      	ldr	r0, [pc, #144]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a24:	f7ff fe55 	bl	80016d2 <LL_I2C_IsActiveFlag_TXIS>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001a2e:	78bb      	ldrb	r3, [r7, #2]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a34:	f7ff fed9 	bl	80017ea <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a38:	481e      	ldr	r0, [pc, #120]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a3a:	f7ff fe70 	bl	800171e <LL_I2C_IsActiveFlag_STOP>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ee      	beq.n	8001a22 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a44:	481b      	ldr	r0, [pc, #108]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a46:	f7ff fe7d 	bl	8001744 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001a4a:	bf00      	nop
 8001a4c:	4819      	ldr	r0, [pc, #100]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a4e:	f7ff fe66 	bl	800171e <LL_I2C_IsActiveFlag_STOP>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001a58:	7879      	ldrb	r1, [r7, #1]
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <i2c_master_read+0xec>)
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a6a:	f7ff fe8b 	bl	8001784 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001a6e:	bf00      	nop
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a72:	f7ff fe54 	bl	800171e <LL_I2C_IsActiveFlag_STOP>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f9      	beq.n	8001a70 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a7e:	f7ff fe61 	bl	8001744 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a84:	f7ff fe15 	bl	80016b2 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <i2c_master_read+0xe4>)
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <i2c_master_read+0xf0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <i2c_master_read+0xe0>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <i2c_master_read+0xdc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000238 	.word	0x20000238
 8001ab0:	20000218 	.word	0x20000218
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	80002000 	.word	0x80002000
 8001abc:	80002400 	.word	0x80002400
 8001ac0:	20000219 	.word	0x20000219

08001ac4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001ac4:	b598      	push	{r3, r4, r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001ac8:	4812      	ldr	r0, [pc, #72]	; (8001b14 <I2C1_EV_IRQHandler+0x50>)
 8001aca:	f7ff fe15 	bl	80016f8 <LL_I2C_IsActiveFlag_RXNE>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01c      	beq.n	8001b0e <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <I2C1_EV_IRQHandler+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <I2C1_EV_IRQHandler+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	b2c8      	uxtb	r0, r1
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <I2C1_EV_IRQHandler+0x58>)
 8001ae4:	7008      	strb	r0, [r1, #0]
 8001ae6:	18d4      	adds	r4, r2, r3
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <I2C1_EV_IRQHandler+0x50>)
 8001aea:	f7ff fe71 	bl	80017d0 <LL_I2C_ReceiveData8>
 8001aee:	4603      	mov	r3, r0
 8001af0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <I2C1_EV_IRQHandler+0x58>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b13      	cmp	r3, #19
 8001afa:	d903      	bls.n	8001b04 <I2C1_EV_IRQHandler+0x40>
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <I2C1_EV_IRQHandler+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e001      	b.n	8001b08 <I2C1_EV_IRQHandler+0x44>
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <I2C1_EV_IRQHandler+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <I2C1_EV_IRQHandler+0x5c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b0e:	bf00      	nop
 8001b10:	bd98      	pop	{r3, r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40005400 	.word	0x40005400
 8001b18:	20000238 	.word	0x20000238
 8001b1c:	20000219 	.word	0x20000219
 8001b20:	20000218 	.word	0x20000218

08001b24 <__NVIC_SetPriorityGrouping>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_SetPriority>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <LL_RCC_HSI_Enable+0x1c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <LL_RCC_HSI_Enable+0x1c>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000

08001c64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <LL_RCC_HSI_IsReady+0x20>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40021000 	.word	0x40021000

08001c88 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <LL_RCC_SetSysClkSource+0x24>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 0203 	bic.w	r2, r3, #3
 8001cc4:	4904      	ldr	r1, [pc, #16]	; (8001cd8 <LL_RCC_SetSysClkSource+0x24>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40021000 	.word	0x40021000

08001cdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <LL_RCC_GetSysClkSource+0x18>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000

08001d20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d30:	4904      	ldr	r1, [pc, #16]	; (8001d44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d58:	4904      	ldr	r1, [pc, #16]	; (8001d6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000

08001d70 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LL_RCC_SetI2CClockSource+0x2c>)
 8001d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	0e1b      	lsrs	r3, r3, #24
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d8a:	4904      	ldr	r1, [pc, #16]	; (8001d9c <LL_RCC_SetI2CClockSource+0x2c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_APB1_GRP1_EnableClock>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001de6:	699a      	ldr	r2, [r3, #24]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000

08001e00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <LL_FLASH_SetLatency+0x24>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 0207 	bic.w	r2, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	; (8001e24 <LL_FLASH_SetLatency+0x24>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40022000 	.word	0x40022000

08001e28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <LL_FLASH_GetLatency+0x18>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f06f 0201 	mvn.w	r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60da      	str	r2, [r3, #12]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_GPIO_IsInputPinSet>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_GPIO_SetOutputPin>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	619a      	str	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_GPIO_ResetOutputPin>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <resetSegments>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetSegments(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f7ff ffdc 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f7ff ffd6 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001f44:	2102      	movs	r1, #2
 8001f46:	480e      	ldr	r0, [pc, #56]	; (8001f80 <resetSegments+0x58>)
 8001f48:	f7ff ffd2 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	480c      	ldr	r0, [pc, #48]	; (8001f80 <resetSegments+0x58>)
 8001f50:	f7ff ffce 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001f54:	2110      	movs	r1, #16
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <resetSegments+0x58>)
 8001f58:	f7ff ffca 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f62:	f7ff ffc5 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001f66:	2102      	movs	r1, #2
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6c:	f7ff ffc0 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f70:	2108      	movs	r1, #8
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f7ff ffbb 	bl	8001ef0 <LL_GPIO_SetOutputPin>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	48000400 	.word	0x48000400

08001f84 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
//	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);

	LL_GPIO_ResetOutputPin(digit0_GPIO_Port, digit0_Pin);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <resetDigits+0x3c>)
 8001f8c:	f7ff ffbe 	bl	8001f0c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit1_GPIO_Port, digit1_Pin);
 8001f90:	2110      	movs	r1, #16
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f7ff ffb9 	bl	8001f0c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit2_GPIO_Port, digit2_Pin);
 8001f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f7ff ffb3 	bl	8001f0c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digit3_GPIO_Port, digit3_Pin);
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f7ff ffae 	bl	8001f0c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(digitTime_GPIO_Port, digitTime_Pin);
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f7ff ffa9 	bl	8001f0c <LL_GPIO_ResetOutputPin>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	48000400 	.word	0x48000400

08001fc4 <decode_7seg>:




unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
    if (chr > (unsigned char)'z')
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b7a      	cmp	r3, #122	; 0x7a
 8001fd2:	d901      	bls.n	8001fd8 <decode_7seg+0x14>
        return 0x00;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e003      	b.n	8001fe0 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	3b30      	subs	r3, #48	; 0x30
 8001fdc:	4a03      	ldr	r2, [pc, #12]	; (8001fec <decode_7seg+0x28>)
 8001fde:	5cd3      	ldrb	r3, [r2, r3]
    /* or */
//	return seven_seg_digits_decode_gfedcba[chr - '0'];
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	08007248 	.word	0x08007248

08001ff0 <display_symbol>:


void display_symbol(char symbol,int digit)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d822      	bhi.n	8002048 <display_symbol+0x58>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <display_symbol+0x18>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	08002023 	.word	0x08002023
 8002010:	0800202f 	.word	0x0800202f
 8002014:	0800203d 	.word	0x0800203d
	switch (digit)
	{
	    case 0:
		    DIGIT_0_ON;
 8002018:	2101      	movs	r1, #1
 800201a:	4847      	ldr	r0, [pc, #284]	; (8002138 <display_symbol+0x148>)
 800201c:	f7ff ff68 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	      break;
 8002020:	e012      	b.n	8002048 <display_symbol+0x58>

	    case 1:
	    	DIGIT_1_ON;
 8002022:	2110      	movs	r1, #16
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f7ff ff62 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	      break;
 800202c:	e00c      	b.n	8002048 <display_symbol+0x58>

	    case 2:
	    	DIGIT_2_ON;
 800202e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	f7ff ff5b 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	      break;
 800203a:	e005      	b.n	8002048 <display_symbol+0x58>

	    case 3:
	    	DIGIT_3_ON;
 800203c:	2104      	movs	r1, #4
 800203e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002042:	f7ff ff55 	bl	8001ef0 <LL_GPIO_SetOutputPin>
	      break;
 8002046:	bf00      	nop
	}



	char pomocna=symbol;
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d103      	bne.n	8002062 <display_symbol+0x72>
		LL_GPIO_ResetOutputPin(segmentG_GPIO_Port, segmentG_Pin);
 800205a:	2110      	movs	r1, #16
 800205c:	4836      	ldr	r0, [pc, #216]	; (8002138 <display_symbol+0x148>)
 800205e:	f7ff ff55 	bl	8001f0c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 1;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d104      	bne.n	8002084 <display_symbol+0x94>
		LL_GPIO_ResetOutputPin(segmentF_GPIO_Port, segmentF_Pin);
 800207a:	2108      	movs	r1, #8
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f7ff ff44 	bl	8001f0c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 2;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <display_symbol+0xb8>
		LL_GPIO_ResetOutputPin(segmentE_GPIO_Port, segmentE_Pin);
 800209c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f7ff ff32 	bl	8001f0c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 3;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d103      	bne.n	80020c8 <display_symbol+0xd8>
		LL_GPIO_ResetOutputPin(segmentD_GPIO_Port, segmentD_Pin);
 80020c0:	2120      	movs	r1, #32
 80020c2:	481d      	ldr	r0, [pc, #116]	; (8002138 <display_symbol+0x148>)
 80020c4:	f7ff ff22 	bl	8001f0c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 4;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <display_symbol+0xfc>
		LL_GPIO_ResetOutputPin(segmentC_GPIO_Port, segmentC_Pin);
 80020e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f7ff ff10 	bl	8001f0c <LL_GPIO_ResetOutputPin>


	pomocna=symbol;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 5;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d104      	bne.n	800210e <display_symbol+0x11e>
		LL_GPIO_ResetOutputPin(segmentB_GPIO_Port, segmentB_Pin);
 8002104:	2101      	movs	r1, #1
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f7ff feff 	bl	8001f0c <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 6;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d104      	bne.n	8002130 <display_symbol+0x140>
		LL_GPIO_ResetOutputPin(segmentA_GPIO_Port, segmentA_Pin);
 8002126:	2102      	movs	r1, #2
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f7ff feee 	bl	8001f0c <LL_GPIO_ResetOutputPin>
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	48000400 	.word	0x48000400

0800213c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff fe44 	bl	8001dd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002148:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800214c:	f7ff fe28 	bl	8001da0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f7ff fce7 	bl	8001b24 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002156:	f7ff fd09 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 800215a:	4603      	mov	r3, r0
 800215c:	2200      	movs	r2, #0
 800215e:	210f      	movs	r1, #15
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fd3b 	bl	8001bdc <NVIC_EncodePriority>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 30ff 	mov.w	r0, #4294967295
 800216e:	f7ff fd0b 	bl	8001b88 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002172:	2003      	movs	r0, #3
 8002174:	f7ff fcd6 	bl	8001b24 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002178:	f000 f8be 	bl	80022f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217c:	f7ff f92e 	bl	80013dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8002180:	f000 fbd4 	bl	800292c <MX_TIM2_Init>
  MX_I2C1_Init();
 8002184:	f7ff fb70 	bl	8001868 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8002188:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800218c:	f7ff fe5a 	bl	8001e44 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002190:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002194:	f7ff fe87 	bl	8001ea6 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lps25hb_init();
 8002198:	f7fe ff3c 	bl	8001014 <lps25hb_init>
  hts221_init();
 800219c:	f7fe fd84 	bl	8000ca8 <hts221_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if(mode==0){
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <main+0x188>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d129      	bne.n	80021fc <main+0xc0>
		   float temperature = hts221_get_temperature();
 80021a8:	f7fe fe72 	bl	8000e90 <hts221_get_temperature>
 80021ac:	ed87 0a05 	vstr	s0, [r7, #20]
		   if(temperature>=100) {
 80021b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80022c8 <main+0x18c>
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	db01      	blt.n	80021c6 <main+0x8a>
			   temperature = 99.9;
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <main+0x190>)
 80021c4:	617b      	str	r3, [r7, #20]
		   }
		   if(temperature<=-100) {
 80021c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ca:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022d0 <main+0x194>
 80021ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	d801      	bhi.n	80021dc <main+0xa0>
			   temperature = -99.9;
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <main+0x198>)
 80021da:	617b      	str	r3, [r7, #20]
		   }
		   sprintf(retazec, "TEMP_%03.1f", temperature);
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f7fe f9b3 	bl	8000548 <__aeabi_f2d>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	493c      	ldr	r1, [pc, #240]	; (80022d8 <main+0x19c>)
 80021e8:	483c      	ldr	r0, [pc, #240]	; (80022dc <main+0x1a0>)
 80021ea:	f001 fe29 	bl	8003e40 <siprintf>
		   //strcpy(retazec, "TEMP_xx.x");
		   length_retazec = strlen(retazec);
 80021ee:	483b      	ldr	r0, [pc, #236]	; (80022dc <main+0x1a0>)
 80021f0:	f7fd ffee 	bl	80001d0 <strlen>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <main+0x1a4>)
 80021fa:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==1){
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <main+0x188>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d128      	bne.n	8002256 <main+0x11a>
		   float humidity = hts221_get_relative_humidity();
 8002204:	f7fe fe8e 	bl	8000f24 <hts221_get_relative_humidity>
 8002208:	ed87 0a04 	vstr	s0, [r7, #16]
		   if(humidity>99) {
 800220c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002210:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80022e4 <main+0x1a8>
 8002214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	dd01      	ble.n	8002222 <main+0xe6>
			   humidity = 99;
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <main+0x1ac>)
 8002220:	613b      	str	r3, [r7, #16]
		   }
		   if(humidity<=0) {
 8002222:	edd7 7a04 	vldr	s15, [r7, #16]
 8002226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d802      	bhi.n	8002236 <main+0xfa>
		   	  humidity = 0;
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
		   }
		   sprintf(retazec, "HUM_%02.0f", humidity);
 8002236:	6938      	ldr	r0, [r7, #16]
 8002238:	f7fe f986 	bl	8000548 <__aeabi_f2d>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	492a      	ldr	r1, [pc, #168]	; (80022ec <main+0x1b0>)
 8002242:	4826      	ldr	r0, [pc, #152]	; (80022dc <main+0x1a0>)
 8002244:	f001 fdfc 	bl	8003e40 <siprintf>
		   //strcpy(retazec, "HUM_xx");
		   length_retazec = strlen(retazec);
 8002248:	4824      	ldr	r0, [pc, #144]	; (80022dc <main+0x1a0>)
 800224a:	f7fd ffc1 	bl	80001d0 <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <main+0x1a4>)
 8002254:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==2){
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <main+0x188>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d113      	bne.n	8002286 <main+0x14a>
		   float final_pressure = lps25hb_get_pressure();
 800225e:	f7fe ff0b 	bl	8001078 <lps25hb_get_pressure>
 8002262:	ed87 0a03 	vstr	s0, [r7, #12]
		   sprintf(retazec, "BAR_%06.2f", final_pressure);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7fe f96e 	bl	8000548 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	491f      	ldr	r1, [pc, #124]	; (80022f0 <main+0x1b4>)
 8002272:	481a      	ldr	r0, [pc, #104]	; (80022dc <main+0x1a0>)
 8002274:	f001 fde4 	bl	8003e40 <siprintf>
		   //strcpy(retazec, "BAR_xxxx.xx");
		   length_retazec = strlen(retazec);
 8002278:	4818      	ldr	r0, [pc, #96]	; (80022dc <main+0x1a0>)
 800227a:	f7fd ffa9 	bl	80001d0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <main+0x1a4>)
 8002284:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==3){
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <main+0x188>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d188      	bne.n	80021a0 <main+0x64>
		   float final_pressure = lps25hb_get_pressure();
 800228e:	f7fe fef3 	bl	8001078 <lps25hb_get_pressure>
 8002292:	ed87 0a02 	vstr	s0, [r7, #8]
		   float alltitude = lps25hb_get_alltitude(final_pressure);
 8002296:	ed97 0a02 	vldr	s0, [r7, #8]
 800229a:	f7fe ff19 	bl	80010d0 <lps25hb_get_alltitude>
 800229e:	ed87 0a01 	vstr	s0, [r7, #4]
		   sprintf(retazec, "ALT_%05.1f", alltitude);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f950 	bl	8000548 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4911      	ldr	r1, [pc, #68]	; (80022f4 <main+0x1b8>)
 80022ae:	480b      	ldr	r0, [pc, #44]	; (80022dc <main+0x1a0>)
 80022b0:	f001 fdc6 	bl	8003e40 <siprintf>
		   //strcpy(retazec, "ALT_xxxx.x");
		   length_retazec = strlen(retazec);
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <main+0x1a0>)
 80022b6:	f7fd ff8b 	bl	80001d0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <main+0x1a4>)
 80022c0:	701a      	strb	r2, [r3, #0]
	   if(mode==0){
 80022c2:	e76d      	b.n	80021a0 <main+0x64>
 80022c4:	2000021a 	.word	0x2000021a
 80022c8:	42c80000 	.word	0x42c80000
 80022cc:	42c7cccd 	.word	0x42c7cccd
 80022d0:	c2c80000 	.word	0xc2c80000
 80022d4:	c2c7cccd 	.word	0xc2c7cccd
 80022d8:	08007218 	.word	0x08007218
 80022dc:	2000023c 	.word	0x2000023c
 80022e0:	2000021b 	.word	0x2000021b
 80022e4:	42c60000 	.word	0x42c60000
 80022e8:	42c60000 	.word	0x42c60000
 80022ec:	08007224 	.word	0x08007224
 80022f0:	08007230 	.word	0x08007230
 80022f4:	0800723c 	.word	0x0800723c

080022f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff fd7f 	bl	8001e00 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002302:	bf00      	nop
 8002304:	f7ff fd90 	bl	8001e28 <LL_FLASH_GetLatency>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1fa      	bne.n	8002304 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800230e:	f7ff fc99 	bl	8001c44 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002312:	bf00      	nop
 8002314:	f7ff fca6 	bl	8001c64 <LL_RCC_HSI_IsReady>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d1fa      	bne.n	8002314 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800231e:	2010      	movs	r0, #16
 8002320:	f7ff fcb2 	bl	8001c88 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff fce7 	bl	8001cf8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff fcf8 	bl	8001d20 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff fd09 	bl	8001d48 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff fcbc 	bl	8001cb4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800233c:	bf00      	nop
 800233e:	f7ff fccd 	bl	8001cdc <LL_RCC_GetSysClkSource>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1fa      	bne.n	800233e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <SystemClock_Config+0x68>)
 800234a:	f001 f899 	bl	8003480 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800234e:	4804      	ldr	r0, [pc, #16]	; (8002360 <SystemClock_Config+0x68>)
 8002350:	f001 f8ca 	bl	80034e8 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002354:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002358:	f7ff fd0a 	bl	8001d70 <LL_RCC_SetI2CClockSource>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	007a1200 	.word	0x007a1200

08002364 <checkButtonState>:

/* USER CODE BEGIN 4 */

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	70fb      	strb	r3, [r7, #3]
 8002376:	460b      	mov	r3, r1
 8002378:	70bb      	strb	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
 8002382:	2300      	movs	r3, #0
 8002384:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 8002386:	e021      	b.n	80023cc <checkButtonState+0x68>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_RISE)) || (!LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_FALL)))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fd9a 	bl	8001ec6 <LL_GPIO_IsInputPinSet>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <checkButtonState+0x3a>
 8002398:	78bb      	ldrb	r3, [r7, #2]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00a      	beq.n	80023b4 <checkButtonState+0x50>
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fd8f 	bl	8001ec6 <LL_GPIO_IsInputPinSet>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <checkButtonState+0x58>
 80023ae:	78bb      	ldrb	r3, [r7, #2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <checkButtonState+0x58>
			{
				button_state += 1;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	3301      	adds	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e001      	b.n	80023c0 <checkButtonState+0x5c>
			}
			else
			{
				button_state = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f001 f868 	bl	800349c <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	7e3b      	ldrb	r3, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d203      	bcs.n	80023dc <checkButtonState+0x78>
 80023d4:	7bba      	ldrb	r2, [r7, #14]
 80023d6:	787b      	ldrb	r3, [r7, #1]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3d5      	bcc.n	8002388 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	7e3b      	ldrb	r3, [r7, #24]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d305      	bcc.n	80023f0 <checkButtonState+0x8c>
 80023e4:	7bba      	ldrb	r2, [r7, #14]
 80023e6:	787b      	ldrb	r3, [r7, #1]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d801      	bhi.n	80023f0 <checkButtonState+0x8c>
		{
			return 1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <checkButtonState+0x8e>
		}
		else
		{
			return 0;
 80023f0:	2300      	movs	r3, #0
		}
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <updateDisplay>:

void updateDisplay(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0

	resetDigits();
 8002402:	f7ff fdbf 	bl	8001f84 <resetDigits>
	resetSegments();
 8002406:	f7ff fd8f 	bl	8001f28 <resetSegments>

	char symbol = retazec[textposition+digit];
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <updateDisplay+0x58>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <updateDisplay+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <updateDisplay+0x60>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	71fb      	strb	r3, [r7, #7]
	char segments = decode_7seg(symbol);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fdd1 	bl	8001fc4 <decode_7seg>
 8002422:	4603      	mov	r3, r0
 8002424:	71bb      	strb	r3, [r7, #6]
	display_symbol(segments, digit);
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <updateDisplay+0x5c>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fdde 	bl	8001ff0 <display_symbol>

	digit = digit+1;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <updateDisplay+0x5c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <updateDisplay+0x5c>)
 800243c:	6013      	str	r3, [r2, #0]
	if(digit >= 4)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <updateDisplay+0x5c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b03      	cmp	r3, #3
 8002444:	dd02      	ble.n	800244c <updateDisplay+0x50>
		digit=0;
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <updateDisplay+0x5c>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000228 	.word	0x20000228
 8002458:	20000224 	.word	0x20000224
 800245c:	2000023c 	.word	0x2000023c

08002460 <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	//1000 za s
	tim2count = tim2count + 1;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <TIM2_IRQHandler+0x7c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <TIM2_IRQHandler+0x7c>)
 800246c:	6013      	str	r3, [r2, #0]
	if(tim2count >=500) {
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <TIM2_IRQHandler+0x7c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002476:	db22      	blt.n	80024be <TIM2_IRQHandler+0x5e>
		tim2count = 0; //2 krat za sekundu sa vykona tento if
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <TIM2_IRQHandler+0x7c>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

		//Posun textu
		if (orientation==0){
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <TIM2_IRQHandler+0x80>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <TIM2_IRQHandler+0x46>
			textposition = textposition + 1;
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <TIM2_IRQHandler+0x84>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <TIM2_IRQHandler+0x84>)
 800248e:	6013      	str	r3, [r2, #0]
			if((textposition+4)>=(length_retazec))
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <TIM2_IRQHandler+0x84>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3304      	adds	r3, #4
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <TIM2_IRQHandler+0x88>)
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	4293      	cmp	r3, r2
 800249c:	db0f      	blt.n	80024be <TIM2_IRQHandler+0x5e>
			    orientation=1;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <TIM2_IRQHandler+0x80>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e00b      	b.n	80024be <TIM2_IRQHandler+0x5e>
		}

		else{
			textposition = textposition - 1;
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <TIM2_IRQHandler+0x84>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <TIM2_IRQHandler+0x84>)
 80024ae:	6013      	str	r3, [r2, #0]
			if((textposition)<=0)
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <TIM2_IRQHandler+0x84>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dc02      	bgt.n	80024be <TIM2_IRQHandler+0x5e>
			    orientation=0;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <TIM2_IRQHandler+0x80>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
		}

	}

	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 80024be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024c2:	f7ff fcdd 	bl	8001e80 <LL_TIM_IsActiveFlag_UPDATE>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <TIM2_IRQHandler+0x70>
	{
		updateDisplay();
 80024cc:	f7ff ff96 	bl	80023fc <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80024d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80024d4:	f7ff fcc6 	bl	8001e64 <LL_TIM_ClearFlag_UPDATE>


}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000021c 	.word	0x2000021c
 80024e0:	20000220 	.word	0x20000220
 80024e4:	20000228 	.word	0x20000228
 80024e8:	2000021b 	.word	0x2000021b

080024ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 80024f2:	2314      	movs	r3, #20
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	231e      	movs	r3, #30
 80024f8:	2200      	movs	r2, #0
 80024fa:	2108      	movs	r1, #8
 80024fc:	4810      	ldr	r0, [pc, #64]	; (8002540 <EXTI3_IRQHandler+0x54>)
 80024fe:	f7ff ff31 	bl	8002364 <checkButtonState>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <EXTI3_IRQHandler+0x42>
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		//switch_state ^= 1;
		mode = mode+1;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <EXTI3_IRQHandler+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <EXTI3_IRQHandler+0x58>)
 8002512:	701a      	strb	r2, [r3, #0]
		if (mode > 3) {
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <EXTI3_IRQHandler+0x58>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d902      	bls.n	8002522 <EXTI3_IRQHandler+0x36>
			mode = 0;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <EXTI3_IRQHandler+0x58>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		}
		textposition = 0;
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <EXTI3_IRQHandler+0x5c>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
		orientation = 0;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <EXTI3_IRQHandler+0x60>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
	}

	/* Clear EXTI4 pending register flag */

		//type your code for pending register flag clear here:
	EXTI->PR |= (1 << 4);
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <EXTI3_IRQHandler+0x64>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <EXTI3_IRQHandler+0x64>)
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	6153      	str	r3, [r2, #20]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	48000400 	.word	0x48000400
 8002544:	2000021a 	.word	0x2000021a
 8002548:	20000228 	.word	0x20000228
 800254c:	20000220 	.word	0x20000220
 8002550:	40010400 	.word	0x40010400

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
	return 1;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_kill>:

int _kill(int pid, int sig)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025c4:	f000 ffa0 	bl	8003508 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2216      	movs	r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
	return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_exit>:

void _exit (int status)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025e2:	f04f 31ff 	mov.w	r1, #4294967295
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ffe7 	bl	80025ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ec:	e7fe      	b.n	80025ec <_exit+0x12>

080025ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e00a      	b.n	8002616 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002600:	f3af 8000 	nop.w
 8002604:	4601      	mov	r1, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	60ba      	str	r2, [r7, #8]
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	dbf0      	blt.n	8002600 <_read+0x12>
	}

return len;
 800261e:	687b      	ldr	r3, [r7, #4]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e009      	b.n	800264e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	60ba      	str	r2, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	dbf1      	blt.n	800263a <_write+0x12>
	}
	return len;
 8002656:	687b      	ldr	r3, [r7, #4]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_close>:

int _close(int file)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	return -1;
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002688:	605a      	str	r2, [r3, #4]
	return 0;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_isatty>:

int _isatty(int file)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
	return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f000 ff06 	bl	8003508 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20003000 	.word	0x20003000
 8002728:	00000400 	.word	0x00000400
 800272c:	2000022c 	.word	0x2000022c
 8002730:	20000260 	.word	0x20000260

08002734 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <LL_APB1_GRP1_EnableClock>:
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <LL_APB1_GRP1_EnableClock+0x2c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40021000 	.word	0x40021000

0800289c <LL_TIM_DisableARRPreload>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_TIM_SetClockSource>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80028ce:	f023 0307 	bic.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	609a      	str	r2, [r3, #8]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_TIM_SetTriggerOutput>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_TIM_DisableMasterSlaveMode>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002940:	2001      	movs	r0, #1
 8002942:	f7ff ff93 	bl	800286c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002946:	f7ff ff07 	bl	8002758 <__NVIC_GetPriorityGrouping>
 800294a:	4603      	mov	r3, r0
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff57 	bl	8002804 <NVIC_EncodePriority>
 8002956:	4603      	mov	r3, r0
 8002958:	4619      	mov	r1, r3
 800295a:	201c      	movs	r0, #28
 800295c:	f7ff ff28 	bl	80027b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002960:	201c      	movs	r0, #28
 8002962:	f7ff ff07 	bl	8002774 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 8002966:	2307      	movs	r3, #7
 8002968:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 800296e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002972:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002980:	f000 fcf2 	bl	8003368 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002984:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002988:	f7ff ff88 	bl	800289c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800298c:	2100      	movs	r1, #0
 800298e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002992:	f7ff ff93 	bl	80028bc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002996:	2100      	movs	r1, #0
 8002998:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800299c:	f7ff ffa3 	bl	80028e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80029a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029a4:	f7ff ffb2 	bl	800290c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b4:	480d      	ldr	r0, [pc, #52]	; (80029ec <LoopForever+0x6>)
  ldr r1, =_edata
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <LoopForever+0xe>)
  movs r3, #0
 80029ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029bc:	e002      	b.n	80029c4 <LoopCopyDataInit>

080029be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c2:	3304      	adds	r3, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c8:	d3f9      	bcc.n	80029be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029cc:	4c0b      	ldr	r4, [pc, #44]	; (80029fc <LoopForever+0x16>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d0:	e001      	b.n	80029d6 <LoopFillZerobss>

080029d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d4:	3204      	adds	r2, #4

080029d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d8:	d3fb      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029da:	f7ff feab 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f000 fd99 	bl	8003514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e2:	f7ff fbab 	bl	800213c <main>

080029e6 <LoopForever>:

LoopForever:
    b LoopForever
 80029e6:	e7fe      	b.n	80029e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80029f4:	080076c0 	.word	0x080076c0
  ldr r2, =_sbss
 80029f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80029fc:	20000260 	.word	0x20000260

08002a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_2_IRQHandler>
	...

08002a04 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4904      	ldr	r1, [pc, #16]	; (8002a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40010400 	.word	0x40010400

08002a28 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <LL_EXTI_EnableIT_32_63+0x20>)
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	4904      	ldr	r1, [pc, #16]	; (8002a48 <LL_EXTI_EnableIT_32_63+0x20>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40010400 	.word	0x40010400

08002a4c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	4904      	ldr	r1, [pc, #16]	; (8002a70 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010400 	.word	0x40010400

08002a74 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <LL_EXTI_DisableIT_32_63+0x24>)
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <LL_EXTI_DisableIT_32_63+0x24>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	620b      	str	r3, [r1, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40010400 	.word	0x40010400

08002a9c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4904      	ldr	r1, [pc, #16]	; (8002abc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]

}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40010400 	.word	0x40010400

08002ac0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	4904      	ldr	r1, [pc, #16]	; (8002b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40010400 	.word	0x40010400

08002b0c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010400 	.word	0x40010400

08002b34 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40010400 	.word	0x40010400

08002b58 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40010400 	.word	0x40010400

08002b7c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4904      	ldr	r1, [pc, #16]	; (8002ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]

}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40010400 	.word	0x40010400

08002bcc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40010400 	.word	0x40010400

08002bf0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	4904      	ldr	r1, [pc, #16]	; (8002c10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40010400 	.word	0x40010400

08002c14 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4904      	ldr	r1, [pc, #16]	; (8002c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010400 	.word	0x40010400

08002c3c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010400 	.word	0x40010400

08002c64 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7a1b      	ldrb	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80cd 	beq.w	8002e14 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d061      	beq.n	8002d46 <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7a5b      	ldrb	r3, [r3, #9]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d01c      	beq.n	8002cc4 <LL_EXTI_Init+0x60>
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	dc25      	bgt.n	8002cda <LL_EXTI_Init+0x76>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <LL_EXTI_Init+0x34>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00b      	beq.n	8002cae <LL_EXTI_Init+0x4a>
 8002c96:	e020      	b.n	8002cda <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff21 	bl	8002ae4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff feac 	bl	8002a04 <LL_EXTI_EnableIT_0_31>
          break;
 8002cac:	e018      	b.n	8002ce0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff feca 	bl	8002a4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff feed 	bl	8002a9c <LL_EXTI_EnableEvent_0_31>
          break;
 8002cc2:	e00d      	b.n	8002ce0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fe9b 	bl	8002a04 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fee2 	bl	8002a9c <LL_EXTI_EnableEvent_0_31>
          break;
 8002cd8:	e002      	b.n	8002ce0 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cde:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7a9b      	ldrb	r3, [r3, #10]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02e      	beq.n	8002d46 <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7a9b      	ldrb	r3, [r3, #10]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d01c      	beq.n	8002d2a <LL_EXTI_Init+0xc6>
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	dc25      	bgt.n	8002d40 <LL_EXTI_Init+0xdc>
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d002      	beq.n	8002cfe <LL_EXTI_Init+0x9a>
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d00b      	beq.n	8002d14 <LL_EXTI_Init+0xb0>
 8002cfc:	e020      	b.n	8002d40 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff86 	bl	8002c14 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff11 	bl	8002b34 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d12:	e019      	b.n	8002d48 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff2f 	bl	8002b7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff52 	bl	8002bcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d28:	e00e      	b.n	8002d48 <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff00 	bl	8002b34 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff47 	bl	8002bcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d3e:	e003      	b.n	8002d48 <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
            break;
 8002d44:	e000      	b.n	8002d48 <LL_EXTI_Init+0xe4>
        }
      }
 8002d46:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d076      	beq.n	8002e3e <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7a5b      	ldrb	r3, [r3, #9]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d01c      	beq.n	8002d92 <LL_EXTI_Init+0x12e>
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	dc25      	bgt.n	8002da8 <LL_EXTI_Init+0x144>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LL_EXTI_Init+0x102>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d00b      	beq.n	8002d7c <LL_EXTI_Init+0x118>
 8002d64:	e020      	b.n	8002da8 <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fece 	bl	8002b0c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe57 	bl	8002a28 <LL_EXTI_EnableIT_32_63>
          break;
 8002d7a:	e018      	b.n	8002dae <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe77 	bl	8002a74 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fe98 	bl	8002ac0 <LL_EXTI_EnableEvent_32_63>
          break;
 8002d90:	e00d      	b.n	8002dae <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fe46 	bl	8002a28 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fe8d 	bl	8002ac0 <LL_EXTI_EnableEvent_32_63>
          break;
 8002da6:	e002      	b.n	8002dae <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
          break;
 8002dac:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7a9b      	ldrb	r3, [r3, #10]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d043      	beq.n	8002e3e <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7a9b      	ldrb	r3, [r3, #10]
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d01c      	beq.n	8002df8 <LL_EXTI_Init+0x194>
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	dc25      	bgt.n	8002e0e <LL_EXTI_Init+0x1aa>
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d002      	beq.n	8002dcc <LL_EXTI_Init+0x168>
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d00b      	beq.n	8002de2 <LL_EXTI_Init+0x17e>
 8002dca:	e020      	b.n	8002e0e <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff33 	bl	8002c3c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff febc 	bl	8002b58 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002de0:	e02e      	b.n	8002e40 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fedc 	bl	8002ba4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fefd 	bl	8002bf0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002df6:	e023      	b.n	8002e40 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff feab 	bl	8002b58 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fef2 	bl	8002bf0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e0c:	e018      	b.n	8002e40 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
            break;
 8002e12:	e015      	b.n	8002e40 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fe17 	bl	8002a4c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe5e 	bl	8002ae4 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fe21 	bl	8002a74 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fe68 	bl	8002b0c <LL_EXTI_DisableEvent_32_63>
 8002e3c:	e000      	b.n	8002e40 <LL_EXTI_Init+0x1dc>
      }
 8002e3e:	bf00      	nop
#endif
  }
  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <LL_GPIO_SetPinMode>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b089      	sub	sp, #36	; 0x24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	613b      	str	r3, [r7, #16]
  return result;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	2103      	movs	r1, #3
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	61bb      	str	r3, [r7, #24]
  return result;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	431a      	orrs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	3724      	adds	r7, #36	; 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_GPIO_SetPinOutputType>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_GPIO_SetPinSpeed>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	; 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	613b      	str	r3, [r7, #16]
  return result;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2103      	movs	r1, #3
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	61bb      	str	r3, [r7, #24]
  return result;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_GPIO_SetPinPull>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b089      	sub	sp, #36	; 0x24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	613b      	str	r3, [r7, #16]
  return result;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	401a      	ands	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	61bb      	str	r3, [r7, #24]
  return result;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	fab3 f383 	clz	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	60da      	str	r2, [r3, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3724      	adds	r7, #36	; 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_GPIO_SetAFPin_0_7>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	613b      	str	r3, [r7, #16]
  return result;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	210f      	movs	r1, #15
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	61bb      	str	r3, [r7, #24]
  return result;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_GPIO_SetAFPin_8_15>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b089      	sub	sp, #36	; 0x24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	613b      	str	r3, [r7, #16]
  return result;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	210f      	movs	r1, #15
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	61bb      	str	r3, [r7, #24]
  return result;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	431a      	orrs	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003048:	bf00      	nop
 800304a:	3724      	adds	r7, #36	; 0x24
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	613b      	str	r3, [r7, #16]
  return result;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003076:	e051      	b.n	800311c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d043      	beq.n	8003116 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d003      	beq.n	800309e <LL_GPIO_Init+0x4a>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d10e      	bne.n	80030bc <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	461a      	mov	r2, r3
 80030a4:	69b9      	ldr	r1, [r7, #24]
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff16 	bl	8002ed8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fef6 	bl	8002ea8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	461a      	mov	r2, r3
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff36 	bl	8002f36 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d11a      	bne.n	8003108 <LL_GPIO_Init+0xb4>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	60bb      	str	r3, [r7, #8]
  return result;
 80030de:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b07      	cmp	r3, #7
 80030e8:	d807      	bhi.n	80030fa <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	461a      	mov	r2, r3
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ff4e 	bl	8002f94 <LL_GPIO_SetAFPin_0_7>
 80030f8:	e006      	b.n	8003108 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	461a      	mov	r2, r3
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff75 	bl	8002ff2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	461a      	mov	r2, r3
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fe9a 	bl	8002e4a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1a6      	bne.n	8003078 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <LL_I2C_Enable>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_I2C_Disable>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0201 	bic.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_I2C_ConfigFilters>:
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0219      	lsls	r1, r3, #8
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	430b      	orrs	r3, r1
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_I2C_SetOwnAddress1>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	430a      	orrs	r2, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	609a      	str	r2, [r3, #8]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_I2C_EnableOwnAddress1>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_I2C_DisableOwnAddress1>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_I2C_SetTiming>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	611a      	str	r2, [r3, #16]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_I2C_SetMode>:
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_I2C_AcknowledgeNextData>:
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff65 	bl	8003154 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	461a      	mov	r2, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff6d 	bl	8003174 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ffb6 	bl	8003212 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff44 	bl	8003134 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ffa0 	bl	80031f2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	461a      	mov	r2, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff70 	bl	80031a2 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff81 	bl	80031d2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa9 	bl	800322e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffb6 	bl	8003254 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <LL_TIM_SetPrescaler>:
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_TIM_SetAutoReload>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_TIM_SetRepetitionCounter>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	615a      	str	r2, [r3, #20]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <LL_TIM_Init+0xd0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <LL_TIM_Init+0x28>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d003      	beq.n	8003390 <LL_TIM_Init+0x28>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a2c      	ldr	r2, [pc, #176]	; (800343c <LL_TIM_Init+0xd4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d106      	bne.n	800339e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a25      	ldr	r2, [pc, #148]	; (8003438 <LL_TIM_Init+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <LL_TIM_Init+0x66>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d00f      	beq.n	80033ce <LL_TIM_Init+0x66>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a22      	ldr	r2, [pc, #136]	; (800343c <LL_TIM_Init+0xd4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <LL_TIM_Init+0x66>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <LL_TIM_Init+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <LL_TIM_Init+0x66>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a20      	ldr	r2, [pc, #128]	; (8003444 <LL_TIM_Init+0xdc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <LL_TIM_Init+0x66>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <LL_TIM_Init+0xe0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d106      	bne.n	80033dc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff90 	bl	800330e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff7c 	bl	80032f2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <LL_TIM_Init+0xd0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <LL_TIM_Init+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <LL_TIM_Init+0xd8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <LL_TIM_Init+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <LL_TIM_Init+0xdc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <LL_TIM_Init+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <LL_TIM_Init+0xe0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d105      	bne.n	8003426 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff82 	bl	800332a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff8d 	bl	8003346 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800

0800344c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <LL_InitTick+0x30>)
 8003460:	3b01      	subs	r3, #1
 8003462:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <LL_InitTick+0x30>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <LL_InitTick+0x30>)
 800346c:	2205      	movs	r2, #5
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e010 	.word	0xe000e010

08003480 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003488:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ffdd 	bl	800344c <LL_InitTick>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <LL_mDelay+0x48>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80034aa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d00c      	beq.n	80034ce <LL_mDelay+0x32>
  {
    Delay++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80034ba:	e008      	b.n	80034ce <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <LL_mDelay+0x48>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <LL_mDelay+0x32>
    {
      Delay--;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f3      	bne.n	80034bc <LL_mDelay+0x20>
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000e010 	.word	0xe000e010

080034e8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <LL_SetSystemCoreClock+0x1c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000004 	.word	0x20000004

08003508 <__errno>:
 8003508:	4b01      	ldr	r3, [pc, #4]	; (8003510 <__errno+0x8>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000008 	.word	0x20000008

08003514 <__libc_init_array>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	4d0d      	ldr	r5, [pc, #52]	; (800354c <__libc_init_array+0x38>)
 8003518:	4c0d      	ldr	r4, [pc, #52]	; (8003550 <__libc_init_array+0x3c>)
 800351a:	1b64      	subs	r4, r4, r5
 800351c:	10a4      	asrs	r4, r4, #2
 800351e:	2600      	movs	r6, #0
 8003520:	42a6      	cmp	r6, r4
 8003522:	d109      	bne.n	8003538 <__libc_init_array+0x24>
 8003524:	4d0b      	ldr	r5, [pc, #44]	; (8003554 <__libc_init_array+0x40>)
 8003526:	4c0c      	ldr	r4, [pc, #48]	; (8003558 <__libc_init_array+0x44>)
 8003528:	f003 fe68 	bl	80071fc <_init>
 800352c:	1b64      	subs	r4, r4, r5
 800352e:	10a4      	asrs	r4, r4, #2
 8003530:	2600      	movs	r6, #0
 8003532:	42a6      	cmp	r6, r4
 8003534:	d105      	bne.n	8003542 <__libc_init_array+0x2e>
 8003536:	bd70      	pop	{r4, r5, r6, pc}
 8003538:	f855 3b04 	ldr.w	r3, [r5], #4
 800353c:	4798      	blx	r3
 800353e:	3601      	adds	r6, #1
 8003540:	e7ee      	b.n	8003520 <__libc_init_array+0xc>
 8003542:	f855 3b04 	ldr.w	r3, [r5], #4
 8003546:	4798      	blx	r3
 8003548:	3601      	adds	r6, #1
 800354a:	e7f2      	b.n	8003532 <__libc_init_array+0x1e>
 800354c:	080076b8 	.word	0x080076b8
 8003550:	080076b8 	.word	0x080076b8
 8003554:	080076b8 	.word	0x080076b8
 8003558:	080076bc 	.word	0x080076bc

0800355c <memset>:
 800355c:	4402      	add	r2, r0
 800355e:	4603      	mov	r3, r0
 8003560:	4293      	cmp	r3, r2
 8003562:	d100      	bne.n	8003566 <memset+0xa>
 8003564:	4770      	bx	lr
 8003566:	f803 1b01 	strb.w	r1, [r3], #1
 800356a:	e7f9      	b.n	8003560 <memset+0x4>

0800356c <__cvt>:
 800356c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	ec55 4b10 	vmov	r4, r5, d0
 8003574:	2d00      	cmp	r5, #0
 8003576:	460e      	mov	r6, r1
 8003578:	4619      	mov	r1, r3
 800357a:	462b      	mov	r3, r5
 800357c:	bfbb      	ittet	lt
 800357e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003582:	461d      	movlt	r5, r3
 8003584:	2300      	movge	r3, #0
 8003586:	232d      	movlt	r3, #45	; 0x2d
 8003588:	700b      	strb	r3, [r1, #0]
 800358a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800358c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003590:	4691      	mov	r9, r2
 8003592:	f023 0820 	bic.w	r8, r3, #32
 8003596:	bfbc      	itt	lt
 8003598:	4622      	movlt	r2, r4
 800359a:	4614      	movlt	r4, r2
 800359c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035a0:	d005      	beq.n	80035ae <__cvt+0x42>
 80035a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80035a6:	d100      	bne.n	80035aa <__cvt+0x3e>
 80035a8:	3601      	adds	r6, #1
 80035aa:	2102      	movs	r1, #2
 80035ac:	e000      	b.n	80035b0 <__cvt+0x44>
 80035ae:	2103      	movs	r1, #3
 80035b0:	ab03      	add	r3, sp, #12
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	ab02      	add	r3, sp, #8
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	ec45 4b10 	vmov	d0, r4, r5
 80035bc:	4653      	mov	r3, sl
 80035be:	4632      	mov	r2, r6
 80035c0:	f000 fcea 	bl	8003f98 <_dtoa_r>
 80035c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80035c8:	4607      	mov	r7, r0
 80035ca:	d102      	bne.n	80035d2 <__cvt+0x66>
 80035cc:	f019 0f01 	tst.w	r9, #1
 80035d0:	d022      	beq.n	8003618 <__cvt+0xac>
 80035d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035d6:	eb07 0906 	add.w	r9, r7, r6
 80035da:	d110      	bne.n	80035fe <__cvt+0x92>
 80035dc:	783b      	ldrb	r3, [r7, #0]
 80035de:	2b30      	cmp	r3, #48	; 0x30
 80035e0:	d10a      	bne.n	80035f8 <__cvt+0x8c>
 80035e2:	2200      	movs	r2, #0
 80035e4:	2300      	movs	r3, #0
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f7fd fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80035ee:	b918      	cbnz	r0, 80035f8 <__cvt+0x8c>
 80035f0:	f1c6 0601 	rsb	r6, r6, #1
 80035f4:	f8ca 6000 	str.w	r6, [sl]
 80035f8:	f8da 3000 	ldr.w	r3, [sl]
 80035fc:	4499      	add	r9, r3
 80035fe:	2200      	movs	r2, #0
 8003600:	2300      	movs	r3, #0
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fd fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800360a:	b108      	cbz	r0, 8003610 <__cvt+0xa4>
 800360c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003610:	2230      	movs	r2, #48	; 0x30
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	454b      	cmp	r3, r9
 8003616:	d307      	bcc.n	8003628 <__cvt+0xbc>
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800361c:	1bdb      	subs	r3, r3, r7
 800361e:	4638      	mov	r0, r7
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	b004      	add	sp, #16
 8003624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003628:	1c59      	adds	r1, r3, #1
 800362a:	9103      	str	r1, [sp, #12]
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e7f0      	b.n	8003612 <__cvt+0xa6>

08003630 <__exponent>:
 8003630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003632:	4603      	mov	r3, r0
 8003634:	2900      	cmp	r1, #0
 8003636:	bfb8      	it	lt
 8003638:	4249      	neglt	r1, r1
 800363a:	f803 2b02 	strb.w	r2, [r3], #2
 800363e:	bfb4      	ite	lt
 8003640:	222d      	movlt	r2, #45	; 0x2d
 8003642:	222b      	movge	r2, #43	; 0x2b
 8003644:	2909      	cmp	r1, #9
 8003646:	7042      	strb	r2, [r0, #1]
 8003648:	dd2a      	ble.n	80036a0 <__exponent+0x70>
 800364a:	f10d 0407 	add.w	r4, sp, #7
 800364e:	46a4      	mov	ip, r4
 8003650:	270a      	movs	r7, #10
 8003652:	46a6      	mov	lr, r4
 8003654:	460a      	mov	r2, r1
 8003656:	fb91 f6f7 	sdiv	r6, r1, r7
 800365a:	fb07 1516 	mls	r5, r7, r6, r1
 800365e:	3530      	adds	r5, #48	; 0x30
 8003660:	2a63      	cmp	r2, #99	; 0x63
 8003662:	f104 34ff 	add.w	r4, r4, #4294967295
 8003666:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800366a:	4631      	mov	r1, r6
 800366c:	dcf1      	bgt.n	8003652 <__exponent+0x22>
 800366e:	3130      	adds	r1, #48	; 0x30
 8003670:	f1ae 0502 	sub.w	r5, lr, #2
 8003674:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003678:	1c44      	adds	r4, r0, #1
 800367a:	4629      	mov	r1, r5
 800367c:	4561      	cmp	r1, ip
 800367e:	d30a      	bcc.n	8003696 <__exponent+0x66>
 8003680:	f10d 0209 	add.w	r2, sp, #9
 8003684:	eba2 020e 	sub.w	r2, r2, lr
 8003688:	4565      	cmp	r5, ip
 800368a:	bf88      	it	hi
 800368c:	2200      	movhi	r2, #0
 800368e:	4413      	add	r3, r2
 8003690:	1a18      	subs	r0, r3, r0
 8003692:	b003      	add	sp, #12
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800369a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800369e:	e7ed      	b.n	800367c <__exponent+0x4c>
 80036a0:	2330      	movs	r3, #48	; 0x30
 80036a2:	3130      	adds	r1, #48	; 0x30
 80036a4:	7083      	strb	r3, [r0, #2]
 80036a6:	70c1      	strb	r1, [r0, #3]
 80036a8:	1d03      	adds	r3, r0, #4
 80036aa:	e7f1      	b.n	8003690 <__exponent+0x60>

080036ac <_printf_float>:
 80036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	ed2d 8b02 	vpush	{d8}
 80036b4:	b08d      	sub	sp, #52	; 0x34
 80036b6:	460c      	mov	r4, r1
 80036b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80036bc:	4616      	mov	r6, r2
 80036be:	461f      	mov	r7, r3
 80036c0:	4605      	mov	r5, r0
 80036c2:	f001 fa55 	bl	8004b70 <_localeconv_r>
 80036c6:	f8d0 a000 	ldr.w	sl, [r0]
 80036ca:	4650      	mov	r0, sl
 80036cc:	f7fc fd80 	bl	80001d0 <strlen>
 80036d0:	2300      	movs	r3, #0
 80036d2:	930a      	str	r3, [sp, #40]	; 0x28
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	f8d8 3000 	ldr.w	r3, [r8]
 80036dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036e0:	3307      	adds	r3, #7
 80036e2:	f023 0307 	bic.w	r3, r3, #7
 80036e6:	f103 0208 	add.w	r2, r3, #8
 80036ea:	f8c8 2000 	str.w	r2, [r8]
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80036fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036fe:	9307      	str	r3, [sp, #28]
 8003700:	f8cd 8018 	str.w	r8, [sp, #24]
 8003704:	ee08 0a10 	vmov	s16, r0
 8003708:	4b9f      	ldr	r3, [pc, #636]	; (8003988 <_printf_float+0x2dc>)
 800370a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	f7fd fa0b 	bl	8000b2c <__aeabi_dcmpun>
 8003716:	bb88      	cbnz	r0, 800377c <_printf_float+0xd0>
 8003718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800371c:	4b9a      	ldr	r3, [pc, #616]	; (8003988 <_printf_float+0x2dc>)
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	f7fd f9e5 	bl	8000af0 <__aeabi_dcmple>
 8003726:	bb48      	cbnz	r0, 800377c <_printf_float+0xd0>
 8003728:	2200      	movs	r2, #0
 800372a:	2300      	movs	r3, #0
 800372c:	4640      	mov	r0, r8
 800372e:	4649      	mov	r1, r9
 8003730:	f7fd f9d4 	bl	8000adc <__aeabi_dcmplt>
 8003734:	b110      	cbz	r0, 800373c <_printf_float+0x90>
 8003736:	232d      	movs	r3, #45	; 0x2d
 8003738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800373c:	4b93      	ldr	r3, [pc, #588]	; (800398c <_printf_float+0x2e0>)
 800373e:	4894      	ldr	r0, [pc, #592]	; (8003990 <_printf_float+0x2e4>)
 8003740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003744:	bf94      	ite	ls
 8003746:	4698      	movls	r8, r3
 8003748:	4680      	movhi	r8, r0
 800374a:	2303      	movs	r3, #3
 800374c:	6123      	str	r3, [r4, #16]
 800374e:	9b05      	ldr	r3, [sp, #20]
 8003750:	f023 0204 	bic.w	r2, r3, #4
 8003754:	6022      	str	r2, [r4, #0]
 8003756:	f04f 0900 	mov.w	r9, #0
 800375a:	9700      	str	r7, [sp, #0]
 800375c:	4633      	mov	r3, r6
 800375e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003760:	4621      	mov	r1, r4
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f9d8 	bl	8003b18 <_printf_common>
 8003768:	3001      	adds	r0, #1
 800376a:	f040 8090 	bne.w	800388e <_printf_float+0x1e2>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	b00d      	add	sp, #52	; 0x34
 8003774:	ecbd 8b02 	vpop	{d8}
 8003778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377c:	4642      	mov	r2, r8
 800377e:	464b      	mov	r3, r9
 8003780:	4640      	mov	r0, r8
 8003782:	4649      	mov	r1, r9
 8003784:	f7fd f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8003788:	b140      	cbz	r0, 800379c <_printf_float+0xf0>
 800378a:	464b      	mov	r3, r9
 800378c:	2b00      	cmp	r3, #0
 800378e:	bfbc      	itt	lt
 8003790:	232d      	movlt	r3, #45	; 0x2d
 8003792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003796:	487f      	ldr	r0, [pc, #508]	; (8003994 <_printf_float+0x2e8>)
 8003798:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <_printf_float+0x2ec>)
 800379a:	e7d1      	b.n	8003740 <_printf_float+0x94>
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80037a2:	9206      	str	r2, [sp, #24]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	d13f      	bne.n	8003828 <_printf_float+0x17c>
 80037a8:	2306      	movs	r3, #6
 80037aa:	6063      	str	r3, [r4, #4]
 80037ac:	9b05      	ldr	r3, [sp, #20]
 80037ae:	6861      	ldr	r1, [r4, #4]
 80037b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80037b4:	2300      	movs	r3, #0
 80037b6:	9303      	str	r3, [sp, #12]
 80037b8:	ab0a      	add	r3, sp, #40	; 0x28
 80037ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80037be:	ab09      	add	r3, sp, #36	; 0x24
 80037c0:	ec49 8b10 	vmov	d0, r8, r9
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6022      	str	r2, [r4, #0]
 80037c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80037cc:	4628      	mov	r0, r5
 80037ce:	f7ff fecd 	bl	800356c <__cvt>
 80037d2:	9b06      	ldr	r3, [sp, #24]
 80037d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80037d6:	2b47      	cmp	r3, #71	; 0x47
 80037d8:	4680      	mov	r8, r0
 80037da:	d108      	bne.n	80037ee <_printf_float+0x142>
 80037dc:	1cc8      	adds	r0, r1, #3
 80037de:	db02      	blt.n	80037e6 <_printf_float+0x13a>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	4299      	cmp	r1, r3
 80037e4:	dd41      	ble.n	800386a <_printf_float+0x1be>
 80037e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80037ea:	fa5f fb8b 	uxtb.w	fp, fp
 80037ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037f2:	d820      	bhi.n	8003836 <_printf_float+0x18a>
 80037f4:	3901      	subs	r1, #1
 80037f6:	465a      	mov	r2, fp
 80037f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037fc:	9109      	str	r1, [sp, #36]	; 0x24
 80037fe:	f7ff ff17 	bl	8003630 <__exponent>
 8003802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003804:	1813      	adds	r3, r2, r0
 8003806:	2a01      	cmp	r2, #1
 8003808:	4681      	mov	r9, r0
 800380a:	6123      	str	r3, [r4, #16]
 800380c:	dc02      	bgt.n	8003814 <_printf_float+0x168>
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	07d2      	lsls	r2, r2, #31
 8003812:	d501      	bpl.n	8003818 <_printf_float+0x16c>
 8003814:	3301      	adds	r3, #1
 8003816:	6123      	str	r3, [r4, #16]
 8003818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800381c:	2b00      	cmp	r3, #0
 800381e:	d09c      	beq.n	800375a <_printf_float+0xae>
 8003820:	232d      	movs	r3, #45	; 0x2d
 8003822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003826:	e798      	b.n	800375a <_printf_float+0xae>
 8003828:	9a06      	ldr	r2, [sp, #24]
 800382a:	2a47      	cmp	r2, #71	; 0x47
 800382c:	d1be      	bne.n	80037ac <_printf_float+0x100>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1bc      	bne.n	80037ac <_printf_float+0x100>
 8003832:	2301      	movs	r3, #1
 8003834:	e7b9      	b.n	80037aa <_printf_float+0xfe>
 8003836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800383a:	d118      	bne.n	800386e <_printf_float+0x1c2>
 800383c:	2900      	cmp	r1, #0
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	dd0b      	ble.n	800385a <_printf_float+0x1ae>
 8003842:	6121      	str	r1, [r4, #16]
 8003844:	b913      	cbnz	r3, 800384c <_printf_float+0x1a0>
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	07d0      	lsls	r0, r2, #31
 800384a:	d502      	bpl.n	8003852 <_printf_float+0x1a6>
 800384c:	3301      	adds	r3, #1
 800384e:	440b      	add	r3, r1
 8003850:	6123      	str	r3, [r4, #16]
 8003852:	65a1      	str	r1, [r4, #88]	; 0x58
 8003854:	f04f 0900 	mov.w	r9, #0
 8003858:	e7de      	b.n	8003818 <_printf_float+0x16c>
 800385a:	b913      	cbnz	r3, 8003862 <_printf_float+0x1b6>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	07d2      	lsls	r2, r2, #31
 8003860:	d501      	bpl.n	8003866 <_printf_float+0x1ba>
 8003862:	3302      	adds	r3, #2
 8003864:	e7f4      	b.n	8003850 <_printf_float+0x1a4>
 8003866:	2301      	movs	r3, #1
 8003868:	e7f2      	b.n	8003850 <_printf_float+0x1a4>
 800386a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800386e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003870:	4299      	cmp	r1, r3
 8003872:	db05      	blt.n	8003880 <_printf_float+0x1d4>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	6121      	str	r1, [r4, #16]
 8003878:	07d8      	lsls	r0, r3, #31
 800387a:	d5ea      	bpl.n	8003852 <_printf_float+0x1a6>
 800387c:	1c4b      	adds	r3, r1, #1
 800387e:	e7e7      	b.n	8003850 <_printf_float+0x1a4>
 8003880:	2900      	cmp	r1, #0
 8003882:	bfd4      	ite	le
 8003884:	f1c1 0202 	rsble	r2, r1, #2
 8003888:	2201      	movgt	r2, #1
 800388a:	4413      	add	r3, r2
 800388c:	e7e0      	b.n	8003850 <_printf_float+0x1a4>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	055a      	lsls	r2, r3, #21
 8003892:	d407      	bmi.n	80038a4 <_printf_float+0x1f8>
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	4642      	mov	r2, r8
 8003898:	4631      	mov	r1, r6
 800389a:	4628      	mov	r0, r5
 800389c:	47b8      	blx	r7
 800389e:	3001      	adds	r0, #1
 80038a0:	d12c      	bne.n	80038fc <_printf_float+0x250>
 80038a2:	e764      	b.n	800376e <_printf_float+0xc2>
 80038a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80038a8:	f240 80e0 	bls.w	8003a6c <_printf_float+0x3c0>
 80038ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038b0:	2200      	movs	r2, #0
 80038b2:	2300      	movs	r3, #0
 80038b4:	f7fd f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d034      	beq.n	8003926 <_printf_float+0x27a>
 80038bc:	4a37      	ldr	r2, [pc, #220]	; (800399c <_printf_float+0x2f0>)
 80038be:	2301      	movs	r3, #1
 80038c0:	4631      	mov	r1, r6
 80038c2:	4628      	mov	r0, r5
 80038c4:	47b8      	blx	r7
 80038c6:	3001      	adds	r0, #1
 80038c8:	f43f af51 	beq.w	800376e <_printf_float+0xc2>
 80038cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038d0:	429a      	cmp	r2, r3
 80038d2:	db02      	blt.n	80038da <_printf_float+0x22e>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	07d8      	lsls	r0, r3, #31
 80038d8:	d510      	bpl.n	80038fc <_printf_float+0x250>
 80038da:	ee18 3a10 	vmov	r3, s16
 80038de:	4652      	mov	r2, sl
 80038e0:	4631      	mov	r1, r6
 80038e2:	4628      	mov	r0, r5
 80038e4:	47b8      	blx	r7
 80038e6:	3001      	adds	r0, #1
 80038e8:	f43f af41 	beq.w	800376e <_printf_float+0xc2>
 80038ec:	f04f 0800 	mov.w	r8, #0
 80038f0:	f104 091a 	add.w	r9, r4, #26
 80038f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4543      	cmp	r3, r8
 80038fa:	dc09      	bgt.n	8003910 <_printf_float+0x264>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	079b      	lsls	r3, r3, #30
 8003900:	f100 8105 	bmi.w	8003b0e <_printf_float+0x462>
 8003904:	68e0      	ldr	r0, [r4, #12]
 8003906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003908:	4298      	cmp	r0, r3
 800390a:	bfb8      	it	lt
 800390c:	4618      	movlt	r0, r3
 800390e:	e730      	b.n	8003772 <_printf_float+0xc6>
 8003910:	2301      	movs	r3, #1
 8003912:	464a      	mov	r2, r9
 8003914:	4631      	mov	r1, r6
 8003916:	4628      	mov	r0, r5
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	f43f af27 	beq.w	800376e <_printf_float+0xc2>
 8003920:	f108 0801 	add.w	r8, r8, #1
 8003924:	e7e6      	b.n	80038f4 <_printf_float+0x248>
 8003926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	dc39      	bgt.n	80039a0 <_printf_float+0x2f4>
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <_printf_float+0x2f0>)
 800392e:	2301      	movs	r3, #1
 8003930:	4631      	mov	r1, r6
 8003932:	4628      	mov	r0, r5
 8003934:	47b8      	blx	r7
 8003936:	3001      	adds	r0, #1
 8003938:	f43f af19 	beq.w	800376e <_printf_float+0xc2>
 800393c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003940:	4313      	orrs	r3, r2
 8003942:	d102      	bne.n	800394a <_printf_float+0x29e>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	07d9      	lsls	r1, r3, #31
 8003948:	d5d8      	bpl.n	80038fc <_printf_float+0x250>
 800394a:	ee18 3a10 	vmov	r3, s16
 800394e:	4652      	mov	r2, sl
 8003950:	4631      	mov	r1, r6
 8003952:	4628      	mov	r0, r5
 8003954:	47b8      	blx	r7
 8003956:	3001      	adds	r0, #1
 8003958:	f43f af09 	beq.w	800376e <_printf_float+0xc2>
 800395c:	f04f 0900 	mov.w	r9, #0
 8003960:	f104 0a1a 	add.w	sl, r4, #26
 8003964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003966:	425b      	negs	r3, r3
 8003968:	454b      	cmp	r3, r9
 800396a:	dc01      	bgt.n	8003970 <_printf_float+0x2c4>
 800396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800396e:	e792      	b.n	8003896 <_printf_float+0x1ea>
 8003970:	2301      	movs	r3, #1
 8003972:	4652      	mov	r2, sl
 8003974:	4631      	mov	r1, r6
 8003976:	4628      	mov	r0, r5
 8003978:	47b8      	blx	r7
 800397a:	3001      	adds	r0, #1
 800397c:	f43f aef7 	beq.w	800376e <_printf_float+0xc2>
 8003980:	f109 0901 	add.w	r9, r9, #1
 8003984:	e7ee      	b.n	8003964 <_printf_float+0x2b8>
 8003986:	bf00      	nop
 8003988:	7fefffff 	.word	0x7fefffff
 800398c:	08007298 	.word	0x08007298
 8003990:	0800729c 	.word	0x0800729c
 8003994:	080072a4 	.word	0x080072a4
 8003998:	080072a0 	.word	0x080072a0
 800399c:	080072a8 	.word	0x080072a8
 80039a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bfa8      	it	ge
 80039a8:	461a      	movge	r2, r3
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	4691      	mov	r9, r2
 80039ae:	dc37      	bgt.n	8003a20 <_printf_float+0x374>
 80039b0:	f04f 0b00 	mov.w	fp, #0
 80039b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039b8:	f104 021a 	add.w	r2, r4, #26
 80039bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039be:	9305      	str	r3, [sp, #20]
 80039c0:	eba3 0309 	sub.w	r3, r3, r9
 80039c4:	455b      	cmp	r3, fp
 80039c6:	dc33      	bgt.n	8003a30 <_printf_float+0x384>
 80039c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039cc:	429a      	cmp	r2, r3
 80039ce:	db3b      	blt.n	8003a48 <_printf_float+0x39c>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	07da      	lsls	r2, r3, #31
 80039d4:	d438      	bmi.n	8003a48 <_printf_float+0x39c>
 80039d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039d8:	9b05      	ldr	r3, [sp, #20]
 80039da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	eba2 0901 	sub.w	r9, r2, r1
 80039e2:	4599      	cmp	r9, r3
 80039e4:	bfa8      	it	ge
 80039e6:	4699      	movge	r9, r3
 80039e8:	f1b9 0f00 	cmp.w	r9, #0
 80039ec:	dc35      	bgt.n	8003a5a <_printf_float+0x3ae>
 80039ee:	f04f 0800 	mov.w	r8, #0
 80039f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039f6:	f104 0a1a 	add.w	sl, r4, #26
 80039fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	eba3 0309 	sub.w	r3, r3, r9
 8003a04:	4543      	cmp	r3, r8
 8003a06:	f77f af79 	ble.w	80038fc <_printf_float+0x250>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4652      	mov	r2, sl
 8003a0e:	4631      	mov	r1, r6
 8003a10:	4628      	mov	r0, r5
 8003a12:	47b8      	blx	r7
 8003a14:	3001      	adds	r0, #1
 8003a16:	f43f aeaa 	beq.w	800376e <_printf_float+0xc2>
 8003a1a:	f108 0801 	add.w	r8, r8, #1
 8003a1e:	e7ec      	b.n	80039fa <_printf_float+0x34e>
 8003a20:	4613      	mov	r3, r2
 8003a22:	4631      	mov	r1, r6
 8003a24:	4642      	mov	r2, r8
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1c0      	bne.n	80039b0 <_printf_float+0x304>
 8003a2e:	e69e      	b.n	800376e <_printf_float+0xc2>
 8003a30:	2301      	movs	r3, #1
 8003a32:	4631      	mov	r1, r6
 8003a34:	4628      	mov	r0, r5
 8003a36:	9205      	str	r2, [sp, #20]
 8003a38:	47b8      	blx	r7
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f43f ae97 	beq.w	800376e <_printf_float+0xc2>
 8003a40:	9a05      	ldr	r2, [sp, #20]
 8003a42:	f10b 0b01 	add.w	fp, fp, #1
 8003a46:	e7b9      	b.n	80039bc <_printf_float+0x310>
 8003a48:	ee18 3a10 	vmov	r3, s16
 8003a4c:	4652      	mov	r2, sl
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b8      	blx	r7
 8003a54:	3001      	adds	r0, #1
 8003a56:	d1be      	bne.n	80039d6 <_printf_float+0x32a>
 8003a58:	e689      	b.n	800376e <_printf_float+0xc2>
 8003a5a:	9a05      	ldr	r2, [sp, #20]
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	4442      	add	r2, r8
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b8      	blx	r7
 8003a66:	3001      	adds	r0, #1
 8003a68:	d1c1      	bne.n	80039ee <_printf_float+0x342>
 8003a6a:	e680      	b.n	800376e <_printf_float+0xc2>
 8003a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a6e:	2a01      	cmp	r2, #1
 8003a70:	dc01      	bgt.n	8003a76 <_printf_float+0x3ca>
 8003a72:	07db      	lsls	r3, r3, #31
 8003a74:	d538      	bpl.n	8003ae8 <_printf_float+0x43c>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4642      	mov	r2, r8
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b8      	blx	r7
 8003a80:	3001      	adds	r0, #1
 8003a82:	f43f ae74 	beq.w	800376e <_printf_float+0xc2>
 8003a86:	ee18 3a10 	vmov	r3, s16
 8003a8a:	4652      	mov	r2, sl
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47b8      	blx	r7
 8003a92:	3001      	adds	r0, #1
 8003a94:	f43f ae6b 	beq.w	800376e <_printf_float+0xc2>
 8003a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f7fd f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aa4:	b9d8      	cbnz	r0, 8003ade <_printf_float+0x432>
 8003aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aa8:	f108 0201 	add.w	r2, r8, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b8      	blx	r7
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d10e      	bne.n	8003ad6 <_printf_float+0x42a>
 8003ab8:	e659      	b.n	800376e <_printf_float+0xc2>
 8003aba:	2301      	movs	r3, #1
 8003abc:	4652      	mov	r2, sl
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f ae52 	beq.w	800376e <_printf_float+0xc2>
 8003aca:	f108 0801 	add.w	r8, r8, #1
 8003ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	4543      	cmp	r3, r8
 8003ad4:	dcf1      	bgt.n	8003aba <_printf_float+0x40e>
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003adc:	e6dc      	b.n	8003898 <_printf_float+0x1ec>
 8003ade:	f04f 0800 	mov.w	r8, #0
 8003ae2:	f104 0a1a 	add.w	sl, r4, #26
 8003ae6:	e7f2      	b.n	8003ace <_printf_float+0x422>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4642      	mov	r2, r8
 8003aec:	e7df      	b.n	8003aae <_printf_float+0x402>
 8003aee:	2301      	movs	r3, #1
 8003af0:	464a      	mov	r2, r9
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	f43f ae38 	beq.w	800376e <_printf_float+0xc2>
 8003afe:	f108 0801 	add.w	r8, r8, #1
 8003b02:	68e3      	ldr	r3, [r4, #12]
 8003b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b06:	1a5b      	subs	r3, r3, r1
 8003b08:	4543      	cmp	r3, r8
 8003b0a:	dcf0      	bgt.n	8003aee <_printf_float+0x442>
 8003b0c:	e6fa      	b.n	8003904 <_printf_float+0x258>
 8003b0e:	f04f 0800 	mov.w	r8, #0
 8003b12:	f104 0919 	add.w	r9, r4, #25
 8003b16:	e7f4      	b.n	8003b02 <_printf_float+0x456>

08003b18 <_printf_common>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	4699      	mov	r9, r3
 8003b20:	688a      	ldr	r2, [r1, #8]
 8003b22:	690b      	ldr	r3, [r1, #16]
 8003b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bfb8      	it	lt
 8003b2c:	4613      	movlt	r3, r2
 8003b2e:	6033      	str	r3, [r6, #0]
 8003b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b34:	4607      	mov	r7, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	b10a      	cbz	r2, 8003b3e <_printf_common+0x26>
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	0699      	lsls	r1, r3, #26
 8003b42:	bf42      	ittt	mi
 8003b44:	6833      	ldrmi	r3, [r6, #0]
 8003b46:	3302      	addmi	r3, #2
 8003b48:	6033      	strmi	r3, [r6, #0]
 8003b4a:	6825      	ldr	r5, [r4, #0]
 8003b4c:	f015 0506 	ands.w	r5, r5, #6
 8003b50:	d106      	bne.n	8003b60 <_printf_common+0x48>
 8003b52:	f104 0a19 	add.w	sl, r4, #25
 8003b56:	68e3      	ldr	r3, [r4, #12]
 8003b58:	6832      	ldr	r2, [r6, #0]
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	42ab      	cmp	r3, r5
 8003b5e:	dc26      	bgt.n	8003bae <_printf_common+0x96>
 8003b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b64:	1e13      	subs	r3, r2, #0
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	bf18      	it	ne
 8003b6a:	2301      	movne	r3, #1
 8003b6c:	0692      	lsls	r2, r2, #26
 8003b6e:	d42b      	bmi.n	8003bc8 <_printf_common+0xb0>
 8003b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	47c0      	blx	r8
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d01e      	beq.n	8003bbc <_printf_common+0xa4>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	68e5      	ldr	r5, [r4, #12]
 8003b82:	6832      	ldr	r2, [r6, #0]
 8003b84:	f003 0306 	and.w	r3, r3, #6
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	bf08      	it	eq
 8003b8c:	1aad      	subeq	r5, r5, r2
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	6922      	ldr	r2, [r4, #16]
 8003b92:	bf0c      	ite	eq
 8003b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b98:	2500      	movne	r5, #0
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bfc4      	itt	gt
 8003b9e:	1a9b      	subgt	r3, r3, r2
 8003ba0:	18ed      	addgt	r5, r5, r3
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	341a      	adds	r4, #26
 8003ba6:	42b5      	cmp	r5, r6
 8003ba8:	d11a      	bne.n	8003be0 <_printf_common+0xc8>
 8003baa:	2000      	movs	r0, #0
 8003bac:	e008      	b.n	8003bc0 <_printf_common+0xa8>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4652      	mov	r2, sl
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	47c0      	blx	r8
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d103      	bne.n	8003bc4 <_printf_common+0xac>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc4:	3501      	adds	r5, #1
 8003bc6:	e7c6      	b.n	8003b56 <_printf_common+0x3e>
 8003bc8:	18e1      	adds	r1, r4, r3
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	2030      	movs	r0, #48	; 0x30
 8003bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd2:	4422      	add	r2, r4
 8003bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bdc:	3302      	adds	r3, #2
 8003bde:	e7c7      	b.n	8003b70 <_printf_common+0x58>
 8003be0:	2301      	movs	r3, #1
 8003be2:	4622      	mov	r2, r4
 8003be4:	4649      	mov	r1, r9
 8003be6:	4638      	mov	r0, r7
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0e6      	beq.n	8003bbc <_printf_common+0xa4>
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7d9      	b.n	8003ba6 <_printf_common+0x8e>
	...

08003bf4 <_printf_i>:
 8003bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	7e27      	ldrb	r7, [r4, #24]
 8003bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c00:	2f78      	cmp	r7, #120	; 0x78
 8003c02:	4680      	mov	r8, r0
 8003c04:	469a      	mov	sl, r3
 8003c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c0a:	d807      	bhi.n	8003c1c <_printf_i+0x28>
 8003c0c:	2f62      	cmp	r7, #98	; 0x62
 8003c0e:	d80a      	bhi.n	8003c26 <_printf_i+0x32>
 8003c10:	2f00      	cmp	r7, #0
 8003c12:	f000 80d8 	beq.w	8003dc6 <_printf_i+0x1d2>
 8003c16:	2f58      	cmp	r7, #88	; 0x58
 8003c18:	f000 80a3 	beq.w	8003d62 <_printf_i+0x16e>
 8003c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c24:	e03a      	b.n	8003c9c <_printf_i+0xa8>
 8003c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c2a:	2b15      	cmp	r3, #21
 8003c2c:	d8f6      	bhi.n	8003c1c <_printf_i+0x28>
 8003c2e:	a001      	add	r0, pc, #4	; (adr r0, 8003c34 <_printf_i+0x40>)
 8003c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003c1d 	.word	0x08003c1d
 8003c40:	08003c1d 	.word	0x08003c1d
 8003c44:	08003c1d 	.word	0x08003c1d
 8003c48:	08003c1d 	.word	0x08003c1d
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003c1d 	.word	0x08003c1d
 8003c54:	08003c1d 	.word	0x08003c1d
 8003c58:	08003c1d 	.word	0x08003c1d
 8003c5c:	08003c1d 	.word	0x08003c1d
 8003c60:	08003dad 	.word	0x08003dad
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003d8f 	.word	0x08003d8f
 8003c6c:	08003c1d 	.word	0x08003c1d
 8003c70:	08003c1d 	.word	0x08003c1d
 8003c74:	08003dcf 	.word	0x08003dcf
 8003c78:	08003c1d 	.word	0x08003c1d
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003c1d 	.word	0x08003c1d
 8003c84:	08003c1d 	.word	0x08003c1d
 8003c88:	08003d97 	.word	0x08003d97
 8003c8c:	680b      	ldr	r3, [r1, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	600a      	str	r2, [r1, #0]
 8003c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0a3      	b.n	8003de8 <_printf_i+0x1f4>
 8003ca0:	6825      	ldr	r5, [r4, #0]
 8003ca2:	6808      	ldr	r0, [r1, #0]
 8003ca4:	062e      	lsls	r6, r5, #24
 8003ca6:	f100 0304 	add.w	r3, r0, #4
 8003caa:	d50a      	bpl.n	8003cc2 <_printf_i+0xce>
 8003cac:	6805      	ldr	r5, [r0, #0]
 8003cae:	600b      	str	r3, [r1, #0]
 8003cb0:	2d00      	cmp	r5, #0
 8003cb2:	da03      	bge.n	8003cbc <_printf_i+0xc8>
 8003cb4:	232d      	movs	r3, #45	; 0x2d
 8003cb6:	426d      	negs	r5, r5
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	485e      	ldr	r0, [pc, #376]	; (8003e38 <_printf_i+0x244>)
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	e019      	b.n	8003cf6 <_printf_i+0x102>
 8003cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cc6:	6805      	ldr	r5, [r0, #0]
 8003cc8:	600b      	str	r3, [r1, #0]
 8003cca:	bf18      	it	ne
 8003ccc:	b22d      	sxthne	r5, r5
 8003cce:	e7ef      	b.n	8003cb0 <_printf_i+0xbc>
 8003cd0:	680b      	ldr	r3, [r1, #0]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	1d18      	adds	r0, r3, #4
 8003cd6:	6008      	str	r0, [r1, #0]
 8003cd8:	0628      	lsls	r0, r5, #24
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0xec>
 8003cdc:	681d      	ldr	r5, [r3, #0]
 8003cde:	e002      	b.n	8003ce6 <_printf_i+0xf2>
 8003ce0:	0669      	lsls	r1, r5, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0xe8>
 8003ce4:	881d      	ldrh	r5, [r3, #0]
 8003ce6:	4854      	ldr	r0, [pc, #336]	; (8003e38 <_printf_i+0x244>)
 8003ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8003cea:	bf0c      	ite	eq
 8003cec:	2308      	moveq	r3, #8
 8003cee:	230a      	movne	r3, #10
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf6:	6866      	ldr	r6, [r4, #4]
 8003cf8:	60a6      	str	r6, [r4, #8]
 8003cfa:	2e00      	cmp	r6, #0
 8003cfc:	bfa2      	ittt	ge
 8003cfe:	6821      	ldrge	r1, [r4, #0]
 8003d00:	f021 0104 	bicge.w	r1, r1, #4
 8003d04:	6021      	strge	r1, [r4, #0]
 8003d06:	b90d      	cbnz	r5, 8003d0c <_printf_i+0x118>
 8003d08:	2e00      	cmp	r6, #0
 8003d0a:	d04d      	beq.n	8003da8 <_printf_i+0x1b4>
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d12:	fb03 5711 	mls	r7, r3, r1, r5
 8003d16:	5dc7      	ldrb	r7, [r0, r7]
 8003d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d1c:	462f      	mov	r7, r5
 8003d1e:	42bb      	cmp	r3, r7
 8003d20:	460d      	mov	r5, r1
 8003d22:	d9f4      	bls.n	8003d0e <_printf_i+0x11a>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d10b      	bne.n	8003d40 <_printf_i+0x14c>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	07df      	lsls	r7, r3, #31
 8003d2c:	d508      	bpl.n	8003d40 <_printf_i+0x14c>
 8003d2e:	6923      	ldr	r3, [r4, #16]
 8003d30:	6861      	ldr	r1, [r4, #4]
 8003d32:	4299      	cmp	r1, r3
 8003d34:	bfde      	ittt	le
 8003d36:	2330      	movle	r3, #48	; 0x30
 8003d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d40:	1b92      	subs	r2, r2, r6
 8003d42:	6122      	str	r2, [r4, #16]
 8003d44:	f8cd a000 	str.w	sl, [sp]
 8003d48:	464b      	mov	r3, r9
 8003d4a:	aa03      	add	r2, sp, #12
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4640      	mov	r0, r8
 8003d50:	f7ff fee2 	bl	8003b18 <_printf_common>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d14c      	bne.n	8003df2 <_printf_i+0x1fe>
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	b004      	add	sp, #16
 8003d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d62:	4835      	ldr	r0, [pc, #212]	; (8003e38 <_printf_i+0x244>)
 8003d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	680e      	ldr	r6, [r1, #0]
 8003d6c:	061f      	lsls	r7, r3, #24
 8003d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d72:	600e      	str	r6, [r1, #0]
 8003d74:	d514      	bpl.n	8003da0 <_printf_i+0x1ac>
 8003d76:	07d9      	lsls	r1, r3, #31
 8003d78:	bf44      	itt	mi
 8003d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d7e:	6023      	strmi	r3, [r4, #0]
 8003d80:	b91d      	cbnz	r5, 8003d8a <_printf_i+0x196>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	f023 0320 	bic.w	r3, r3, #32
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	e7b0      	b.n	8003cf0 <_printf_i+0xfc>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	f043 0320 	orr.w	r3, r3, #32
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	2378      	movs	r3, #120	; 0x78
 8003d98:	4828      	ldr	r0, [pc, #160]	; (8003e3c <_printf_i+0x248>)
 8003d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d9e:	e7e3      	b.n	8003d68 <_printf_i+0x174>
 8003da0:	065e      	lsls	r6, r3, #25
 8003da2:	bf48      	it	mi
 8003da4:	b2ad      	uxthmi	r5, r5
 8003da6:	e7e6      	b.n	8003d76 <_printf_i+0x182>
 8003da8:	4616      	mov	r6, r2
 8003daa:	e7bb      	b.n	8003d24 <_printf_i+0x130>
 8003dac:	680b      	ldr	r3, [r1, #0]
 8003dae:	6826      	ldr	r6, [r4, #0]
 8003db0:	6960      	ldr	r0, [r4, #20]
 8003db2:	1d1d      	adds	r5, r3, #4
 8003db4:	600d      	str	r5, [r1, #0]
 8003db6:	0635      	lsls	r5, r6, #24
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	d501      	bpl.n	8003dc0 <_printf_i+0x1cc>
 8003dbc:	6018      	str	r0, [r3, #0]
 8003dbe:	e002      	b.n	8003dc6 <_printf_i+0x1d2>
 8003dc0:	0671      	lsls	r1, r6, #25
 8003dc2:	d5fb      	bpl.n	8003dbc <_printf_i+0x1c8>
 8003dc4:	8018      	strh	r0, [r3, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	4616      	mov	r6, r2
 8003dcc:	e7ba      	b.n	8003d44 <_printf_i+0x150>
 8003dce:	680b      	ldr	r3, [r1, #0]
 8003dd0:	1d1a      	adds	r2, r3, #4
 8003dd2:	600a      	str	r2, [r1, #0]
 8003dd4:	681e      	ldr	r6, [r3, #0]
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f7fc fa00 	bl	80001e0 <memchr>
 8003de0:	b108      	cbz	r0, 8003de6 <_printf_i+0x1f2>
 8003de2:	1b80      	subs	r0, r0, r6
 8003de4:	6060      	str	r0, [r4, #4]
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df0:	e7a8      	b.n	8003d44 <_printf_i+0x150>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	4632      	mov	r2, r6
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	47d0      	blx	sl
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d0ab      	beq.n	8003d58 <_printf_i+0x164>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	079b      	lsls	r3, r3, #30
 8003e04:	d413      	bmi.n	8003e2e <_printf_i+0x23a>
 8003e06:	68e0      	ldr	r0, [r4, #12]
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	4298      	cmp	r0, r3
 8003e0c:	bfb8      	it	lt
 8003e0e:	4618      	movlt	r0, r3
 8003e10:	e7a4      	b.n	8003d5c <_printf_i+0x168>
 8003e12:	2301      	movs	r3, #1
 8003e14:	4632      	mov	r2, r6
 8003e16:	4649      	mov	r1, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	47d0      	blx	sl
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d09b      	beq.n	8003d58 <_printf_i+0x164>
 8003e20:	3501      	adds	r5, #1
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	9903      	ldr	r1, [sp, #12]
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	dcf2      	bgt.n	8003e12 <_printf_i+0x21e>
 8003e2c:	e7eb      	b.n	8003e06 <_printf_i+0x212>
 8003e2e:	2500      	movs	r5, #0
 8003e30:	f104 0619 	add.w	r6, r4, #25
 8003e34:	e7f5      	b.n	8003e22 <_printf_i+0x22e>
 8003e36:	bf00      	nop
 8003e38:	080072aa 	.word	0x080072aa
 8003e3c:	080072bb 	.word	0x080072bb

08003e40 <siprintf>:
 8003e40:	b40e      	push	{r1, r2, r3}
 8003e42:	b500      	push	{lr}
 8003e44:	b09c      	sub	sp, #112	; 0x70
 8003e46:	ab1d      	add	r3, sp, #116	; 0x74
 8003e48:	9002      	str	r0, [sp, #8]
 8003e4a:	9006      	str	r0, [sp, #24]
 8003e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e50:	4809      	ldr	r0, [pc, #36]	; (8003e78 <siprintf+0x38>)
 8003e52:	9107      	str	r1, [sp, #28]
 8003e54:	9104      	str	r1, [sp, #16]
 8003e56:	4909      	ldr	r1, [pc, #36]	; (8003e7c <siprintf+0x3c>)
 8003e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e5c:	9105      	str	r1, [sp, #20]
 8003e5e:	6800      	ldr	r0, [r0, #0]
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	a902      	add	r1, sp, #8
 8003e64:	f001 fb32 	bl	80054cc <_svfiprintf_r>
 8003e68:	9b02      	ldr	r3, [sp, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	b01c      	add	sp, #112	; 0x70
 8003e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e74:	b003      	add	sp, #12
 8003e76:	4770      	bx	lr
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	ffff0208 	.word	0xffff0208

08003e80 <quorem>:
 8003e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	6903      	ldr	r3, [r0, #16]
 8003e86:	690c      	ldr	r4, [r1, #16]
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	f2c0 8081 	blt.w	8003f92 <quorem+0x112>
 8003e90:	3c01      	subs	r4, #1
 8003e92:	f101 0814 	add.w	r8, r1, #20
 8003e96:	f100 0514 	add.w	r5, r0, #20
 8003e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003eb8:	d331      	bcc.n	8003f1e <quorem+0x9e>
 8003eba:	f04f 0e00 	mov.w	lr, #0
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	46ac      	mov	ip, r5
 8003ec2:	46f2      	mov	sl, lr
 8003ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ec8:	b293      	uxth	r3, r2
 8003eca:	fb06 e303 	mla	r3, r6, r3, lr
 8003ece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8003ed8:	0c12      	lsrs	r2, r2, #16
 8003eda:	f8dc a000 	ldr.w	sl, [ip]
 8003ede:	fb06 e202 	mla	r2, r6, r2, lr
 8003ee2:	fa13 f38a 	uxtah	r3, r3, sl
 8003ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003eea:	fa1f fa82 	uxth.w	sl, r2
 8003eee:	f8dc 2000 	ldr.w	r2, [ip]
 8003ef2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003ef6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f00:	4581      	cmp	r9, r0
 8003f02:	f84c 3b04 	str.w	r3, [ip], #4
 8003f06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f0a:	d2db      	bcs.n	8003ec4 <quorem+0x44>
 8003f0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f10:	b92b      	cbnz	r3, 8003f1e <quorem+0x9e>
 8003f12:	9b01      	ldr	r3, [sp, #4]
 8003f14:	3b04      	subs	r3, #4
 8003f16:	429d      	cmp	r5, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	d32e      	bcc.n	8003f7a <quorem+0xfa>
 8003f1c:	613c      	str	r4, [r7, #16]
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f001 f8be 	bl	80050a0 <__mcmp>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	db24      	blt.n	8003f72 <quorem+0xf2>
 8003f28:	3601      	adds	r6, #1
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f04f 0c00 	mov.w	ip, #0
 8003f30:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f34:	f8d0 e000 	ldr.w	lr, [r0]
 8003f38:	b293      	uxth	r3, r2
 8003f3a:	ebac 0303 	sub.w	r3, ip, r3
 8003f3e:	0c12      	lsrs	r2, r2, #16
 8003f40:	fa13 f38e 	uxtah	r3, r3, lr
 8003f44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f52:	45c1      	cmp	r9, r8
 8003f54:	f840 3b04 	str.w	r3, [r0], #4
 8003f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003f5c:	d2e8      	bcs.n	8003f30 <quorem+0xb0>
 8003f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f66:	b922      	cbnz	r2, 8003f72 <quorem+0xf2>
 8003f68:	3b04      	subs	r3, #4
 8003f6a:	429d      	cmp	r5, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	d30a      	bcc.n	8003f86 <quorem+0x106>
 8003f70:	613c      	str	r4, [r7, #16]
 8003f72:	4630      	mov	r0, r6
 8003f74:	b003      	add	sp, #12
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d1cc      	bne.n	8003f1c <quorem+0x9c>
 8003f82:	3c01      	subs	r4, #1
 8003f84:	e7c7      	b.n	8003f16 <quorem+0x96>
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d1f0      	bne.n	8003f70 <quorem+0xf0>
 8003f8e:	3c01      	subs	r4, #1
 8003f90:	e7eb      	b.n	8003f6a <quorem+0xea>
 8003f92:	2000      	movs	r0, #0
 8003f94:	e7ee      	b.n	8003f74 <quorem+0xf4>
	...

08003f98 <_dtoa_r>:
 8003f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	ed2d 8b02 	vpush	{d8}
 8003fa0:	ec57 6b10 	vmov	r6, r7, d0
 8003fa4:	b095      	sub	sp, #84	; 0x54
 8003fa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003fac:	9105      	str	r1, [sp, #20]
 8003fae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fb8:	b975      	cbnz	r5, 8003fd8 <_dtoa_r+0x40>
 8003fba:	2010      	movs	r0, #16
 8003fbc:	f000 fddc 	bl	8004b78 <malloc>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6260      	str	r0, [r4, #36]	; 0x24
 8003fc4:	b920      	cbnz	r0, 8003fd0 <_dtoa_r+0x38>
 8003fc6:	4bb2      	ldr	r3, [pc, #712]	; (8004290 <_dtoa_r+0x2f8>)
 8003fc8:	21ea      	movs	r1, #234	; 0xea
 8003fca:	48b2      	ldr	r0, [pc, #712]	; (8004294 <_dtoa_r+0x2fc>)
 8003fcc:	f001 fb8e 	bl	80056ec <__assert_func>
 8003fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fd4:	6005      	str	r5, [r0, #0]
 8003fd6:	60c5      	str	r5, [r0, #12]
 8003fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	b151      	cbz	r1, 8003ff4 <_dtoa_r+0x5c>
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	604a      	str	r2, [r1, #4]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f000 fe1b 	bl	8004c24 <_Bfree>
 8003fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	1e3b      	subs	r3, r7, #0
 8003ff6:	bfb9      	ittee	lt
 8003ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ffc:	9303      	strlt	r3, [sp, #12]
 8003ffe:	2300      	movge	r3, #0
 8004000:	f8c8 3000 	strge.w	r3, [r8]
 8004004:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004008:	4ba3      	ldr	r3, [pc, #652]	; (8004298 <_dtoa_r+0x300>)
 800400a:	bfbc      	itt	lt
 800400c:	2201      	movlt	r2, #1
 800400e:	f8c8 2000 	strlt.w	r2, [r8]
 8004012:	ea33 0309 	bics.w	r3, r3, r9
 8004016:	d11b      	bne.n	8004050 <_dtoa_r+0xb8>
 8004018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800401a:	f242 730f 	movw	r3, #9999	; 0x270f
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004024:	4333      	orrs	r3, r6
 8004026:	f000 857a 	beq.w	8004b1e <_dtoa_r+0xb86>
 800402a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800402c:	b963      	cbnz	r3, 8004048 <_dtoa_r+0xb0>
 800402e:	4b9b      	ldr	r3, [pc, #620]	; (800429c <_dtoa_r+0x304>)
 8004030:	e024      	b.n	800407c <_dtoa_r+0xe4>
 8004032:	4b9b      	ldr	r3, [pc, #620]	; (80042a0 <_dtoa_r+0x308>)
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	3308      	adds	r3, #8
 8004038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	9800      	ldr	r0, [sp, #0]
 800403e:	b015      	add	sp, #84	; 0x54
 8004040:	ecbd 8b02 	vpop	{d8}
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004048:	4b94      	ldr	r3, [pc, #592]	; (800429c <_dtoa_r+0x304>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	3303      	adds	r3, #3
 800404e:	e7f3      	b.n	8004038 <_dtoa_r+0xa0>
 8004050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004054:	2200      	movs	r2, #0
 8004056:	ec51 0b17 	vmov	r0, r1, d7
 800405a:	2300      	movs	r3, #0
 800405c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004060:	f7fc fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004064:	4680      	mov	r8, r0
 8004066:	b158      	cbz	r0, 8004080 <_dtoa_r+0xe8>
 8004068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800406a:	2301      	movs	r3, #1
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8551 	beq.w	8004b18 <_dtoa_r+0xb80>
 8004076:	488b      	ldr	r0, [pc, #556]	; (80042a4 <_dtoa_r+0x30c>)
 8004078:	6018      	str	r0, [r3, #0]
 800407a:	1e43      	subs	r3, r0, #1
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	e7dd      	b.n	800403c <_dtoa_r+0xa4>
 8004080:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004084:	aa12      	add	r2, sp, #72	; 0x48
 8004086:	a913      	add	r1, sp, #76	; 0x4c
 8004088:	4620      	mov	r0, r4
 800408a:	f001 f8ad 	bl	80051e8 <__d2b>
 800408e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004092:	4683      	mov	fp, r0
 8004094:	2d00      	cmp	r5, #0
 8004096:	d07c      	beq.n	8004192 <_dtoa_r+0x1fa>
 8004098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800409a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800409e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80040a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80040aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80040ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <_dtoa_r+0x310>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	4639      	mov	r1, r7
 80040ba:	f7fc f8e5 	bl	8000288 <__aeabi_dsub>
 80040be:	a36e      	add	r3, pc, #440	; (adr r3, 8004278 <_dtoa_r+0x2e0>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc fa98 	bl	80005f8 <__aeabi_dmul>
 80040c8:	a36d      	add	r3, pc, #436	; (adr r3, 8004280 <_dtoa_r+0x2e8>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc f8dd 	bl	800028c <__adddf3>
 80040d2:	4606      	mov	r6, r0
 80040d4:	4628      	mov	r0, r5
 80040d6:	460f      	mov	r7, r1
 80040d8:	f7fc fa24 	bl	8000524 <__aeabi_i2d>
 80040dc:	a36a      	add	r3, pc, #424	; (adr r3, 8004288 <_dtoa_r+0x2f0>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f7fc fa89 	bl	80005f8 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4630      	mov	r0, r6
 80040ec:	4639      	mov	r1, r7
 80040ee:	f7fc f8cd 	bl	800028c <__adddf3>
 80040f2:	4606      	mov	r6, r0
 80040f4:	460f      	mov	r7, r1
 80040f6:	f7fc fd2f 	bl	8000b58 <__aeabi_d2iz>
 80040fa:	2200      	movs	r2, #0
 80040fc:	4682      	mov	sl, r0
 80040fe:	2300      	movs	r3, #0
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fcea 	bl	8000adc <__aeabi_dcmplt>
 8004108:	b148      	cbz	r0, 800411e <_dtoa_r+0x186>
 800410a:	4650      	mov	r0, sl
 800410c:	f7fc fa0a 	bl	8000524 <__aeabi_i2d>
 8004110:	4632      	mov	r2, r6
 8004112:	463b      	mov	r3, r7
 8004114:	f7fc fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004118:	b908      	cbnz	r0, 800411e <_dtoa_r+0x186>
 800411a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800411e:	f1ba 0f16 	cmp.w	sl, #22
 8004122:	d854      	bhi.n	80041ce <_dtoa_r+0x236>
 8004124:	4b61      	ldr	r3, [pc, #388]	; (80042ac <_dtoa_r+0x314>)
 8004126:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004132:	f7fc fcd3 	bl	8000adc <__aeabi_dcmplt>
 8004136:	2800      	cmp	r0, #0
 8004138:	d04b      	beq.n	80041d2 <_dtoa_r+0x23a>
 800413a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800413e:	2300      	movs	r3, #0
 8004140:	930e      	str	r3, [sp, #56]	; 0x38
 8004142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004144:	1b5d      	subs	r5, r3, r5
 8004146:	1e6b      	subs	r3, r5, #1
 8004148:	9304      	str	r3, [sp, #16]
 800414a:	bf43      	ittte	mi
 800414c:	2300      	movmi	r3, #0
 800414e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004152:	9304      	strmi	r3, [sp, #16]
 8004154:	f04f 0800 	movpl.w	r8, #0
 8004158:	f1ba 0f00 	cmp.w	sl, #0
 800415c:	db3b      	blt.n	80041d6 <_dtoa_r+0x23e>
 800415e:	9b04      	ldr	r3, [sp, #16]
 8004160:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004164:	4453      	add	r3, sl
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	2300      	movs	r3, #0
 800416a:	9306      	str	r3, [sp, #24]
 800416c:	9b05      	ldr	r3, [sp, #20]
 800416e:	2b09      	cmp	r3, #9
 8004170:	d869      	bhi.n	8004246 <_dtoa_r+0x2ae>
 8004172:	2b05      	cmp	r3, #5
 8004174:	bfc4      	itt	gt
 8004176:	3b04      	subgt	r3, #4
 8004178:	9305      	strgt	r3, [sp, #20]
 800417a:	9b05      	ldr	r3, [sp, #20]
 800417c:	f1a3 0302 	sub.w	r3, r3, #2
 8004180:	bfcc      	ite	gt
 8004182:	2500      	movgt	r5, #0
 8004184:	2501      	movle	r5, #1
 8004186:	2b03      	cmp	r3, #3
 8004188:	d869      	bhi.n	800425e <_dtoa_r+0x2c6>
 800418a:	e8df f003 	tbb	[pc, r3]
 800418e:	4e2c      	.short	0x4e2c
 8004190:	5a4c      	.short	0x5a4c
 8004192:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004196:	441d      	add	r5, r3
 8004198:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800419c:	2b20      	cmp	r3, #32
 800419e:	bfc1      	itttt	gt
 80041a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80041a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80041ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80041b0:	bfda      	itte	le
 80041b2:	f1c3 0320 	rsble	r3, r3, #32
 80041b6:	fa06 f003 	lslle.w	r0, r6, r3
 80041ba:	4318      	orrgt	r0, r3
 80041bc:	f7fc f9a2 	bl	8000504 <__aeabi_ui2d>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4606      	mov	r6, r0
 80041c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80041c8:	3d01      	subs	r5, #1
 80041ca:	9310      	str	r3, [sp, #64]	; 0x40
 80041cc:	e771      	b.n	80040b2 <_dtoa_r+0x11a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e7b6      	b.n	8004140 <_dtoa_r+0x1a8>
 80041d2:	900e      	str	r0, [sp, #56]	; 0x38
 80041d4:	e7b5      	b.n	8004142 <_dtoa_r+0x1aa>
 80041d6:	f1ca 0300 	rsb	r3, sl, #0
 80041da:	9306      	str	r3, [sp, #24]
 80041dc:	2300      	movs	r3, #0
 80041de:	eba8 080a 	sub.w	r8, r8, sl
 80041e2:	930d      	str	r3, [sp, #52]	; 0x34
 80041e4:	e7c2      	b.n	800416c <_dtoa_r+0x1d4>
 80041e6:	2300      	movs	r3, #0
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	dc39      	bgt.n	8004264 <_dtoa_r+0x2cc>
 80041f0:	f04f 0901 	mov.w	r9, #1
 80041f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80041f8:	464b      	mov	r3, r9
 80041fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80041fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004200:	2200      	movs	r2, #0
 8004202:	6042      	str	r2, [r0, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	f102 0614 	add.w	r6, r2, #20
 800420a:	429e      	cmp	r6, r3
 800420c:	6841      	ldr	r1, [r0, #4]
 800420e:	d92f      	bls.n	8004270 <_dtoa_r+0x2d8>
 8004210:	4620      	mov	r0, r4
 8004212:	f000 fcc7 	bl	8004ba4 <_Balloc>
 8004216:	9000      	str	r0, [sp, #0]
 8004218:	2800      	cmp	r0, #0
 800421a:	d14b      	bne.n	80042b4 <_dtoa_r+0x31c>
 800421c:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <_dtoa_r+0x318>)
 800421e:	4602      	mov	r2, r0
 8004220:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004224:	e6d1      	b.n	8003fca <_dtoa_r+0x32>
 8004226:	2301      	movs	r3, #1
 8004228:	e7de      	b.n	80041e8 <_dtoa_r+0x250>
 800422a:	2300      	movs	r3, #0
 800422c:	9308      	str	r3, [sp, #32]
 800422e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004230:	eb0a 0903 	add.w	r9, sl, r3
 8004234:	f109 0301 	add.w	r3, r9, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	bfb8      	it	lt
 800423e:	2301      	movlt	r3, #1
 8004240:	e7dd      	b.n	80041fe <_dtoa_r+0x266>
 8004242:	2301      	movs	r3, #1
 8004244:	e7f2      	b.n	800422c <_dtoa_r+0x294>
 8004246:	2501      	movs	r5, #1
 8004248:	2300      	movs	r3, #0
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	9508      	str	r5, [sp, #32]
 800424e:	f04f 39ff 	mov.w	r9, #4294967295
 8004252:	2200      	movs	r2, #0
 8004254:	f8cd 9004 	str.w	r9, [sp, #4]
 8004258:	2312      	movs	r3, #18
 800425a:	9209      	str	r2, [sp, #36]	; 0x24
 800425c:	e7cf      	b.n	80041fe <_dtoa_r+0x266>
 800425e:	2301      	movs	r3, #1
 8004260:	9308      	str	r3, [sp, #32]
 8004262:	e7f4      	b.n	800424e <_dtoa_r+0x2b6>
 8004264:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004268:	f8cd 9004 	str.w	r9, [sp, #4]
 800426c:	464b      	mov	r3, r9
 800426e:	e7c6      	b.n	80041fe <_dtoa_r+0x266>
 8004270:	3101      	adds	r1, #1
 8004272:	6041      	str	r1, [r0, #4]
 8004274:	0052      	lsls	r2, r2, #1
 8004276:	e7c6      	b.n	8004206 <_dtoa_r+0x26e>
 8004278:	636f4361 	.word	0x636f4361
 800427c:	3fd287a7 	.word	0x3fd287a7
 8004280:	8b60c8b3 	.word	0x8b60c8b3
 8004284:	3fc68a28 	.word	0x3fc68a28
 8004288:	509f79fb 	.word	0x509f79fb
 800428c:	3fd34413 	.word	0x3fd34413
 8004290:	080072d9 	.word	0x080072d9
 8004294:	080072f0 	.word	0x080072f0
 8004298:	7ff00000 	.word	0x7ff00000
 800429c:	080072d5 	.word	0x080072d5
 80042a0:	080072cc 	.word	0x080072cc
 80042a4:	080072a9 	.word	0x080072a9
 80042a8:	3ff80000 	.word	0x3ff80000
 80042ac:	080073e8 	.word	0x080073e8
 80042b0:	0800734f 	.word	0x0800734f
 80042b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b6:	9a00      	ldr	r2, [sp, #0]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	9b01      	ldr	r3, [sp, #4]
 80042bc:	2b0e      	cmp	r3, #14
 80042be:	f200 80ad 	bhi.w	800441c <_dtoa_r+0x484>
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	f000 80aa 	beq.w	800441c <_dtoa_r+0x484>
 80042c8:	f1ba 0f00 	cmp.w	sl, #0
 80042cc:	dd36      	ble.n	800433c <_dtoa_r+0x3a4>
 80042ce:	4ac3      	ldr	r2, [pc, #780]	; (80045dc <_dtoa_r+0x644>)
 80042d0:	f00a 030f 	and.w	r3, sl, #15
 80042d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042d8:	ed93 7b00 	vldr	d7, [r3]
 80042dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80042e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80042e4:	eeb0 8a47 	vmov.f32	s16, s14
 80042e8:	eef0 8a67 	vmov.f32	s17, s15
 80042ec:	d016      	beq.n	800431c <_dtoa_r+0x384>
 80042ee:	4bbc      	ldr	r3, [pc, #752]	; (80045e0 <_dtoa_r+0x648>)
 80042f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042f8:	f7fc faa8 	bl	800084c <__aeabi_ddiv>
 80042fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004300:	f007 070f 	and.w	r7, r7, #15
 8004304:	2503      	movs	r5, #3
 8004306:	4eb6      	ldr	r6, [pc, #728]	; (80045e0 <_dtoa_r+0x648>)
 8004308:	b957      	cbnz	r7, 8004320 <_dtoa_r+0x388>
 800430a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800430e:	ec53 2b18 	vmov	r2, r3, d8
 8004312:	f7fc fa9b 	bl	800084c <__aeabi_ddiv>
 8004316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800431a:	e029      	b.n	8004370 <_dtoa_r+0x3d8>
 800431c:	2502      	movs	r5, #2
 800431e:	e7f2      	b.n	8004306 <_dtoa_r+0x36e>
 8004320:	07f9      	lsls	r1, r7, #31
 8004322:	d508      	bpl.n	8004336 <_dtoa_r+0x39e>
 8004324:	ec51 0b18 	vmov	r0, r1, d8
 8004328:	e9d6 2300 	ldrd	r2, r3, [r6]
 800432c:	f7fc f964 	bl	80005f8 <__aeabi_dmul>
 8004330:	ec41 0b18 	vmov	d8, r0, r1
 8004334:	3501      	adds	r5, #1
 8004336:	107f      	asrs	r7, r7, #1
 8004338:	3608      	adds	r6, #8
 800433a:	e7e5      	b.n	8004308 <_dtoa_r+0x370>
 800433c:	f000 80a6 	beq.w	800448c <_dtoa_r+0x4f4>
 8004340:	f1ca 0600 	rsb	r6, sl, #0
 8004344:	4ba5      	ldr	r3, [pc, #660]	; (80045dc <_dtoa_r+0x644>)
 8004346:	4fa6      	ldr	r7, [pc, #664]	; (80045e0 <_dtoa_r+0x648>)
 8004348:	f006 020f 	and.w	r2, r6, #15
 800434c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004358:	f7fc f94e 	bl	80005f8 <__aeabi_dmul>
 800435c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004360:	1136      	asrs	r6, r6, #4
 8004362:	2300      	movs	r3, #0
 8004364:	2502      	movs	r5, #2
 8004366:	2e00      	cmp	r6, #0
 8004368:	f040 8085 	bne.w	8004476 <_dtoa_r+0x4de>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1d2      	bne.n	8004316 <_dtoa_r+0x37e>
 8004370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 808c 	beq.w	8004490 <_dtoa_r+0x4f8>
 8004378:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800437c:	4b99      	ldr	r3, [pc, #612]	; (80045e4 <_dtoa_r+0x64c>)
 800437e:	2200      	movs	r2, #0
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f7fc fbaa 	bl	8000adc <__aeabi_dcmplt>
 8004388:	2800      	cmp	r0, #0
 800438a:	f000 8081 	beq.w	8004490 <_dtoa_r+0x4f8>
 800438e:	9b01      	ldr	r3, [sp, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d07d      	beq.n	8004490 <_dtoa_r+0x4f8>
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	dd3c      	ble.n	8004414 <_dtoa_r+0x47c>
 800439a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800439e:	9307      	str	r3, [sp, #28]
 80043a0:	2200      	movs	r2, #0
 80043a2:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <_dtoa_r+0x650>)
 80043a4:	4630      	mov	r0, r6
 80043a6:	4639      	mov	r1, r7
 80043a8:	f7fc f926 	bl	80005f8 <__aeabi_dmul>
 80043ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043b0:	3501      	adds	r5, #1
 80043b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80043b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7fc f8b2 	bl	8000524 <__aeabi_i2d>
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	f7fc f918 	bl	80005f8 <__aeabi_dmul>
 80043c8:	4b88      	ldr	r3, [pc, #544]	; (80045ec <_dtoa_r+0x654>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	f7fb ff5e 	bl	800028c <__adddf3>
 80043d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80043d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d15c      	bne.n	800449a <_dtoa_r+0x502>
 80043e0:	4b83      	ldr	r3, [pc, #524]	; (80045f0 <_dtoa_r+0x658>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fb ff4e 	bl	8000288 <__aeabi_dsub>
 80043ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043f0:	4606      	mov	r6, r0
 80043f2:	460f      	mov	r7, r1
 80043f4:	f7fc fb90 	bl	8000b18 <__aeabi_dcmpgt>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f040 8296 	bne.w	800492a <_dtoa_r+0x992>
 80043fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004402:	4630      	mov	r0, r6
 8004404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004408:	4639      	mov	r1, r7
 800440a:	f7fc fb67 	bl	8000adc <__aeabi_dcmplt>
 800440e:	2800      	cmp	r0, #0
 8004410:	f040 8288 	bne.w	8004924 <_dtoa_r+0x98c>
 8004414:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800441c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800441e:	2b00      	cmp	r3, #0
 8004420:	f2c0 8158 	blt.w	80046d4 <_dtoa_r+0x73c>
 8004424:	f1ba 0f0e 	cmp.w	sl, #14
 8004428:	f300 8154 	bgt.w	80046d4 <_dtoa_r+0x73c>
 800442c:	4b6b      	ldr	r3, [pc, #428]	; (80045dc <_dtoa_r+0x644>)
 800442e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004432:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	f280 80e3 	bge.w	8004604 <_dtoa_r+0x66c>
 800443e:	9b01      	ldr	r3, [sp, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f300 80df 	bgt.w	8004604 <_dtoa_r+0x66c>
 8004446:	f040 826d 	bne.w	8004924 <_dtoa_r+0x98c>
 800444a:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <_dtoa_r+0x658>)
 800444c:	2200      	movs	r2, #0
 800444e:	4640      	mov	r0, r8
 8004450:	4649      	mov	r1, r9
 8004452:	f7fc f8d1 	bl	80005f8 <__aeabi_dmul>
 8004456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800445a:	f7fc fb53 	bl	8000b04 <__aeabi_dcmpge>
 800445e:	9e01      	ldr	r6, [sp, #4]
 8004460:	4637      	mov	r7, r6
 8004462:	2800      	cmp	r0, #0
 8004464:	f040 8243 	bne.w	80048ee <_dtoa_r+0x956>
 8004468:	9d00      	ldr	r5, [sp, #0]
 800446a:	2331      	movs	r3, #49	; 0x31
 800446c:	f805 3b01 	strb.w	r3, [r5], #1
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	e23f      	b.n	80048f6 <_dtoa_r+0x95e>
 8004476:	07f2      	lsls	r2, r6, #31
 8004478:	d505      	bpl.n	8004486 <_dtoa_r+0x4ee>
 800447a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800447e:	f7fc f8bb 	bl	80005f8 <__aeabi_dmul>
 8004482:	3501      	adds	r5, #1
 8004484:	2301      	movs	r3, #1
 8004486:	1076      	asrs	r6, r6, #1
 8004488:	3708      	adds	r7, #8
 800448a:	e76c      	b.n	8004366 <_dtoa_r+0x3ce>
 800448c:	2502      	movs	r5, #2
 800448e:	e76f      	b.n	8004370 <_dtoa_r+0x3d8>
 8004490:	9b01      	ldr	r3, [sp, #4]
 8004492:	f8cd a01c 	str.w	sl, [sp, #28]
 8004496:	930c      	str	r3, [sp, #48]	; 0x30
 8004498:	e78d      	b.n	80043b6 <_dtoa_r+0x41e>
 800449a:	9900      	ldr	r1, [sp, #0]
 800449c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800449e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044a0:	4b4e      	ldr	r3, [pc, #312]	; (80045dc <_dtoa_r+0x644>)
 80044a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044a6:	4401      	add	r1, r0
 80044a8:	9102      	str	r1, [sp, #8]
 80044aa:	9908      	ldr	r1, [sp, #32]
 80044ac:	eeb0 8a47 	vmov.f32	s16, s14
 80044b0:	eef0 8a67 	vmov.f32	s17, s15
 80044b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044bc:	2900      	cmp	r1, #0
 80044be:	d045      	beq.n	800454c <_dtoa_r+0x5b4>
 80044c0:	494c      	ldr	r1, [pc, #304]	; (80045f4 <_dtoa_r+0x65c>)
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fc f9c2 	bl	800084c <__aeabi_ddiv>
 80044c8:	ec53 2b18 	vmov	r2, r3, d8
 80044cc:	f7fb fedc 	bl	8000288 <__aeabi_dsub>
 80044d0:	9d00      	ldr	r5, [sp, #0]
 80044d2:	ec41 0b18 	vmov	d8, r0, r1
 80044d6:	4639      	mov	r1, r7
 80044d8:	4630      	mov	r0, r6
 80044da:	f7fc fb3d 	bl	8000b58 <__aeabi_d2iz>
 80044de:	900c      	str	r0, [sp, #48]	; 0x30
 80044e0:	f7fc f820 	bl	8000524 <__aeabi_i2d>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4630      	mov	r0, r6
 80044ea:	4639      	mov	r1, r7
 80044ec:	f7fb fecc 	bl	8000288 <__aeabi_dsub>
 80044f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044f2:	3330      	adds	r3, #48	; 0x30
 80044f4:	f805 3b01 	strb.w	r3, [r5], #1
 80044f8:	ec53 2b18 	vmov	r2, r3, d8
 80044fc:	4606      	mov	r6, r0
 80044fe:	460f      	mov	r7, r1
 8004500:	f7fc faec 	bl	8000adc <__aeabi_dcmplt>
 8004504:	2800      	cmp	r0, #0
 8004506:	d165      	bne.n	80045d4 <_dtoa_r+0x63c>
 8004508:	4632      	mov	r2, r6
 800450a:	463b      	mov	r3, r7
 800450c:	4935      	ldr	r1, [pc, #212]	; (80045e4 <_dtoa_r+0x64c>)
 800450e:	2000      	movs	r0, #0
 8004510:	f7fb feba 	bl	8000288 <__aeabi_dsub>
 8004514:	ec53 2b18 	vmov	r2, r3, d8
 8004518:	f7fc fae0 	bl	8000adc <__aeabi_dcmplt>
 800451c:	2800      	cmp	r0, #0
 800451e:	f040 80b9 	bne.w	8004694 <_dtoa_r+0x6fc>
 8004522:	9b02      	ldr	r3, [sp, #8]
 8004524:	429d      	cmp	r5, r3
 8004526:	f43f af75 	beq.w	8004414 <_dtoa_r+0x47c>
 800452a:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <_dtoa_r+0x650>)
 800452c:	ec51 0b18 	vmov	r0, r1, d8
 8004530:	2200      	movs	r2, #0
 8004532:	f7fc f861 	bl	80005f8 <__aeabi_dmul>
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <_dtoa_r+0x650>)
 8004538:	ec41 0b18 	vmov	d8, r0, r1
 800453c:	2200      	movs	r2, #0
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	f7fc f859 	bl	80005f8 <__aeabi_dmul>
 8004546:	4606      	mov	r6, r0
 8004548:	460f      	mov	r7, r1
 800454a:	e7c4      	b.n	80044d6 <_dtoa_r+0x53e>
 800454c:	ec51 0b17 	vmov	r0, r1, d7
 8004550:	f7fc f852 	bl	80005f8 <__aeabi_dmul>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	9d00      	ldr	r5, [sp, #0]
 8004558:	930c      	str	r3, [sp, #48]	; 0x30
 800455a:	ec41 0b18 	vmov	d8, r0, r1
 800455e:	4639      	mov	r1, r7
 8004560:	4630      	mov	r0, r6
 8004562:	f7fc faf9 	bl	8000b58 <__aeabi_d2iz>
 8004566:	9011      	str	r0, [sp, #68]	; 0x44
 8004568:	f7fb ffdc 	bl	8000524 <__aeabi_i2d>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fb fe88 	bl	8000288 <__aeabi_dsub>
 8004578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800457a:	3330      	adds	r3, #48	; 0x30
 800457c:	f805 3b01 	strb.w	r3, [r5], #1
 8004580:	9b02      	ldr	r3, [sp, #8]
 8004582:	429d      	cmp	r5, r3
 8004584:	4606      	mov	r6, r0
 8004586:	460f      	mov	r7, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	d134      	bne.n	80045f8 <_dtoa_r+0x660>
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <_dtoa_r+0x65c>)
 8004590:	ec51 0b18 	vmov	r0, r1, d8
 8004594:	f7fb fe7a 	bl	800028c <__adddf3>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4630      	mov	r0, r6
 800459e:	4639      	mov	r1, r7
 80045a0:	f7fc faba 	bl	8000b18 <__aeabi_dcmpgt>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d175      	bne.n	8004694 <_dtoa_r+0x6fc>
 80045a8:	ec53 2b18 	vmov	r2, r3, d8
 80045ac:	4911      	ldr	r1, [pc, #68]	; (80045f4 <_dtoa_r+0x65c>)
 80045ae:	2000      	movs	r0, #0
 80045b0:	f7fb fe6a 	bl	8000288 <__aeabi_dsub>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4630      	mov	r0, r6
 80045ba:	4639      	mov	r1, r7
 80045bc:	f7fc fa8e 	bl	8000adc <__aeabi_dcmplt>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	f43f af27 	beq.w	8004414 <_dtoa_r+0x47c>
 80045c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045c8:	1e6b      	subs	r3, r5, #1
 80045ca:	930c      	str	r3, [sp, #48]	; 0x30
 80045cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d0f8      	beq.n	80045c6 <_dtoa_r+0x62e>
 80045d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80045d8:	e04a      	b.n	8004670 <_dtoa_r+0x6d8>
 80045da:	bf00      	nop
 80045dc:	080073e8 	.word	0x080073e8
 80045e0:	080073c0 	.word	0x080073c0
 80045e4:	3ff00000 	.word	0x3ff00000
 80045e8:	40240000 	.word	0x40240000
 80045ec:	401c0000 	.word	0x401c0000
 80045f0:	40140000 	.word	0x40140000
 80045f4:	3fe00000 	.word	0x3fe00000
 80045f8:	4baf      	ldr	r3, [pc, #700]	; (80048b8 <_dtoa_r+0x920>)
 80045fa:	f7fb fffd 	bl	80005f8 <__aeabi_dmul>
 80045fe:	4606      	mov	r6, r0
 8004600:	460f      	mov	r7, r1
 8004602:	e7ac      	b.n	800455e <_dtoa_r+0x5c6>
 8004604:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004608:	9d00      	ldr	r5, [sp, #0]
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	4630      	mov	r0, r6
 8004610:	4639      	mov	r1, r7
 8004612:	f7fc f91b 	bl	800084c <__aeabi_ddiv>
 8004616:	f7fc fa9f 	bl	8000b58 <__aeabi_d2iz>
 800461a:	9002      	str	r0, [sp, #8]
 800461c:	f7fb ff82 	bl	8000524 <__aeabi_i2d>
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	f7fb ffe8 	bl	80005f8 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fb fe2a 	bl	8000288 <__aeabi_dsub>
 8004634:	9e02      	ldr	r6, [sp, #8]
 8004636:	9f01      	ldr	r7, [sp, #4]
 8004638:	3630      	adds	r6, #48	; 0x30
 800463a:	f805 6b01 	strb.w	r6, [r5], #1
 800463e:	9e00      	ldr	r6, [sp, #0]
 8004640:	1bae      	subs	r6, r5, r6
 8004642:	42b7      	cmp	r7, r6
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	d137      	bne.n	80046ba <_dtoa_r+0x722>
 800464a:	f7fb fe1f 	bl	800028c <__adddf3>
 800464e:	4642      	mov	r2, r8
 8004650:	464b      	mov	r3, r9
 8004652:	4606      	mov	r6, r0
 8004654:	460f      	mov	r7, r1
 8004656:	f7fc fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800465a:	b9c8      	cbnz	r0, 8004690 <_dtoa_r+0x6f8>
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	4630      	mov	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f7fc fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8004668:	b110      	cbz	r0, 8004670 <_dtoa_r+0x6d8>
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	07d9      	lsls	r1, r3, #31
 800466e:	d40f      	bmi.n	8004690 <_dtoa_r+0x6f8>
 8004670:	4620      	mov	r0, r4
 8004672:	4659      	mov	r1, fp
 8004674:	f000 fad6 	bl	8004c24 <_Bfree>
 8004678:	2300      	movs	r3, #0
 800467a:	702b      	strb	r3, [r5, #0]
 800467c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800467e:	f10a 0001 	add.w	r0, sl, #1
 8004682:	6018      	str	r0, [r3, #0]
 8004684:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004686:	2b00      	cmp	r3, #0
 8004688:	f43f acd8 	beq.w	800403c <_dtoa_r+0xa4>
 800468c:	601d      	str	r5, [r3, #0]
 800468e:	e4d5      	b.n	800403c <_dtoa_r+0xa4>
 8004690:	f8cd a01c 	str.w	sl, [sp, #28]
 8004694:	462b      	mov	r3, r5
 8004696:	461d      	mov	r5, r3
 8004698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800469c:	2a39      	cmp	r2, #57	; 0x39
 800469e:	d108      	bne.n	80046b2 <_dtoa_r+0x71a>
 80046a0:	9a00      	ldr	r2, [sp, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d1f7      	bne.n	8004696 <_dtoa_r+0x6fe>
 80046a6:	9a07      	ldr	r2, [sp, #28]
 80046a8:	9900      	ldr	r1, [sp, #0]
 80046aa:	3201      	adds	r2, #1
 80046ac:	9207      	str	r2, [sp, #28]
 80046ae:	2230      	movs	r2, #48	; 0x30
 80046b0:	700a      	strb	r2, [r1, #0]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	3201      	adds	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e78c      	b.n	80045d4 <_dtoa_r+0x63c>
 80046ba:	4b7f      	ldr	r3, [pc, #508]	; (80048b8 <_dtoa_r+0x920>)
 80046bc:	2200      	movs	r2, #0
 80046be:	f7fb ff9b 	bl	80005f8 <__aeabi_dmul>
 80046c2:	2200      	movs	r2, #0
 80046c4:	2300      	movs	r3, #0
 80046c6:	4606      	mov	r6, r0
 80046c8:	460f      	mov	r7, r1
 80046ca:	f7fc f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d09b      	beq.n	800460a <_dtoa_r+0x672>
 80046d2:	e7cd      	b.n	8004670 <_dtoa_r+0x6d8>
 80046d4:	9a08      	ldr	r2, [sp, #32]
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	f000 80c4 	beq.w	8004864 <_dtoa_r+0x8cc>
 80046dc:	9a05      	ldr	r2, [sp, #20]
 80046de:	2a01      	cmp	r2, #1
 80046e0:	f300 80a8 	bgt.w	8004834 <_dtoa_r+0x89c>
 80046e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	f000 80a0 	beq.w	800482c <_dtoa_r+0x894>
 80046ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046f0:	9e06      	ldr	r6, [sp, #24]
 80046f2:	4645      	mov	r5, r8
 80046f4:	9a04      	ldr	r2, [sp, #16]
 80046f6:	2101      	movs	r1, #1
 80046f8:	441a      	add	r2, r3
 80046fa:	4620      	mov	r0, r4
 80046fc:	4498      	add	r8, r3
 80046fe:	9204      	str	r2, [sp, #16]
 8004700:	f000 fb4c 	bl	8004d9c <__i2b>
 8004704:	4607      	mov	r7, r0
 8004706:	2d00      	cmp	r5, #0
 8004708:	dd0b      	ble.n	8004722 <_dtoa_r+0x78a>
 800470a:	9b04      	ldr	r3, [sp, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	dd08      	ble.n	8004722 <_dtoa_r+0x78a>
 8004710:	42ab      	cmp	r3, r5
 8004712:	9a04      	ldr	r2, [sp, #16]
 8004714:	bfa8      	it	ge
 8004716:	462b      	movge	r3, r5
 8004718:	eba8 0803 	sub.w	r8, r8, r3
 800471c:	1aed      	subs	r5, r5, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	9b06      	ldr	r3, [sp, #24]
 8004724:	b1fb      	cbz	r3, 8004766 <_dtoa_r+0x7ce>
 8004726:	9b08      	ldr	r3, [sp, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 809f 	beq.w	800486c <_dtoa_r+0x8d4>
 800472e:	2e00      	cmp	r6, #0
 8004730:	dd11      	ble.n	8004756 <_dtoa_r+0x7be>
 8004732:	4639      	mov	r1, r7
 8004734:	4632      	mov	r2, r6
 8004736:	4620      	mov	r0, r4
 8004738:	f000 fbec 	bl	8004f14 <__pow5mult>
 800473c:	465a      	mov	r2, fp
 800473e:	4601      	mov	r1, r0
 8004740:	4607      	mov	r7, r0
 8004742:	4620      	mov	r0, r4
 8004744:	f000 fb40 	bl	8004dc8 <__multiply>
 8004748:	4659      	mov	r1, fp
 800474a:	9007      	str	r0, [sp, #28]
 800474c:	4620      	mov	r0, r4
 800474e:	f000 fa69 	bl	8004c24 <_Bfree>
 8004752:	9b07      	ldr	r3, [sp, #28]
 8004754:	469b      	mov	fp, r3
 8004756:	9b06      	ldr	r3, [sp, #24]
 8004758:	1b9a      	subs	r2, r3, r6
 800475a:	d004      	beq.n	8004766 <_dtoa_r+0x7ce>
 800475c:	4659      	mov	r1, fp
 800475e:	4620      	mov	r0, r4
 8004760:	f000 fbd8 	bl	8004f14 <__pow5mult>
 8004764:	4683      	mov	fp, r0
 8004766:	2101      	movs	r1, #1
 8004768:	4620      	mov	r0, r4
 800476a:	f000 fb17 	bl	8004d9c <__i2b>
 800476e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004770:	2b00      	cmp	r3, #0
 8004772:	4606      	mov	r6, r0
 8004774:	dd7c      	ble.n	8004870 <_dtoa_r+0x8d8>
 8004776:	461a      	mov	r2, r3
 8004778:	4601      	mov	r1, r0
 800477a:	4620      	mov	r0, r4
 800477c:	f000 fbca 	bl	8004f14 <__pow5mult>
 8004780:	9b05      	ldr	r3, [sp, #20]
 8004782:	2b01      	cmp	r3, #1
 8004784:	4606      	mov	r6, r0
 8004786:	dd76      	ble.n	8004876 <_dtoa_r+0x8de>
 8004788:	2300      	movs	r3, #0
 800478a:	9306      	str	r3, [sp, #24]
 800478c:	6933      	ldr	r3, [r6, #16]
 800478e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004792:	6918      	ldr	r0, [r3, #16]
 8004794:	f000 fab2 	bl	8004cfc <__hi0bits>
 8004798:	f1c0 0020 	rsb	r0, r0, #32
 800479c:	9b04      	ldr	r3, [sp, #16]
 800479e:	4418      	add	r0, r3
 80047a0:	f010 001f 	ands.w	r0, r0, #31
 80047a4:	f000 8086 	beq.w	80048b4 <_dtoa_r+0x91c>
 80047a8:	f1c0 0320 	rsb	r3, r0, #32
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	dd7f      	ble.n	80048b0 <_dtoa_r+0x918>
 80047b0:	f1c0 001c 	rsb	r0, r0, #28
 80047b4:	9b04      	ldr	r3, [sp, #16]
 80047b6:	4403      	add	r3, r0
 80047b8:	4480      	add	r8, r0
 80047ba:	4405      	add	r5, r0
 80047bc:	9304      	str	r3, [sp, #16]
 80047be:	f1b8 0f00 	cmp.w	r8, #0
 80047c2:	dd05      	ble.n	80047d0 <_dtoa_r+0x838>
 80047c4:	4659      	mov	r1, fp
 80047c6:	4642      	mov	r2, r8
 80047c8:	4620      	mov	r0, r4
 80047ca:	f000 fbfd 	bl	8004fc8 <__lshift>
 80047ce:	4683      	mov	fp, r0
 80047d0:	9b04      	ldr	r3, [sp, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dd05      	ble.n	80047e2 <_dtoa_r+0x84a>
 80047d6:	4631      	mov	r1, r6
 80047d8:	461a      	mov	r2, r3
 80047da:	4620      	mov	r0, r4
 80047dc:	f000 fbf4 	bl	8004fc8 <__lshift>
 80047e0:	4606      	mov	r6, r0
 80047e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d069      	beq.n	80048bc <_dtoa_r+0x924>
 80047e8:	4631      	mov	r1, r6
 80047ea:	4658      	mov	r0, fp
 80047ec:	f000 fc58 	bl	80050a0 <__mcmp>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	da63      	bge.n	80048bc <_dtoa_r+0x924>
 80047f4:	2300      	movs	r3, #0
 80047f6:	4659      	mov	r1, fp
 80047f8:	220a      	movs	r2, #10
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fa34 	bl	8004c68 <__multadd>
 8004800:	9b08      	ldr	r3, [sp, #32]
 8004802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004806:	4683      	mov	fp, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 818f 	beq.w	8004b2c <_dtoa_r+0xb94>
 800480e:	4639      	mov	r1, r7
 8004810:	2300      	movs	r3, #0
 8004812:	220a      	movs	r2, #10
 8004814:	4620      	mov	r0, r4
 8004816:	f000 fa27 	bl	8004c68 <__multadd>
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	4607      	mov	r7, r0
 8004820:	f300 808e 	bgt.w	8004940 <_dtoa_r+0x9a8>
 8004824:	9b05      	ldr	r3, [sp, #20]
 8004826:	2b02      	cmp	r3, #2
 8004828:	dc50      	bgt.n	80048cc <_dtoa_r+0x934>
 800482a:	e089      	b.n	8004940 <_dtoa_r+0x9a8>
 800482c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800482e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004832:	e75d      	b.n	80046f0 <_dtoa_r+0x758>
 8004834:	9b01      	ldr	r3, [sp, #4]
 8004836:	1e5e      	subs	r6, r3, #1
 8004838:	9b06      	ldr	r3, [sp, #24]
 800483a:	42b3      	cmp	r3, r6
 800483c:	bfbf      	itttt	lt
 800483e:	9b06      	ldrlt	r3, [sp, #24]
 8004840:	9606      	strlt	r6, [sp, #24]
 8004842:	1af2      	sublt	r2, r6, r3
 8004844:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004846:	bfb6      	itet	lt
 8004848:	189b      	addlt	r3, r3, r2
 800484a:	1b9e      	subge	r6, r3, r6
 800484c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800484e:	9b01      	ldr	r3, [sp, #4]
 8004850:	bfb8      	it	lt
 8004852:	2600      	movlt	r6, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	bfb5      	itete	lt
 8004858:	eba8 0503 	sublt.w	r5, r8, r3
 800485c:	9b01      	ldrge	r3, [sp, #4]
 800485e:	2300      	movlt	r3, #0
 8004860:	4645      	movge	r5, r8
 8004862:	e747      	b.n	80046f4 <_dtoa_r+0x75c>
 8004864:	9e06      	ldr	r6, [sp, #24]
 8004866:	9f08      	ldr	r7, [sp, #32]
 8004868:	4645      	mov	r5, r8
 800486a:	e74c      	b.n	8004706 <_dtoa_r+0x76e>
 800486c:	9a06      	ldr	r2, [sp, #24]
 800486e:	e775      	b.n	800475c <_dtoa_r+0x7c4>
 8004870:	9b05      	ldr	r3, [sp, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	dc18      	bgt.n	80048a8 <_dtoa_r+0x910>
 8004876:	9b02      	ldr	r3, [sp, #8]
 8004878:	b9b3      	cbnz	r3, 80048a8 <_dtoa_r+0x910>
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004880:	b9a3      	cbnz	r3, 80048ac <_dtoa_r+0x914>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004888:	0d1b      	lsrs	r3, r3, #20
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	b12b      	cbz	r3, 800489a <_dtoa_r+0x902>
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	f108 0801 	add.w	r8, r8, #1
 8004898:	2301      	movs	r3, #1
 800489a:	9306      	str	r3, [sp, #24]
 800489c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f47f af74 	bne.w	800478c <_dtoa_r+0x7f4>
 80048a4:	2001      	movs	r0, #1
 80048a6:	e779      	b.n	800479c <_dtoa_r+0x804>
 80048a8:	2300      	movs	r3, #0
 80048aa:	e7f6      	b.n	800489a <_dtoa_r+0x902>
 80048ac:	9b02      	ldr	r3, [sp, #8]
 80048ae:	e7f4      	b.n	800489a <_dtoa_r+0x902>
 80048b0:	d085      	beq.n	80047be <_dtoa_r+0x826>
 80048b2:	4618      	mov	r0, r3
 80048b4:	301c      	adds	r0, #28
 80048b6:	e77d      	b.n	80047b4 <_dtoa_r+0x81c>
 80048b8:	40240000 	.word	0x40240000
 80048bc:	9b01      	ldr	r3, [sp, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dc38      	bgt.n	8004934 <_dtoa_r+0x99c>
 80048c2:	9b05      	ldr	r3, [sp, #20]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	dd35      	ble.n	8004934 <_dtoa_r+0x99c>
 80048c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80048cc:	f1b9 0f00 	cmp.w	r9, #0
 80048d0:	d10d      	bne.n	80048ee <_dtoa_r+0x956>
 80048d2:	4631      	mov	r1, r6
 80048d4:	464b      	mov	r3, r9
 80048d6:	2205      	movs	r2, #5
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 f9c5 	bl	8004c68 <__multadd>
 80048de:	4601      	mov	r1, r0
 80048e0:	4606      	mov	r6, r0
 80048e2:	4658      	mov	r0, fp
 80048e4:	f000 fbdc 	bl	80050a0 <__mcmp>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f73f adbd 	bgt.w	8004468 <_dtoa_r+0x4d0>
 80048ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f0:	9d00      	ldr	r5, [sp, #0]
 80048f2:	ea6f 0a03 	mvn.w	sl, r3
 80048f6:	f04f 0800 	mov.w	r8, #0
 80048fa:	4631      	mov	r1, r6
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 f991 	bl	8004c24 <_Bfree>
 8004902:	2f00      	cmp	r7, #0
 8004904:	f43f aeb4 	beq.w	8004670 <_dtoa_r+0x6d8>
 8004908:	f1b8 0f00 	cmp.w	r8, #0
 800490c:	d005      	beq.n	800491a <_dtoa_r+0x982>
 800490e:	45b8      	cmp	r8, r7
 8004910:	d003      	beq.n	800491a <_dtoa_r+0x982>
 8004912:	4641      	mov	r1, r8
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f985 	bl	8004c24 <_Bfree>
 800491a:	4639      	mov	r1, r7
 800491c:	4620      	mov	r0, r4
 800491e:	f000 f981 	bl	8004c24 <_Bfree>
 8004922:	e6a5      	b.n	8004670 <_dtoa_r+0x6d8>
 8004924:	2600      	movs	r6, #0
 8004926:	4637      	mov	r7, r6
 8004928:	e7e1      	b.n	80048ee <_dtoa_r+0x956>
 800492a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800492c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004930:	4637      	mov	r7, r6
 8004932:	e599      	b.n	8004468 <_dtoa_r+0x4d0>
 8004934:	9b08      	ldr	r3, [sp, #32]
 8004936:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80fd 	beq.w	8004b3a <_dtoa_r+0xba2>
 8004940:	2d00      	cmp	r5, #0
 8004942:	dd05      	ble.n	8004950 <_dtoa_r+0x9b8>
 8004944:	4639      	mov	r1, r7
 8004946:	462a      	mov	r2, r5
 8004948:	4620      	mov	r0, r4
 800494a:	f000 fb3d 	bl	8004fc8 <__lshift>
 800494e:	4607      	mov	r7, r0
 8004950:	9b06      	ldr	r3, [sp, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d05c      	beq.n	8004a10 <_dtoa_r+0xa78>
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f923 	bl	8004ba4 <_Balloc>
 800495e:	4605      	mov	r5, r0
 8004960:	b928      	cbnz	r0, 800496e <_dtoa_r+0x9d6>
 8004962:	4b80      	ldr	r3, [pc, #512]	; (8004b64 <_dtoa_r+0xbcc>)
 8004964:	4602      	mov	r2, r0
 8004966:	f240 21ea 	movw	r1, #746	; 0x2ea
 800496a:	f7ff bb2e 	b.w	8003fca <_dtoa_r+0x32>
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	3202      	adds	r2, #2
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	f107 010c 	add.w	r1, r7, #12
 8004978:	300c      	adds	r0, #12
 800497a:	f000 f905 	bl	8004b88 <memcpy>
 800497e:	2201      	movs	r2, #1
 8004980:	4629      	mov	r1, r5
 8004982:	4620      	mov	r0, r4
 8004984:	f000 fb20 	bl	8004fc8 <__lshift>
 8004988:	9b00      	ldr	r3, [sp, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	9b00      	ldr	r3, [sp, #0]
 8004990:	444b      	add	r3, r9
 8004992:	9307      	str	r3, [sp, #28]
 8004994:	9b02      	ldr	r3, [sp, #8]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	46b8      	mov	r8, r7
 800499c:	9306      	str	r3, [sp, #24]
 800499e:	4607      	mov	r7, r0
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	4631      	mov	r1, r6
 80049a4:	3b01      	subs	r3, #1
 80049a6:	4658      	mov	r0, fp
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	f7ff fa69 	bl	8003e80 <quorem>
 80049ae:	4603      	mov	r3, r0
 80049b0:	3330      	adds	r3, #48	; 0x30
 80049b2:	9004      	str	r0, [sp, #16]
 80049b4:	4641      	mov	r1, r8
 80049b6:	4658      	mov	r0, fp
 80049b8:	9308      	str	r3, [sp, #32]
 80049ba:	f000 fb71 	bl	80050a0 <__mcmp>
 80049be:	463a      	mov	r2, r7
 80049c0:	4681      	mov	r9, r0
 80049c2:	4631      	mov	r1, r6
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 fb87 	bl	80050d8 <__mdiff>
 80049ca:	68c2      	ldr	r2, [r0, #12]
 80049cc:	9b08      	ldr	r3, [sp, #32]
 80049ce:	4605      	mov	r5, r0
 80049d0:	bb02      	cbnz	r2, 8004a14 <_dtoa_r+0xa7c>
 80049d2:	4601      	mov	r1, r0
 80049d4:	4658      	mov	r0, fp
 80049d6:	f000 fb63 	bl	80050a0 <__mcmp>
 80049da:	9b08      	ldr	r3, [sp, #32]
 80049dc:	4602      	mov	r2, r0
 80049de:	4629      	mov	r1, r5
 80049e0:	4620      	mov	r0, r4
 80049e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80049e6:	f000 f91d 	bl	8004c24 <_Bfree>
 80049ea:	9b05      	ldr	r3, [sp, #20]
 80049ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ee:	9d01      	ldr	r5, [sp, #4]
 80049f0:	ea43 0102 	orr.w	r1, r3, r2
 80049f4:	9b06      	ldr	r3, [sp, #24]
 80049f6:	430b      	orrs	r3, r1
 80049f8:	9b08      	ldr	r3, [sp, #32]
 80049fa:	d10d      	bne.n	8004a18 <_dtoa_r+0xa80>
 80049fc:	2b39      	cmp	r3, #57	; 0x39
 80049fe:	d029      	beq.n	8004a54 <_dtoa_r+0xabc>
 8004a00:	f1b9 0f00 	cmp.w	r9, #0
 8004a04:	dd01      	ble.n	8004a0a <_dtoa_r+0xa72>
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	3331      	adds	r3, #49	; 0x31
 8004a0a:	9a02      	ldr	r2, [sp, #8]
 8004a0c:	7013      	strb	r3, [r2, #0]
 8004a0e:	e774      	b.n	80048fa <_dtoa_r+0x962>
 8004a10:	4638      	mov	r0, r7
 8004a12:	e7b9      	b.n	8004988 <_dtoa_r+0x9f0>
 8004a14:	2201      	movs	r2, #1
 8004a16:	e7e2      	b.n	80049de <_dtoa_r+0xa46>
 8004a18:	f1b9 0f00 	cmp.w	r9, #0
 8004a1c:	db06      	blt.n	8004a2c <_dtoa_r+0xa94>
 8004a1e:	9905      	ldr	r1, [sp, #20]
 8004a20:	ea41 0909 	orr.w	r9, r1, r9
 8004a24:	9906      	ldr	r1, [sp, #24]
 8004a26:	ea59 0101 	orrs.w	r1, r9, r1
 8004a2a:	d120      	bne.n	8004a6e <_dtoa_r+0xad6>
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	ddec      	ble.n	8004a0a <_dtoa_r+0xa72>
 8004a30:	4659      	mov	r1, fp
 8004a32:	2201      	movs	r2, #1
 8004a34:	4620      	mov	r0, r4
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	f000 fac6 	bl	8004fc8 <__lshift>
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4683      	mov	fp, r0
 8004a40:	f000 fb2e 	bl	80050a0 <__mcmp>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	9b01      	ldr	r3, [sp, #4]
 8004a48:	dc02      	bgt.n	8004a50 <_dtoa_r+0xab8>
 8004a4a:	d1de      	bne.n	8004a0a <_dtoa_r+0xa72>
 8004a4c:	07da      	lsls	r2, r3, #31
 8004a4e:	d5dc      	bpl.n	8004a0a <_dtoa_r+0xa72>
 8004a50:	2b39      	cmp	r3, #57	; 0x39
 8004a52:	d1d8      	bne.n	8004a06 <_dtoa_r+0xa6e>
 8004a54:	9a02      	ldr	r2, [sp, #8]
 8004a56:	2339      	movs	r3, #57	; 0x39
 8004a58:	7013      	strb	r3, [r2, #0]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	461d      	mov	r5, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a64:	2a39      	cmp	r2, #57	; 0x39
 8004a66:	d050      	beq.n	8004b0a <_dtoa_r+0xb72>
 8004a68:	3201      	adds	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e745      	b.n	80048fa <_dtoa_r+0x962>
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	dd03      	ble.n	8004a7a <_dtoa_r+0xae2>
 8004a72:	2b39      	cmp	r3, #57	; 0x39
 8004a74:	d0ee      	beq.n	8004a54 <_dtoa_r+0xabc>
 8004a76:	3301      	adds	r3, #1
 8004a78:	e7c7      	b.n	8004a0a <_dtoa_r+0xa72>
 8004a7a:	9a01      	ldr	r2, [sp, #4]
 8004a7c:	9907      	ldr	r1, [sp, #28]
 8004a7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004a82:	428a      	cmp	r2, r1
 8004a84:	d02a      	beq.n	8004adc <_dtoa_r+0xb44>
 8004a86:	4659      	mov	r1, fp
 8004a88:	2300      	movs	r3, #0
 8004a8a:	220a      	movs	r2, #10
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f8eb 	bl	8004c68 <__multadd>
 8004a92:	45b8      	cmp	r8, r7
 8004a94:	4683      	mov	fp, r0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f04f 020a 	mov.w	r2, #10
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	d107      	bne.n	8004ab4 <_dtoa_r+0xb1c>
 8004aa4:	f000 f8e0 	bl	8004c68 <__multadd>
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	4607      	mov	r7, r0
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	e775      	b.n	80049a0 <_dtoa_r+0xa08>
 8004ab4:	f000 f8d8 	bl	8004c68 <__multadd>
 8004ab8:	4639      	mov	r1, r7
 8004aba:	4680      	mov	r8, r0
 8004abc:	2300      	movs	r3, #0
 8004abe:	220a      	movs	r2, #10
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f8d1 	bl	8004c68 <__multadd>
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	e7f0      	b.n	8004aac <_dtoa_r+0xb14>
 8004aca:	f1b9 0f00 	cmp.w	r9, #0
 8004ace:	9a00      	ldr	r2, [sp, #0]
 8004ad0:	bfcc      	ite	gt
 8004ad2:	464d      	movgt	r5, r9
 8004ad4:	2501      	movle	r5, #1
 8004ad6:	4415      	add	r5, r2
 8004ad8:	f04f 0800 	mov.w	r8, #0
 8004adc:	4659      	mov	r1, fp
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	f000 fa70 	bl	8004fc8 <__lshift>
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4683      	mov	fp, r0
 8004aec:	f000 fad8 	bl	80050a0 <__mcmp>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	dcb2      	bgt.n	8004a5a <_dtoa_r+0xac2>
 8004af4:	d102      	bne.n	8004afc <_dtoa_r+0xb64>
 8004af6:	9b01      	ldr	r3, [sp, #4]
 8004af8:	07db      	lsls	r3, r3, #31
 8004afa:	d4ae      	bmi.n	8004a5a <_dtoa_r+0xac2>
 8004afc:	462b      	mov	r3, r5
 8004afe:	461d      	mov	r5, r3
 8004b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b04:	2a30      	cmp	r2, #48	; 0x30
 8004b06:	d0fa      	beq.n	8004afe <_dtoa_r+0xb66>
 8004b08:	e6f7      	b.n	80048fa <_dtoa_r+0x962>
 8004b0a:	9a00      	ldr	r2, [sp, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1a5      	bne.n	8004a5c <_dtoa_r+0xac4>
 8004b10:	f10a 0a01 	add.w	sl, sl, #1
 8004b14:	2331      	movs	r3, #49	; 0x31
 8004b16:	e779      	b.n	8004a0c <_dtoa_r+0xa74>
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <_dtoa_r+0xbd0>)
 8004b1a:	f7ff baaf 	b.w	800407c <_dtoa_r+0xe4>
 8004b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f47f aa86 	bne.w	8004032 <_dtoa_r+0x9a>
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <_dtoa_r+0xbd4>)
 8004b28:	f7ff baa8 	b.w	800407c <_dtoa_r+0xe4>
 8004b2c:	f1b9 0f00 	cmp.w	r9, #0
 8004b30:	dc03      	bgt.n	8004b3a <_dtoa_r+0xba2>
 8004b32:	9b05      	ldr	r3, [sp, #20]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	f73f aec9 	bgt.w	80048cc <_dtoa_r+0x934>
 8004b3a:	9d00      	ldr	r5, [sp, #0]
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4658      	mov	r0, fp
 8004b40:	f7ff f99e 	bl	8003e80 <quorem>
 8004b44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004b48:	f805 3b01 	strb.w	r3, [r5], #1
 8004b4c:	9a00      	ldr	r2, [sp, #0]
 8004b4e:	1aaa      	subs	r2, r5, r2
 8004b50:	4591      	cmp	r9, r2
 8004b52:	ddba      	ble.n	8004aca <_dtoa_r+0xb32>
 8004b54:	4659      	mov	r1, fp
 8004b56:	2300      	movs	r3, #0
 8004b58:	220a      	movs	r2, #10
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 f884 	bl	8004c68 <__multadd>
 8004b60:	4683      	mov	fp, r0
 8004b62:	e7eb      	b.n	8004b3c <_dtoa_r+0xba4>
 8004b64:	0800734f 	.word	0x0800734f
 8004b68:	080072a8 	.word	0x080072a8
 8004b6c:	080072cc 	.word	0x080072cc

08004b70 <_localeconv_r>:
 8004b70:	4800      	ldr	r0, [pc, #0]	; (8004b74 <_localeconv_r+0x4>)
 8004b72:	4770      	bx	lr
 8004b74:	2000015c 	.word	0x2000015c

08004b78 <malloc>:
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <malloc+0xc>)
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	f000 bbef 	b.w	8005360 <_malloc_r>
 8004b82:	bf00      	nop
 8004b84:	20000008 	.word	0x20000008

08004b88 <memcpy>:
 8004b88:	440a      	add	r2, r1
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b90:	d100      	bne.n	8004b94 <memcpy+0xc>
 8004b92:	4770      	bx	lr
 8004b94:	b510      	push	{r4, lr}
 8004b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	d1f9      	bne.n	8004b96 <memcpy+0xe>
 8004ba2:	bd10      	pop	{r4, pc}

08004ba4 <_Balloc>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ba8:	4604      	mov	r4, r0
 8004baa:	460d      	mov	r5, r1
 8004bac:	b976      	cbnz	r6, 8004bcc <_Balloc+0x28>
 8004bae:	2010      	movs	r0, #16
 8004bb0:	f7ff ffe2 	bl	8004b78 <malloc>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6260      	str	r0, [r4, #36]	; 0x24
 8004bb8:	b920      	cbnz	r0, 8004bc4 <_Balloc+0x20>
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <_Balloc+0x78>)
 8004bbc:	4818      	ldr	r0, [pc, #96]	; (8004c20 <_Balloc+0x7c>)
 8004bbe:	2166      	movs	r1, #102	; 0x66
 8004bc0:	f000 fd94 	bl	80056ec <__assert_func>
 8004bc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bc8:	6006      	str	r6, [r0, #0]
 8004bca:	60c6      	str	r6, [r0, #12]
 8004bcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004bce:	68f3      	ldr	r3, [r6, #12]
 8004bd0:	b183      	cbz	r3, 8004bf4 <_Balloc+0x50>
 8004bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bda:	b9b8      	cbnz	r0, 8004c0c <_Balloc+0x68>
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f605 	lsl.w	r6, r1, r5
 8004be2:	1d72      	adds	r2, r6, #5
 8004be4:	0092      	lsls	r2, r2, #2
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 fb5a 	bl	80052a0 <_calloc_r>
 8004bec:	b160      	cbz	r0, 8004c08 <_Balloc+0x64>
 8004bee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004bf2:	e00e      	b.n	8004c12 <_Balloc+0x6e>
 8004bf4:	2221      	movs	r2, #33	; 0x21
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fb51 	bl	80052a0 <_calloc_r>
 8004bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c00:	60f0      	str	r0, [r6, #12]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e4      	bne.n	8004bd2 <_Balloc+0x2e>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
 8004c0c:	6802      	ldr	r2, [r0, #0]
 8004c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c12:	2300      	movs	r3, #0
 8004c14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c18:	e7f7      	b.n	8004c0a <_Balloc+0x66>
 8004c1a:	bf00      	nop
 8004c1c:	080072d9 	.word	0x080072d9
 8004c20:	08007360 	.word	0x08007360

08004c24 <_Bfree>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004c28:	4605      	mov	r5, r0
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	b976      	cbnz	r6, 8004c4c <_Bfree+0x28>
 8004c2e:	2010      	movs	r0, #16
 8004c30:	f7ff ffa2 	bl	8004b78 <malloc>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6268      	str	r0, [r5, #36]	; 0x24
 8004c38:	b920      	cbnz	r0, 8004c44 <_Bfree+0x20>
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <_Bfree+0x3c>)
 8004c3c:	4809      	ldr	r0, [pc, #36]	; (8004c64 <_Bfree+0x40>)
 8004c3e:	218a      	movs	r1, #138	; 0x8a
 8004c40:	f000 fd54 	bl	80056ec <__assert_func>
 8004c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c48:	6006      	str	r6, [r0, #0]
 8004c4a:	60c6      	str	r6, [r0, #12]
 8004c4c:	b13c      	cbz	r4, 8004c5e <_Bfree+0x3a>
 8004c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c50:	6862      	ldr	r2, [r4, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c58:	6021      	str	r1, [r4, #0]
 8004c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	080072d9 	.word	0x080072d9
 8004c64:	08007360 	.word	0x08007360

08004c68 <__multadd>:
 8004c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6c:	690e      	ldr	r6, [r1, #16]
 8004c6e:	4607      	mov	r7, r0
 8004c70:	4698      	mov	r8, r3
 8004c72:	460c      	mov	r4, r1
 8004c74:	f101 0014 	add.w	r0, r1, #20
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6805      	ldr	r5, [r0, #0]
 8004c7c:	b2a9      	uxth	r1, r5
 8004c7e:	fb02 8101 	mla	r1, r2, r1, r8
 8004c82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004c86:	0c2d      	lsrs	r5, r5, #16
 8004c88:	fb02 c505 	mla	r5, r2, r5, ip
 8004c8c:	b289      	uxth	r1, r1
 8004c8e:	3301      	adds	r3, #1
 8004c90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004c94:	429e      	cmp	r6, r3
 8004c96:	f840 1b04 	str.w	r1, [r0], #4
 8004c9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004c9e:	dcec      	bgt.n	8004c7a <__multadd+0x12>
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	d022      	beq.n	8004cec <__multadd+0x84>
 8004ca6:	68a3      	ldr	r3, [r4, #8]
 8004ca8:	42b3      	cmp	r3, r6
 8004caa:	dc19      	bgt.n	8004ce0 <__multadd+0x78>
 8004cac:	6861      	ldr	r1, [r4, #4]
 8004cae:	4638      	mov	r0, r7
 8004cb0:	3101      	adds	r1, #1
 8004cb2:	f7ff ff77 	bl	8004ba4 <_Balloc>
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	b928      	cbnz	r0, 8004cc6 <__multadd+0x5e>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <__multadd+0x8c>)
 8004cbe:	480e      	ldr	r0, [pc, #56]	; (8004cf8 <__multadd+0x90>)
 8004cc0:	21b5      	movs	r1, #181	; 0xb5
 8004cc2:	f000 fd13 	bl	80056ec <__assert_func>
 8004cc6:	6922      	ldr	r2, [r4, #16]
 8004cc8:	3202      	adds	r2, #2
 8004cca:	f104 010c 	add.w	r1, r4, #12
 8004cce:	0092      	lsls	r2, r2, #2
 8004cd0:	300c      	adds	r0, #12
 8004cd2:	f7ff ff59 	bl	8004b88 <memcpy>
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ffa3 	bl	8004c24 <_Bfree>
 8004cde:	462c      	mov	r4, r5
 8004ce0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004ce4:	3601      	adds	r6, #1
 8004ce6:	f8c3 8014 	str.w	r8, [r3, #20]
 8004cea:	6126      	str	r6, [r4, #16]
 8004cec:	4620      	mov	r0, r4
 8004cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0800734f 	.word	0x0800734f
 8004cf8:	08007360 	.word	0x08007360

08004cfc <__hi0bits>:
 8004cfc:	0c03      	lsrs	r3, r0, #16
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	b9d3      	cbnz	r3, 8004d38 <__hi0bits+0x3c>
 8004d02:	0400      	lsls	r0, r0, #16
 8004d04:	2310      	movs	r3, #16
 8004d06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d0a:	bf04      	itt	eq
 8004d0c:	0200      	lsleq	r0, r0, #8
 8004d0e:	3308      	addeq	r3, #8
 8004d10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d14:	bf04      	itt	eq
 8004d16:	0100      	lsleq	r0, r0, #4
 8004d18:	3304      	addeq	r3, #4
 8004d1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d1e:	bf04      	itt	eq
 8004d20:	0080      	lsleq	r0, r0, #2
 8004d22:	3302      	addeq	r3, #2
 8004d24:	2800      	cmp	r0, #0
 8004d26:	db05      	blt.n	8004d34 <__hi0bits+0x38>
 8004d28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d2c:	f103 0301 	add.w	r3, r3, #1
 8004d30:	bf08      	it	eq
 8004d32:	2320      	moveq	r3, #32
 8004d34:	4618      	mov	r0, r3
 8004d36:	4770      	bx	lr
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e7e4      	b.n	8004d06 <__hi0bits+0xa>

08004d3c <__lo0bits>:
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	f013 0207 	ands.w	r2, r3, #7
 8004d42:	4601      	mov	r1, r0
 8004d44:	d00b      	beq.n	8004d5e <__lo0bits+0x22>
 8004d46:	07da      	lsls	r2, r3, #31
 8004d48:	d424      	bmi.n	8004d94 <__lo0bits+0x58>
 8004d4a:	0798      	lsls	r0, r3, #30
 8004d4c:	bf49      	itett	mi
 8004d4e:	085b      	lsrmi	r3, r3, #1
 8004d50:	089b      	lsrpl	r3, r3, #2
 8004d52:	2001      	movmi	r0, #1
 8004d54:	600b      	strmi	r3, [r1, #0]
 8004d56:	bf5c      	itt	pl
 8004d58:	600b      	strpl	r3, [r1, #0]
 8004d5a:	2002      	movpl	r0, #2
 8004d5c:	4770      	bx	lr
 8004d5e:	b298      	uxth	r0, r3
 8004d60:	b9b0      	cbnz	r0, 8004d90 <__lo0bits+0x54>
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	2010      	movs	r0, #16
 8004d66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004d6a:	bf04      	itt	eq
 8004d6c:	0a1b      	lsreq	r3, r3, #8
 8004d6e:	3008      	addeq	r0, #8
 8004d70:	071a      	lsls	r2, r3, #28
 8004d72:	bf04      	itt	eq
 8004d74:	091b      	lsreq	r3, r3, #4
 8004d76:	3004      	addeq	r0, #4
 8004d78:	079a      	lsls	r2, r3, #30
 8004d7a:	bf04      	itt	eq
 8004d7c:	089b      	lsreq	r3, r3, #2
 8004d7e:	3002      	addeq	r0, #2
 8004d80:	07da      	lsls	r2, r3, #31
 8004d82:	d403      	bmi.n	8004d8c <__lo0bits+0x50>
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	f100 0001 	add.w	r0, r0, #1
 8004d8a:	d005      	beq.n	8004d98 <__lo0bits+0x5c>
 8004d8c:	600b      	str	r3, [r1, #0]
 8004d8e:	4770      	bx	lr
 8004d90:	4610      	mov	r0, r2
 8004d92:	e7e8      	b.n	8004d66 <__lo0bits+0x2a>
 8004d94:	2000      	movs	r0, #0
 8004d96:	4770      	bx	lr
 8004d98:	2020      	movs	r0, #32
 8004d9a:	4770      	bx	lr

08004d9c <__i2b>:
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	460c      	mov	r4, r1
 8004da0:	2101      	movs	r1, #1
 8004da2:	f7ff feff 	bl	8004ba4 <_Balloc>
 8004da6:	4602      	mov	r2, r0
 8004da8:	b928      	cbnz	r0, 8004db6 <__i2b+0x1a>
 8004daa:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <__i2b+0x24>)
 8004dac:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <__i2b+0x28>)
 8004dae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004db2:	f000 fc9b 	bl	80056ec <__assert_func>
 8004db6:	2301      	movs	r3, #1
 8004db8:	6144      	str	r4, [r0, #20]
 8004dba:	6103      	str	r3, [r0, #16]
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	0800734f 	.word	0x0800734f
 8004dc4:	08007360 	.word	0x08007360

08004dc8 <__multiply>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	4614      	mov	r4, r2
 8004dce:	690a      	ldr	r2, [r1, #16]
 8004dd0:	6923      	ldr	r3, [r4, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	bfb8      	it	lt
 8004dd6:	460b      	movlt	r3, r1
 8004dd8:	460d      	mov	r5, r1
 8004dda:	bfbc      	itt	lt
 8004ddc:	4625      	movlt	r5, r4
 8004dde:	461c      	movlt	r4, r3
 8004de0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004de4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004de8:	68ab      	ldr	r3, [r5, #8]
 8004dea:	6869      	ldr	r1, [r5, #4]
 8004dec:	eb0a 0709 	add.w	r7, sl, r9
 8004df0:	42bb      	cmp	r3, r7
 8004df2:	b085      	sub	sp, #20
 8004df4:	bfb8      	it	lt
 8004df6:	3101      	addlt	r1, #1
 8004df8:	f7ff fed4 	bl	8004ba4 <_Balloc>
 8004dfc:	b930      	cbnz	r0, 8004e0c <__multiply+0x44>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4b42      	ldr	r3, [pc, #264]	; (8004f0c <__multiply+0x144>)
 8004e02:	4843      	ldr	r0, [pc, #268]	; (8004f10 <__multiply+0x148>)
 8004e04:	f240 115d 	movw	r1, #349	; 0x15d
 8004e08:	f000 fc70 	bl	80056ec <__assert_func>
 8004e0c:	f100 0614 	add.w	r6, r0, #20
 8004e10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004e14:	4633      	mov	r3, r6
 8004e16:	2200      	movs	r2, #0
 8004e18:	4543      	cmp	r3, r8
 8004e1a:	d31e      	bcc.n	8004e5a <__multiply+0x92>
 8004e1c:	f105 0c14 	add.w	ip, r5, #20
 8004e20:	f104 0314 	add.w	r3, r4, #20
 8004e24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004e28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004e2c:	9202      	str	r2, [sp, #8]
 8004e2e:	ebac 0205 	sub.w	r2, ip, r5
 8004e32:	3a15      	subs	r2, #21
 8004e34:	f022 0203 	bic.w	r2, r2, #3
 8004e38:	3204      	adds	r2, #4
 8004e3a:	f105 0115 	add.w	r1, r5, #21
 8004e3e:	458c      	cmp	ip, r1
 8004e40:	bf38      	it	cc
 8004e42:	2204      	movcc	r2, #4
 8004e44:	9201      	str	r2, [sp, #4]
 8004e46:	9a02      	ldr	r2, [sp, #8]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d808      	bhi.n	8004e60 <__multiply+0x98>
 8004e4e:	2f00      	cmp	r7, #0
 8004e50:	dc55      	bgt.n	8004efe <__multiply+0x136>
 8004e52:	6107      	str	r7, [r0, #16]
 8004e54:	b005      	add	sp, #20
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	f843 2b04 	str.w	r2, [r3], #4
 8004e5e:	e7db      	b.n	8004e18 <__multiply+0x50>
 8004e60:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e64:	f1ba 0f00 	cmp.w	sl, #0
 8004e68:	d020      	beq.n	8004eac <__multiply+0xe4>
 8004e6a:	f105 0e14 	add.w	lr, r5, #20
 8004e6e:	46b1      	mov	r9, r6
 8004e70:	2200      	movs	r2, #0
 8004e72:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004e76:	f8d9 b000 	ldr.w	fp, [r9]
 8004e7a:	b2a1      	uxth	r1, r4
 8004e7c:	fa1f fb8b 	uxth.w	fp, fp
 8004e80:	fb0a b101 	mla	r1, sl, r1, fp
 8004e84:	4411      	add	r1, r2
 8004e86:	f8d9 2000 	ldr.w	r2, [r9]
 8004e8a:	0c24      	lsrs	r4, r4, #16
 8004e8c:	0c12      	lsrs	r2, r2, #16
 8004e8e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004e92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004e96:	b289      	uxth	r1, r1
 8004e98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004e9c:	45f4      	cmp	ip, lr
 8004e9e:	f849 1b04 	str.w	r1, [r9], #4
 8004ea2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004ea6:	d8e4      	bhi.n	8004e72 <__multiply+0xaa>
 8004ea8:	9901      	ldr	r1, [sp, #4]
 8004eaa:	5072      	str	r2, [r6, r1]
 8004eac:	9a03      	ldr	r2, [sp, #12]
 8004eae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	f1b9 0f00 	cmp.w	r9, #0
 8004eb8:	d01f      	beq.n	8004efa <__multiply+0x132>
 8004eba:	6834      	ldr	r4, [r6, #0]
 8004ebc:	f105 0114 	add.w	r1, r5, #20
 8004ec0:	46b6      	mov	lr, r6
 8004ec2:	f04f 0a00 	mov.w	sl, #0
 8004ec6:	880a      	ldrh	r2, [r1, #0]
 8004ec8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004ecc:	fb09 b202 	mla	r2, r9, r2, fp
 8004ed0:	4492      	add	sl, r2
 8004ed2:	b2a4      	uxth	r4, r4
 8004ed4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004ed8:	f84e 4b04 	str.w	r4, [lr], #4
 8004edc:	f851 4b04 	ldr.w	r4, [r1], #4
 8004ee0:	f8be 2000 	ldrh.w	r2, [lr]
 8004ee4:	0c24      	lsrs	r4, r4, #16
 8004ee6:	fb09 2404 	mla	r4, r9, r4, r2
 8004eea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004eee:	458c      	cmp	ip, r1
 8004ef0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ef4:	d8e7      	bhi.n	8004ec6 <__multiply+0xfe>
 8004ef6:	9a01      	ldr	r2, [sp, #4]
 8004ef8:	50b4      	str	r4, [r6, r2]
 8004efa:	3604      	adds	r6, #4
 8004efc:	e7a3      	b.n	8004e46 <__multiply+0x7e>
 8004efe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1a5      	bne.n	8004e52 <__multiply+0x8a>
 8004f06:	3f01      	subs	r7, #1
 8004f08:	e7a1      	b.n	8004e4e <__multiply+0x86>
 8004f0a:	bf00      	nop
 8004f0c:	0800734f 	.word	0x0800734f
 8004f10:	08007360 	.word	0x08007360

08004f14 <__pow5mult>:
 8004f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f18:	4615      	mov	r5, r2
 8004f1a:	f012 0203 	ands.w	r2, r2, #3
 8004f1e:	4606      	mov	r6, r0
 8004f20:	460f      	mov	r7, r1
 8004f22:	d007      	beq.n	8004f34 <__pow5mult+0x20>
 8004f24:	4c25      	ldr	r4, [pc, #148]	; (8004fbc <__pow5mult+0xa8>)
 8004f26:	3a01      	subs	r2, #1
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f2e:	f7ff fe9b 	bl	8004c68 <__multadd>
 8004f32:	4607      	mov	r7, r0
 8004f34:	10ad      	asrs	r5, r5, #2
 8004f36:	d03d      	beq.n	8004fb4 <__pow5mult+0xa0>
 8004f38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004f3a:	b97c      	cbnz	r4, 8004f5c <__pow5mult+0x48>
 8004f3c:	2010      	movs	r0, #16
 8004f3e:	f7ff fe1b 	bl	8004b78 <malloc>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6270      	str	r0, [r6, #36]	; 0x24
 8004f46:	b928      	cbnz	r0, 8004f54 <__pow5mult+0x40>
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <__pow5mult+0xac>)
 8004f4a:	481e      	ldr	r0, [pc, #120]	; (8004fc4 <__pow5mult+0xb0>)
 8004f4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004f50:	f000 fbcc 	bl	80056ec <__assert_func>
 8004f54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f58:	6004      	str	r4, [r0, #0]
 8004f5a:	60c4      	str	r4, [r0, #12]
 8004f5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004f60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f64:	b94c      	cbnz	r4, 8004f7a <__pow5mult+0x66>
 8004f66:	f240 2171 	movw	r1, #625	; 0x271
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f7ff ff16 	bl	8004d9c <__i2b>
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f76:	4604      	mov	r4, r0
 8004f78:	6003      	str	r3, [r0, #0]
 8004f7a:	f04f 0900 	mov.w	r9, #0
 8004f7e:	07eb      	lsls	r3, r5, #31
 8004f80:	d50a      	bpl.n	8004f98 <__pow5mult+0x84>
 8004f82:	4639      	mov	r1, r7
 8004f84:	4622      	mov	r2, r4
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff ff1e 	bl	8004dc8 <__multiply>
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	4680      	mov	r8, r0
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7ff fe47 	bl	8004c24 <_Bfree>
 8004f96:	4647      	mov	r7, r8
 8004f98:	106d      	asrs	r5, r5, #1
 8004f9a:	d00b      	beq.n	8004fb4 <__pow5mult+0xa0>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	b938      	cbnz	r0, 8004fb0 <__pow5mult+0x9c>
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff ff0f 	bl	8004dc8 <__multiply>
 8004faa:	6020      	str	r0, [r4, #0]
 8004fac:	f8c0 9000 	str.w	r9, [r0]
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	e7e4      	b.n	8004f7e <__pow5mult+0x6a>
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fba:	bf00      	nop
 8004fbc:	080074b0 	.word	0x080074b0
 8004fc0:	080072d9 	.word	0x080072d9
 8004fc4:	08007360 	.word	0x08007360

08004fc8 <__lshift>:
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	460c      	mov	r4, r1
 8004fce:	6849      	ldr	r1, [r1, #4]
 8004fd0:	6923      	ldr	r3, [r4, #16]
 8004fd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fd6:	68a3      	ldr	r3, [r4, #8]
 8004fd8:	4607      	mov	r7, r0
 8004fda:	4691      	mov	r9, r2
 8004fdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004fe0:	f108 0601 	add.w	r6, r8, #1
 8004fe4:	42b3      	cmp	r3, r6
 8004fe6:	db0b      	blt.n	8005000 <__lshift+0x38>
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7ff fddb 	bl	8004ba4 <_Balloc>
 8004fee:	4605      	mov	r5, r0
 8004ff0:	b948      	cbnz	r0, 8005006 <__lshift+0x3e>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	4b28      	ldr	r3, [pc, #160]	; (8005098 <__lshift+0xd0>)
 8004ff6:	4829      	ldr	r0, [pc, #164]	; (800509c <__lshift+0xd4>)
 8004ff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ffc:	f000 fb76 	bl	80056ec <__assert_func>
 8005000:	3101      	adds	r1, #1
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	e7ee      	b.n	8004fe4 <__lshift+0x1c>
 8005006:	2300      	movs	r3, #0
 8005008:	f100 0114 	add.w	r1, r0, #20
 800500c:	f100 0210 	add.w	r2, r0, #16
 8005010:	4618      	mov	r0, r3
 8005012:	4553      	cmp	r3, sl
 8005014:	db33      	blt.n	800507e <__lshift+0xb6>
 8005016:	6920      	ldr	r0, [r4, #16]
 8005018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800501c:	f104 0314 	add.w	r3, r4, #20
 8005020:	f019 091f 	ands.w	r9, r9, #31
 8005024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005028:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800502c:	d02b      	beq.n	8005086 <__lshift+0xbe>
 800502e:	f1c9 0e20 	rsb	lr, r9, #32
 8005032:	468a      	mov	sl, r1
 8005034:	2200      	movs	r2, #0
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	fa00 f009 	lsl.w	r0, r0, r9
 800503c:	4302      	orrs	r2, r0
 800503e:	f84a 2b04 	str.w	r2, [sl], #4
 8005042:	f853 2b04 	ldr.w	r2, [r3], #4
 8005046:	459c      	cmp	ip, r3
 8005048:	fa22 f20e 	lsr.w	r2, r2, lr
 800504c:	d8f3      	bhi.n	8005036 <__lshift+0x6e>
 800504e:	ebac 0304 	sub.w	r3, ip, r4
 8005052:	3b15      	subs	r3, #21
 8005054:	f023 0303 	bic.w	r3, r3, #3
 8005058:	3304      	adds	r3, #4
 800505a:	f104 0015 	add.w	r0, r4, #21
 800505e:	4584      	cmp	ip, r0
 8005060:	bf38      	it	cc
 8005062:	2304      	movcc	r3, #4
 8005064:	50ca      	str	r2, [r1, r3]
 8005066:	b10a      	cbz	r2, 800506c <__lshift+0xa4>
 8005068:	f108 0602 	add.w	r6, r8, #2
 800506c:	3e01      	subs	r6, #1
 800506e:	4638      	mov	r0, r7
 8005070:	612e      	str	r6, [r5, #16]
 8005072:	4621      	mov	r1, r4
 8005074:	f7ff fdd6 	bl	8004c24 <_Bfree>
 8005078:	4628      	mov	r0, r5
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005082:	3301      	adds	r3, #1
 8005084:	e7c5      	b.n	8005012 <__lshift+0x4a>
 8005086:	3904      	subs	r1, #4
 8005088:	f853 2b04 	ldr.w	r2, [r3], #4
 800508c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005090:	459c      	cmp	ip, r3
 8005092:	d8f9      	bhi.n	8005088 <__lshift+0xc0>
 8005094:	e7ea      	b.n	800506c <__lshift+0xa4>
 8005096:	bf00      	nop
 8005098:	0800734f 	.word	0x0800734f
 800509c:	08007360 	.word	0x08007360

080050a0 <__mcmp>:
 80050a0:	b530      	push	{r4, r5, lr}
 80050a2:	6902      	ldr	r2, [r0, #16]
 80050a4:	690c      	ldr	r4, [r1, #16]
 80050a6:	1b12      	subs	r2, r2, r4
 80050a8:	d10e      	bne.n	80050c8 <__mcmp+0x28>
 80050aa:	f100 0314 	add.w	r3, r0, #20
 80050ae:	3114      	adds	r1, #20
 80050b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80050b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80050bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80050c0:	42a5      	cmp	r5, r4
 80050c2:	d003      	beq.n	80050cc <__mcmp+0x2c>
 80050c4:	d305      	bcc.n	80050d2 <__mcmp+0x32>
 80050c6:	2201      	movs	r2, #1
 80050c8:	4610      	mov	r0, r2
 80050ca:	bd30      	pop	{r4, r5, pc}
 80050cc:	4283      	cmp	r3, r0
 80050ce:	d3f3      	bcc.n	80050b8 <__mcmp+0x18>
 80050d0:	e7fa      	b.n	80050c8 <__mcmp+0x28>
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	e7f7      	b.n	80050c8 <__mcmp+0x28>

080050d8 <__mdiff>:
 80050d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	460c      	mov	r4, r1
 80050de:	4606      	mov	r6, r0
 80050e0:	4611      	mov	r1, r2
 80050e2:	4620      	mov	r0, r4
 80050e4:	4617      	mov	r7, r2
 80050e6:	f7ff ffdb 	bl	80050a0 <__mcmp>
 80050ea:	1e05      	subs	r5, r0, #0
 80050ec:	d110      	bne.n	8005110 <__mdiff+0x38>
 80050ee:	4629      	mov	r1, r5
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7ff fd57 	bl	8004ba4 <_Balloc>
 80050f6:	b930      	cbnz	r0, 8005106 <__mdiff+0x2e>
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <__mdiff+0x108>)
 80050fa:	4602      	mov	r2, r0
 80050fc:	f240 2132 	movw	r1, #562	; 0x232
 8005100:	4838      	ldr	r0, [pc, #224]	; (80051e4 <__mdiff+0x10c>)
 8005102:	f000 faf3 	bl	80056ec <__assert_func>
 8005106:	2301      	movs	r3, #1
 8005108:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800510c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005110:	bfa4      	itt	ge
 8005112:	463b      	movge	r3, r7
 8005114:	4627      	movge	r7, r4
 8005116:	4630      	mov	r0, r6
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	bfa6      	itte	ge
 800511c:	461c      	movge	r4, r3
 800511e:	2500      	movge	r5, #0
 8005120:	2501      	movlt	r5, #1
 8005122:	f7ff fd3f 	bl	8004ba4 <_Balloc>
 8005126:	b920      	cbnz	r0, 8005132 <__mdiff+0x5a>
 8005128:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <__mdiff+0x108>)
 800512a:	4602      	mov	r2, r0
 800512c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005130:	e7e6      	b.n	8005100 <__mdiff+0x28>
 8005132:	693e      	ldr	r6, [r7, #16]
 8005134:	60c5      	str	r5, [r0, #12]
 8005136:	6925      	ldr	r5, [r4, #16]
 8005138:	f107 0114 	add.w	r1, r7, #20
 800513c:	f104 0914 	add.w	r9, r4, #20
 8005140:	f100 0e14 	add.w	lr, r0, #20
 8005144:	f107 0210 	add.w	r2, r7, #16
 8005148:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800514c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005150:	46f2      	mov	sl, lr
 8005152:	2700      	movs	r7, #0
 8005154:	f859 3b04 	ldr.w	r3, [r9], #4
 8005158:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800515c:	fa1f f883 	uxth.w	r8, r3
 8005160:	fa17 f78b 	uxtah	r7, r7, fp
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	eba7 0808 	sub.w	r8, r7, r8
 800516a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800516e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005172:	fa1f f888 	uxth.w	r8, r8
 8005176:	141f      	asrs	r7, r3, #16
 8005178:	454d      	cmp	r5, r9
 800517a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800517e:	f84a 3b04 	str.w	r3, [sl], #4
 8005182:	d8e7      	bhi.n	8005154 <__mdiff+0x7c>
 8005184:	1b2b      	subs	r3, r5, r4
 8005186:	3b15      	subs	r3, #21
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	3304      	adds	r3, #4
 800518e:	3415      	adds	r4, #21
 8005190:	42a5      	cmp	r5, r4
 8005192:	bf38      	it	cc
 8005194:	2304      	movcc	r3, #4
 8005196:	4419      	add	r1, r3
 8005198:	4473      	add	r3, lr
 800519a:	469e      	mov	lr, r3
 800519c:	460d      	mov	r5, r1
 800519e:	4565      	cmp	r5, ip
 80051a0:	d30e      	bcc.n	80051c0 <__mdiff+0xe8>
 80051a2:	f10c 0203 	add.w	r2, ip, #3
 80051a6:	1a52      	subs	r2, r2, r1
 80051a8:	f022 0203 	bic.w	r2, r2, #3
 80051ac:	3903      	subs	r1, #3
 80051ae:	458c      	cmp	ip, r1
 80051b0:	bf38      	it	cc
 80051b2:	2200      	movcc	r2, #0
 80051b4:	441a      	add	r2, r3
 80051b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80051ba:	b17b      	cbz	r3, 80051dc <__mdiff+0x104>
 80051bc:	6106      	str	r6, [r0, #16]
 80051be:	e7a5      	b.n	800510c <__mdiff+0x34>
 80051c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80051c4:	fa17 f488 	uxtah	r4, r7, r8
 80051c8:	1422      	asrs	r2, r4, #16
 80051ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80051ce:	b2a4      	uxth	r4, r4
 80051d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80051d4:	f84e 4b04 	str.w	r4, [lr], #4
 80051d8:	1417      	asrs	r7, r2, #16
 80051da:	e7e0      	b.n	800519e <__mdiff+0xc6>
 80051dc:	3e01      	subs	r6, #1
 80051de:	e7ea      	b.n	80051b6 <__mdiff+0xde>
 80051e0:	0800734f 	.word	0x0800734f
 80051e4:	08007360 	.word	0x08007360

080051e8 <__d2b>:
 80051e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051ec:	4689      	mov	r9, r1
 80051ee:	2101      	movs	r1, #1
 80051f0:	ec57 6b10 	vmov	r6, r7, d0
 80051f4:	4690      	mov	r8, r2
 80051f6:	f7ff fcd5 	bl	8004ba4 <_Balloc>
 80051fa:	4604      	mov	r4, r0
 80051fc:	b930      	cbnz	r0, 800520c <__d2b+0x24>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b25      	ldr	r3, [pc, #148]	; (8005298 <__d2b+0xb0>)
 8005202:	4826      	ldr	r0, [pc, #152]	; (800529c <__d2b+0xb4>)
 8005204:	f240 310a 	movw	r1, #778	; 0x30a
 8005208:	f000 fa70 	bl	80056ec <__assert_func>
 800520c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005214:	bb35      	cbnz	r5, 8005264 <__d2b+0x7c>
 8005216:	2e00      	cmp	r6, #0
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	d028      	beq.n	800526e <__d2b+0x86>
 800521c:	4668      	mov	r0, sp
 800521e:	9600      	str	r6, [sp, #0]
 8005220:	f7ff fd8c 	bl	8004d3c <__lo0bits>
 8005224:	9900      	ldr	r1, [sp, #0]
 8005226:	b300      	cbz	r0, 800526a <__d2b+0x82>
 8005228:	9a01      	ldr	r2, [sp, #4]
 800522a:	f1c0 0320 	rsb	r3, r0, #32
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	430b      	orrs	r3, r1
 8005234:	40c2      	lsrs	r2, r0
 8005236:	6163      	str	r3, [r4, #20]
 8005238:	9201      	str	r2, [sp, #4]
 800523a:	9b01      	ldr	r3, [sp, #4]
 800523c:	61a3      	str	r3, [r4, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf14      	ite	ne
 8005242:	2202      	movne	r2, #2
 8005244:	2201      	moveq	r2, #1
 8005246:	6122      	str	r2, [r4, #16]
 8005248:	b1d5      	cbz	r5, 8005280 <__d2b+0x98>
 800524a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800524e:	4405      	add	r5, r0
 8005250:	f8c9 5000 	str.w	r5, [r9]
 8005254:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005258:	f8c8 0000 	str.w	r0, [r8]
 800525c:	4620      	mov	r0, r4
 800525e:	b003      	add	sp, #12
 8005260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005268:	e7d5      	b.n	8005216 <__d2b+0x2e>
 800526a:	6161      	str	r1, [r4, #20]
 800526c:	e7e5      	b.n	800523a <__d2b+0x52>
 800526e:	a801      	add	r0, sp, #4
 8005270:	f7ff fd64 	bl	8004d3c <__lo0bits>
 8005274:	9b01      	ldr	r3, [sp, #4]
 8005276:	6163      	str	r3, [r4, #20]
 8005278:	2201      	movs	r2, #1
 800527a:	6122      	str	r2, [r4, #16]
 800527c:	3020      	adds	r0, #32
 800527e:	e7e3      	b.n	8005248 <__d2b+0x60>
 8005280:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005284:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005288:	f8c9 0000 	str.w	r0, [r9]
 800528c:	6918      	ldr	r0, [r3, #16]
 800528e:	f7ff fd35 	bl	8004cfc <__hi0bits>
 8005292:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005296:	e7df      	b.n	8005258 <__d2b+0x70>
 8005298:	0800734f 	.word	0x0800734f
 800529c:	08007360 	.word	0x08007360

080052a0 <_calloc_r>:
 80052a0:	b513      	push	{r0, r1, r4, lr}
 80052a2:	434a      	muls	r2, r1
 80052a4:	4611      	mov	r1, r2
 80052a6:	9201      	str	r2, [sp, #4]
 80052a8:	f000 f85a 	bl	8005360 <_malloc_r>
 80052ac:	4604      	mov	r4, r0
 80052ae:	b118      	cbz	r0, 80052b8 <_calloc_r+0x18>
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	2100      	movs	r1, #0
 80052b4:	f7fe f952 	bl	800355c <memset>
 80052b8:	4620      	mov	r0, r4
 80052ba:	b002      	add	sp, #8
 80052bc:	bd10      	pop	{r4, pc}
	...

080052c0 <_free_r>:
 80052c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052c2:	2900      	cmp	r1, #0
 80052c4:	d048      	beq.n	8005358 <_free_r+0x98>
 80052c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ca:	9001      	str	r0, [sp, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f1a1 0404 	sub.w	r4, r1, #4
 80052d2:	bfb8      	it	lt
 80052d4:	18e4      	addlt	r4, r4, r3
 80052d6:	f000 fa65 	bl	80057a4 <__malloc_lock>
 80052da:	4a20      	ldr	r2, [pc, #128]	; (800535c <_free_r+0x9c>)
 80052dc:	9801      	ldr	r0, [sp, #4]
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	4615      	mov	r5, r2
 80052e2:	b933      	cbnz	r3, 80052f2 <_free_r+0x32>
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	6014      	str	r4, [r2, #0]
 80052e8:	b003      	add	sp, #12
 80052ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052ee:	f000 ba5f 	b.w	80057b0 <__malloc_unlock>
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	d90b      	bls.n	800530e <_free_r+0x4e>
 80052f6:	6821      	ldr	r1, [r4, #0]
 80052f8:	1862      	adds	r2, r4, r1
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bf04      	itt	eq
 80052fe:	681a      	ldreq	r2, [r3, #0]
 8005300:	685b      	ldreq	r3, [r3, #4]
 8005302:	6063      	str	r3, [r4, #4]
 8005304:	bf04      	itt	eq
 8005306:	1852      	addeq	r2, r2, r1
 8005308:	6022      	streq	r2, [r4, #0]
 800530a:	602c      	str	r4, [r5, #0]
 800530c:	e7ec      	b.n	80052e8 <_free_r+0x28>
 800530e:	461a      	mov	r2, r3
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b10b      	cbz	r3, 8005318 <_free_r+0x58>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d9fa      	bls.n	800530e <_free_r+0x4e>
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	1855      	adds	r5, r2, r1
 800531c:	42a5      	cmp	r5, r4
 800531e:	d10b      	bne.n	8005338 <_free_r+0x78>
 8005320:	6824      	ldr	r4, [r4, #0]
 8005322:	4421      	add	r1, r4
 8005324:	1854      	adds	r4, r2, r1
 8005326:	42a3      	cmp	r3, r4
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	d1dd      	bne.n	80052e8 <_free_r+0x28>
 800532c:	681c      	ldr	r4, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	6053      	str	r3, [r2, #4]
 8005332:	4421      	add	r1, r4
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	e7d7      	b.n	80052e8 <_free_r+0x28>
 8005338:	d902      	bls.n	8005340 <_free_r+0x80>
 800533a:	230c      	movs	r3, #12
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	e7d3      	b.n	80052e8 <_free_r+0x28>
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	1961      	adds	r1, r4, r5
 8005344:	428b      	cmp	r3, r1
 8005346:	bf04      	itt	eq
 8005348:	6819      	ldreq	r1, [r3, #0]
 800534a:	685b      	ldreq	r3, [r3, #4]
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	bf04      	itt	eq
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	6054      	str	r4, [r2, #4]
 8005356:	e7c7      	b.n	80052e8 <_free_r+0x28>
 8005358:	b003      	add	sp, #12
 800535a:	bd30      	pop	{r4, r5, pc}
 800535c:	20000230 	.word	0x20000230

08005360 <_malloc_r>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	1ccd      	adds	r5, r1, #3
 8005364:	f025 0503 	bic.w	r5, r5, #3
 8005368:	3508      	adds	r5, #8
 800536a:	2d0c      	cmp	r5, #12
 800536c:	bf38      	it	cc
 800536e:	250c      	movcc	r5, #12
 8005370:	2d00      	cmp	r5, #0
 8005372:	4606      	mov	r6, r0
 8005374:	db01      	blt.n	800537a <_malloc_r+0x1a>
 8005376:	42a9      	cmp	r1, r5
 8005378:	d903      	bls.n	8005382 <_malloc_r+0x22>
 800537a:	230c      	movs	r3, #12
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	2000      	movs	r0, #0
 8005380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005382:	f000 fa0f 	bl	80057a4 <__malloc_lock>
 8005386:	4921      	ldr	r1, [pc, #132]	; (800540c <_malloc_r+0xac>)
 8005388:	680a      	ldr	r2, [r1, #0]
 800538a:	4614      	mov	r4, r2
 800538c:	b99c      	cbnz	r4, 80053b6 <_malloc_r+0x56>
 800538e:	4f20      	ldr	r7, [pc, #128]	; (8005410 <_malloc_r+0xb0>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b923      	cbnz	r3, 800539e <_malloc_r+0x3e>
 8005394:	4621      	mov	r1, r4
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f998 	bl	80056cc <_sbrk_r>
 800539c:	6038      	str	r0, [r7, #0]
 800539e:	4629      	mov	r1, r5
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 f993 	bl	80056cc <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d123      	bne.n	80053f2 <_malloc_r+0x92>
 80053aa:	230c      	movs	r3, #12
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	4630      	mov	r0, r6
 80053b0:	f000 f9fe 	bl	80057b0 <__malloc_unlock>
 80053b4:	e7e3      	b.n	800537e <_malloc_r+0x1e>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	1b5b      	subs	r3, r3, r5
 80053ba:	d417      	bmi.n	80053ec <_malloc_r+0x8c>
 80053bc:	2b0b      	cmp	r3, #11
 80053be:	d903      	bls.n	80053c8 <_malloc_r+0x68>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	441c      	add	r4, r3
 80053c4:	6025      	str	r5, [r4, #0]
 80053c6:	e004      	b.n	80053d2 <_malloc_r+0x72>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	42a2      	cmp	r2, r4
 80053cc:	bf0c      	ite	eq
 80053ce:	600b      	streq	r3, [r1, #0]
 80053d0:	6053      	strne	r3, [r2, #4]
 80053d2:	4630      	mov	r0, r6
 80053d4:	f000 f9ec 	bl	80057b0 <__malloc_unlock>
 80053d8:	f104 000b 	add.w	r0, r4, #11
 80053dc:	1d23      	adds	r3, r4, #4
 80053de:	f020 0007 	bic.w	r0, r0, #7
 80053e2:	1ac2      	subs	r2, r0, r3
 80053e4:	d0cc      	beq.n	8005380 <_malloc_r+0x20>
 80053e6:	1a1b      	subs	r3, r3, r0
 80053e8:	50a3      	str	r3, [r4, r2]
 80053ea:	e7c9      	b.n	8005380 <_malloc_r+0x20>
 80053ec:	4622      	mov	r2, r4
 80053ee:	6864      	ldr	r4, [r4, #4]
 80053f0:	e7cc      	b.n	800538c <_malloc_r+0x2c>
 80053f2:	1cc4      	adds	r4, r0, #3
 80053f4:	f024 0403 	bic.w	r4, r4, #3
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d0e3      	beq.n	80053c4 <_malloc_r+0x64>
 80053fc:	1a21      	subs	r1, r4, r0
 80053fe:	4630      	mov	r0, r6
 8005400:	f000 f964 	bl	80056cc <_sbrk_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d1dd      	bne.n	80053c4 <_malloc_r+0x64>
 8005408:	e7cf      	b.n	80053aa <_malloc_r+0x4a>
 800540a:	bf00      	nop
 800540c:	20000230 	.word	0x20000230
 8005410:	20000234 	.word	0x20000234

08005414 <__ssputs_r>:
 8005414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	688e      	ldr	r6, [r1, #8]
 800541a:	429e      	cmp	r6, r3
 800541c:	4682      	mov	sl, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4690      	mov	r8, r2
 8005422:	461f      	mov	r7, r3
 8005424:	d838      	bhi.n	8005498 <__ssputs_r+0x84>
 8005426:	898a      	ldrh	r2, [r1, #12]
 8005428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800542c:	d032      	beq.n	8005494 <__ssputs_r+0x80>
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	6909      	ldr	r1, [r1, #16]
 8005432:	eba5 0901 	sub.w	r9, r5, r1
 8005436:	6965      	ldr	r5, [r4, #20]
 8005438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800543c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005440:	3301      	adds	r3, #1
 8005442:	444b      	add	r3, r9
 8005444:	106d      	asrs	r5, r5, #1
 8005446:	429d      	cmp	r5, r3
 8005448:	bf38      	it	cc
 800544a:	461d      	movcc	r5, r3
 800544c:	0553      	lsls	r3, r2, #21
 800544e:	d531      	bpl.n	80054b4 <__ssputs_r+0xa0>
 8005450:	4629      	mov	r1, r5
 8005452:	f7ff ff85 	bl	8005360 <_malloc_r>
 8005456:	4606      	mov	r6, r0
 8005458:	b950      	cbnz	r0, 8005470 <__ssputs_r+0x5c>
 800545a:	230c      	movs	r3, #12
 800545c:	f8ca 3000 	str.w	r3, [sl]
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	6921      	ldr	r1, [r4, #16]
 8005472:	464a      	mov	r2, r9
 8005474:	f7ff fb88 	bl	8004b88 <memcpy>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	6126      	str	r6, [r4, #16]
 8005486:	6165      	str	r5, [r4, #20]
 8005488:	444e      	add	r6, r9
 800548a:	eba5 0509 	sub.w	r5, r5, r9
 800548e:	6026      	str	r6, [r4, #0]
 8005490:	60a5      	str	r5, [r4, #8]
 8005492:	463e      	mov	r6, r7
 8005494:	42be      	cmp	r6, r7
 8005496:	d900      	bls.n	800549a <__ssputs_r+0x86>
 8005498:	463e      	mov	r6, r7
 800549a:	4632      	mov	r2, r6
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	4641      	mov	r1, r8
 80054a0:	f000 f966 	bl	8005770 <memmove>
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	1b9b      	subs	r3, r3, r6
 80054aa:	4432      	add	r2, r6
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	2000      	movs	r0, #0
 80054b2:	e7db      	b.n	800546c <__ssputs_r+0x58>
 80054b4:	462a      	mov	r2, r5
 80054b6:	f000 f981 	bl	80057bc <_realloc_r>
 80054ba:	4606      	mov	r6, r0
 80054bc:	2800      	cmp	r0, #0
 80054be:	d1e1      	bne.n	8005484 <__ssputs_r+0x70>
 80054c0:	6921      	ldr	r1, [r4, #16]
 80054c2:	4650      	mov	r0, sl
 80054c4:	f7ff fefc 	bl	80052c0 <_free_r>
 80054c8:	e7c7      	b.n	800545a <__ssputs_r+0x46>
	...

080054cc <_svfiprintf_r>:
 80054cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	4698      	mov	r8, r3
 80054d2:	898b      	ldrh	r3, [r1, #12]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	b09d      	sub	sp, #116	; 0x74
 80054d8:	4607      	mov	r7, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	4614      	mov	r4, r2
 80054de:	d50e      	bpl.n	80054fe <_svfiprintf_r+0x32>
 80054e0:	690b      	ldr	r3, [r1, #16]
 80054e2:	b963      	cbnz	r3, 80054fe <_svfiprintf_r+0x32>
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	f7ff ff3b 	bl	8005360 <_malloc_r>
 80054ea:	6028      	str	r0, [r5, #0]
 80054ec:	6128      	str	r0, [r5, #16]
 80054ee:	b920      	cbnz	r0, 80054fa <_svfiprintf_r+0x2e>
 80054f0:	230c      	movs	r3, #12
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e0d1      	b.n	800569e <_svfiprintf_r+0x1d2>
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	616b      	str	r3, [r5, #20]
 80054fe:	2300      	movs	r3, #0
 8005500:	9309      	str	r3, [sp, #36]	; 0x24
 8005502:	2320      	movs	r3, #32
 8005504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005508:	f8cd 800c 	str.w	r8, [sp, #12]
 800550c:	2330      	movs	r3, #48	; 0x30
 800550e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056b8 <_svfiprintf_r+0x1ec>
 8005512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005516:	f04f 0901 	mov.w	r9, #1
 800551a:	4623      	mov	r3, r4
 800551c:	469a      	mov	sl, r3
 800551e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005522:	b10a      	cbz	r2, 8005528 <_svfiprintf_r+0x5c>
 8005524:	2a25      	cmp	r2, #37	; 0x25
 8005526:	d1f9      	bne.n	800551c <_svfiprintf_r+0x50>
 8005528:	ebba 0b04 	subs.w	fp, sl, r4
 800552c:	d00b      	beq.n	8005546 <_svfiprintf_r+0x7a>
 800552e:	465b      	mov	r3, fp
 8005530:	4622      	mov	r2, r4
 8005532:	4629      	mov	r1, r5
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ff6d 	bl	8005414 <__ssputs_r>
 800553a:	3001      	adds	r0, #1
 800553c:	f000 80aa 	beq.w	8005694 <_svfiprintf_r+0x1c8>
 8005540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005542:	445a      	add	r2, fp
 8005544:	9209      	str	r2, [sp, #36]	; 0x24
 8005546:	f89a 3000 	ldrb.w	r3, [sl]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80a2 	beq.w	8005694 <_svfiprintf_r+0x1c8>
 8005550:	2300      	movs	r3, #0
 8005552:	f04f 32ff 	mov.w	r2, #4294967295
 8005556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555a:	f10a 0a01 	add.w	sl, sl, #1
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	9307      	str	r3, [sp, #28]
 8005562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005566:	931a      	str	r3, [sp, #104]	; 0x68
 8005568:	4654      	mov	r4, sl
 800556a:	2205      	movs	r2, #5
 800556c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005570:	4851      	ldr	r0, [pc, #324]	; (80056b8 <_svfiprintf_r+0x1ec>)
 8005572:	f7fa fe35 	bl	80001e0 <memchr>
 8005576:	9a04      	ldr	r2, [sp, #16]
 8005578:	b9d8      	cbnz	r0, 80055b2 <_svfiprintf_r+0xe6>
 800557a:	06d0      	lsls	r0, r2, #27
 800557c:	bf44      	itt	mi
 800557e:	2320      	movmi	r3, #32
 8005580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005584:	0711      	lsls	r1, r2, #28
 8005586:	bf44      	itt	mi
 8005588:	232b      	movmi	r3, #43	; 0x2b
 800558a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558e:	f89a 3000 	ldrb.w	r3, [sl]
 8005592:	2b2a      	cmp	r3, #42	; 0x2a
 8005594:	d015      	beq.n	80055c2 <_svfiprintf_r+0xf6>
 8005596:	9a07      	ldr	r2, [sp, #28]
 8005598:	4654      	mov	r4, sl
 800559a:	2000      	movs	r0, #0
 800559c:	f04f 0c0a 	mov.w	ip, #10
 80055a0:	4621      	mov	r1, r4
 80055a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a6:	3b30      	subs	r3, #48	; 0x30
 80055a8:	2b09      	cmp	r3, #9
 80055aa:	d94e      	bls.n	800564a <_svfiprintf_r+0x17e>
 80055ac:	b1b0      	cbz	r0, 80055dc <_svfiprintf_r+0x110>
 80055ae:	9207      	str	r2, [sp, #28]
 80055b0:	e014      	b.n	80055dc <_svfiprintf_r+0x110>
 80055b2:	eba0 0308 	sub.w	r3, r0, r8
 80055b6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	46a2      	mov	sl, r4
 80055c0:	e7d2      	b.n	8005568 <_svfiprintf_r+0x9c>
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	1d19      	adds	r1, r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	9103      	str	r1, [sp, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bfbb      	ittet	lt
 80055ce:	425b      	neglt	r3, r3
 80055d0:	f042 0202 	orrlt.w	r2, r2, #2
 80055d4:	9307      	strge	r3, [sp, #28]
 80055d6:	9307      	strlt	r3, [sp, #28]
 80055d8:	bfb8      	it	lt
 80055da:	9204      	strlt	r2, [sp, #16]
 80055dc:	7823      	ldrb	r3, [r4, #0]
 80055de:	2b2e      	cmp	r3, #46	; 0x2e
 80055e0:	d10c      	bne.n	80055fc <_svfiprintf_r+0x130>
 80055e2:	7863      	ldrb	r3, [r4, #1]
 80055e4:	2b2a      	cmp	r3, #42	; 0x2a
 80055e6:	d135      	bne.n	8005654 <_svfiprintf_r+0x188>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9203      	str	r2, [sp, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f8:	3402      	adds	r4, #2
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056c8 <_svfiprintf_r+0x1fc>
 8005600:	7821      	ldrb	r1, [r4, #0]
 8005602:	2203      	movs	r2, #3
 8005604:	4650      	mov	r0, sl
 8005606:	f7fa fdeb 	bl	80001e0 <memchr>
 800560a:	b140      	cbz	r0, 800561e <_svfiprintf_r+0x152>
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	eba0 000a 	sub.w	r0, r0, sl
 8005612:	fa03 f000 	lsl.w	r0, r3, r0
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	4303      	orrs	r3, r0
 800561a:	3401      	adds	r4, #1
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005622:	4826      	ldr	r0, [pc, #152]	; (80056bc <_svfiprintf_r+0x1f0>)
 8005624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005628:	2206      	movs	r2, #6
 800562a:	f7fa fdd9 	bl	80001e0 <memchr>
 800562e:	2800      	cmp	r0, #0
 8005630:	d038      	beq.n	80056a4 <_svfiprintf_r+0x1d8>
 8005632:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <_svfiprintf_r+0x1f4>)
 8005634:	bb1b      	cbnz	r3, 800567e <_svfiprintf_r+0x1b2>
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	3307      	adds	r3, #7
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	3308      	adds	r3, #8
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005644:	4433      	add	r3, r6
 8005646:	9309      	str	r3, [sp, #36]	; 0x24
 8005648:	e767      	b.n	800551a <_svfiprintf_r+0x4e>
 800564a:	fb0c 3202 	mla	r2, ip, r2, r3
 800564e:	460c      	mov	r4, r1
 8005650:	2001      	movs	r0, #1
 8005652:	e7a5      	b.n	80055a0 <_svfiprintf_r+0xd4>
 8005654:	2300      	movs	r3, #0
 8005656:	3401      	adds	r4, #1
 8005658:	9305      	str	r3, [sp, #20]
 800565a:	4619      	mov	r1, r3
 800565c:	f04f 0c0a 	mov.w	ip, #10
 8005660:	4620      	mov	r0, r4
 8005662:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005666:	3a30      	subs	r2, #48	; 0x30
 8005668:	2a09      	cmp	r2, #9
 800566a:	d903      	bls.n	8005674 <_svfiprintf_r+0x1a8>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0c5      	beq.n	80055fc <_svfiprintf_r+0x130>
 8005670:	9105      	str	r1, [sp, #20]
 8005672:	e7c3      	b.n	80055fc <_svfiprintf_r+0x130>
 8005674:	fb0c 2101 	mla	r1, ip, r1, r2
 8005678:	4604      	mov	r4, r0
 800567a:	2301      	movs	r3, #1
 800567c:	e7f0      	b.n	8005660 <_svfiprintf_r+0x194>
 800567e:	ab03      	add	r3, sp, #12
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	462a      	mov	r2, r5
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <_svfiprintf_r+0x1f8>)
 8005686:	a904      	add	r1, sp, #16
 8005688:	4638      	mov	r0, r7
 800568a:	f7fe f80f 	bl	80036ac <_printf_float>
 800568e:	1c42      	adds	r2, r0, #1
 8005690:	4606      	mov	r6, r0
 8005692:	d1d6      	bne.n	8005642 <_svfiprintf_r+0x176>
 8005694:	89ab      	ldrh	r3, [r5, #12]
 8005696:	065b      	lsls	r3, r3, #25
 8005698:	f53f af2c 	bmi.w	80054f4 <_svfiprintf_r+0x28>
 800569c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569e:	b01d      	add	sp, #116	; 0x74
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	462a      	mov	r2, r5
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <_svfiprintf_r+0x1f8>)
 80056ac:	a904      	add	r1, sp, #16
 80056ae:	4638      	mov	r0, r7
 80056b0:	f7fe faa0 	bl	8003bf4 <_printf_i>
 80056b4:	e7eb      	b.n	800568e <_svfiprintf_r+0x1c2>
 80056b6:	bf00      	nop
 80056b8:	080074bc 	.word	0x080074bc
 80056bc:	080074c6 	.word	0x080074c6
 80056c0:	080036ad 	.word	0x080036ad
 80056c4:	08005415 	.word	0x08005415
 80056c8:	080074c2 	.word	0x080074c2

080056cc <_sbrk_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d06      	ldr	r5, [pc, #24]	; (80056e8 <_sbrk_r+0x1c>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fc fff6 	bl	80026c8 <_sbrk>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_sbrk_r+0x1a>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_sbrk_r+0x1a>
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000250 	.word	0x20000250

080056ec <__assert_func>:
 80056ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ee:	4614      	mov	r4, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <__assert_func+0x2c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4605      	mov	r5, r0
 80056f8:	68d8      	ldr	r0, [r3, #12]
 80056fa:	b14c      	cbz	r4, 8005710 <__assert_func+0x24>
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <__assert_func+0x30>)
 80056fe:	9100      	str	r1, [sp, #0]
 8005700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005704:	4906      	ldr	r1, [pc, #24]	; (8005720 <__assert_func+0x34>)
 8005706:	462b      	mov	r3, r5
 8005708:	f000 f80e 	bl	8005728 <fiprintf>
 800570c:	f000 faa4 	bl	8005c58 <abort>
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__assert_func+0x38>)
 8005712:	461c      	mov	r4, r3
 8005714:	e7f3      	b.n	80056fe <__assert_func+0x12>
 8005716:	bf00      	nop
 8005718:	20000008 	.word	0x20000008
 800571c:	080074cd 	.word	0x080074cd
 8005720:	080074da 	.word	0x080074da
 8005724:	08007508 	.word	0x08007508

08005728 <fiprintf>:
 8005728:	b40e      	push	{r1, r2, r3}
 800572a:	b503      	push	{r0, r1, lr}
 800572c:	4601      	mov	r1, r0
 800572e:	ab03      	add	r3, sp, #12
 8005730:	4805      	ldr	r0, [pc, #20]	; (8005748 <fiprintf+0x20>)
 8005732:	f853 2b04 	ldr.w	r2, [r3], #4
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	f000 f88f 	bl	800585c <_vfiprintf_r>
 800573e:	b002      	add	sp, #8
 8005740:	f85d eb04 	ldr.w	lr, [sp], #4
 8005744:	b003      	add	sp, #12
 8005746:	4770      	bx	lr
 8005748:	20000008 	.word	0x20000008

0800574c <__ascii_mbtowc>:
 800574c:	b082      	sub	sp, #8
 800574e:	b901      	cbnz	r1, 8005752 <__ascii_mbtowc+0x6>
 8005750:	a901      	add	r1, sp, #4
 8005752:	b142      	cbz	r2, 8005766 <__ascii_mbtowc+0x1a>
 8005754:	b14b      	cbz	r3, 800576a <__ascii_mbtowc+0x1e>
 8005756:	7813      	ldrb	r3, [r2, #0]
 8005758:	600b      	str	r3, [r1, #0]
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	1e10      	subs	r0, r2, #0
 800575e:	bf18      	it	ne
 8005760:	2001      	movne	r0, #1
 8005762:	b002      	add	sp, #8
 8005764:	4770      	bx	lr
 8005766:	4610      	mov	r0, r2
 8005768:	e7fb      	b.n	8005762 <__ascii_mbtowc+0x16>
 800576a:	f06f 0001 	mvn.w	r0, #1
 800576e:	e7f8      	b.n	8005762 <__ascii_mbtowc+0x16>

08005770 <memmove>:
 8005770:	4288      	cmp	r0, r1
 8005772:	b510      	push	{r4, lr}
 8005774:	eb01 0402 	add.w	r4, r1, r2
 8005778:	d902      	bls.n	8005780 <memmove+0x10>
 800577a:	4284      	cmp	r4, r0
 800577c:	4623      	mov	r3, r4
 800577e:	d807      	bhi.n	8005790 <memmove+0x20>
 8005780:	1e43      	subs	r3, r0, #1
 8005782:	42a1      	cmp	r1, r4
 8005784:	d008      	beq.n	8005798 <memmove+0x28>
 8005786:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800578e:	e7f8      	b.n	8005782 <memmove+0x12>
 8005790:	4402      	add	r2, r0
 8005792:	4601      	mov	r1, r0
 8005794:	428a      	cmp	r2, r1
 8005796:	d100      	bne.n	800579a <memmove+0x2a>
 8005798:	bd10      	pop	{r4, pc}
 800579a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800579e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057a2:	e7f7      	b.n	8005794 <memmove+0x24>

080057a4 <__malloc_lock>:
 80057a4:	4801      	ldr	r0, [pc, #4]	; (80057ac <__malloc_lock+0x8>)
 80057a6:	f000 bc17 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 80057aa:	bf00      	nop
 80057ac:	20000258 	.word	0x20000258

080057b0 <__malloc_unlock>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__malloc_unlock+0x8>)
 80057b2:	f000 bc12 	b.w	8005fda <__retarget_lock_release_recursive>
 80057b6:	bf00      	nop
 80057b8:	20000258 	.word	0x20000258

080057bc <_realloc_r>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	4607      	mov	r7, r0
 80057c0:	4614      	mov	r4, r2
 80057c2:	460e      	mov	r6, r1
 80057c4:	b921      	cbnz	r1, 80057d0 <_realloc_r+0x14>
 80057c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057ca:	4611      	mov	r1, r2
 80057cc:	f7ff bdc8 	b.w	8005360 <_malloc_r>
 80057d0:	b922      	cbnz	r2, 80057dc <_realloc_r+0x20>
 80057d2:	f7ff fd75 	bl	80052c0 <_free_r>
 80057d6:	4625      	mov	r5, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057dc:	f000 fc62 	bl	80060a4 <_malloc_usable_size_r>
 80057e0:	42a0      	cmp	r0, r4
 80057e2:	d20f      	bcs.n	8005804 <_realloc_r+0x48>
 80057e4:	4621      	mov	r1, r4
 80057e6:	4638      	mov	r0, r7
 80057e8:	f7ff fdba 	bl	8005360 <_malloc_r>
 80057ec:	4605      	mov	r5, r0
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d0f2      	beq.n	80057d8 <_realloc_r+0x1c>
 80057f2:	4631      	mov	r1, r6
 80057f4:	4622      	mov	r2, r4
 80057f6:	f7ff f9c7 	bl	8004b88 <memcpy>
 80057fa:	4631      	mov	r1, r6
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff fd5f 	bl	80052c0 <_free_r>
 8005802:	e7e9      	b.n	80057d8 <_realloc_r+0x1c>
 8005804:	4635      	mov	r5, r6
 8005806:	e7e7      	b.n	80057d8 <_realloc_r+0x1c>

08005808 <__sfputc_r>:
 8005808:	6893      	ldr	r3, [r2, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	b410      	push	{r4}
 8005810:	6093      	str	r3, [r2, #8]
 8005812:	da08      	bge.n	8005826 <__sfputc_r+0x1e>
 8005814:	6994      	ldr	r4, [r2, #24]
 8005816:	42a3      	cmp	r3, r4
 8005818:	db01      	blt.n	800581e <__sfputc_r+0x16>
 800581a:	290a      	cmp	r1, #10
 800581c:	d103      	bne.n	8005826 <__sfputc_r+0x1e>
 800581e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005822:	f000 b94b 	b.w	8005abc <__swbuf_r>
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	1c58      	adds	r0, r3, #1
 800582a:	6010      	str	r0, [r2, #0]
 800582c:	7019      	strb	r1, [r3, #0]
 800582e:	4608      	mov	r0, r1
 8005830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005834:	4770      	bx	lr

08005836 <__sfputs_r>:
 8005836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005838:	4606      	mov	r6, r0
 800583a:	460f      	mov	r7, r1
 800583c:	4614      	mov	r4, r2
 800583e:	18d5      	adds	r5, r2, r3
 8005840:	42ac      	cmp	r4, r5
 8005842:	d101      	bne.n	8005848 <__sfputs_r+0x12>
 8005844:	2000      	movs	r0, #0
 8005846:	e007      	b.n	8005858 <__sfputs_r+0x22>
 8005848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584c:	463a      	mov	r2, r7
 800584e:	4630      	mov	r0, r6
 8005850:	f7ff ffda 	bl	8005808 <__sfputc_r>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d1f3      	bne.n	8005840 <__sfputs_r+0xa>
 8005858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800585c <_vfiprintf_r>:
 800585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005860:	460d      	mov	r5, r1
 8005862:	b09d      	sub	sp, #116	; 0x74
 8005864:	4614      	mov	r4, r2
 8005866:	4698      	mov	r8, r3
 8005868:	4606      	mov	r6, r0
 800586a:	b118      	cbz	r0, 8005874 <_vfiprintf_r+0x18>
 800586c:	6983      	ldr	r3, [r0, #24]
 800586e:	b90b      	cbnz	r3, 8005874 <_vfiprintf_r+0x18>
 8005870:	f000 fb14 	bl	8005e9c <__sinit>
 8005874:	4b89      	ldr	r3, [pc, #548]	; (8005a9c <_vfiprintf_r+0x240>)
 8005876:	429d      	cmp	r5, r3
 8005878:	d11b      	bne.n	80058b2 <_vfiprintf_r+0x56>
 800587a:	6875      	ldr	r5, [r6, #4]
 800587c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800587e:	07d9      	lsls	r1, r3, #31
 8005880:	d405      	bmi.n	800588e <_vfiprintf_r+0x32>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	059a      	lsls	r2, r3, #22
 8005886:	d402      	bmi.n	800588e <_vfiprintf_r+0x32>
 8005888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800588a:	f000 fba5 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	071b      	lsls	r3, r3, #28
 8005892:	d501      	bpl.n	8005898 <_vfiprintf_r+0x3c>
 8005894:	692b      	ldr	r3, [r5, #16]
 8005896:	b9eb      	cbnz	r3, 80058d4 <_vfiprintf_r+0x78>
 8005898:	4629      	mov	r1, r5
 800589a:	4630      	mov	r0, r6
 800589c:	f000 f96e 	bl	8005b7c <__swsetup_r>
 80058a0:	b1c0      	cbz	r0, 80058d4 <_vfiprintf_r+0x78>
 80058a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058a4:	07dc      	lsls	r4, r3, #31
 80058a6:	d50e      	bpl.n	80058c6 <_vfiprintf_r+0x6a>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	b01d      	add	sp, #116	; 0x74
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	4b7b      	ldr	r3, [pc, #492]	; (8005aa0 <_vfiprintf_r+0x244>)
 80058b4:	429d      	cmp	r5, r3
 80058b6:	d101      	bne.n	80058bc <_vfiprintf_r+0x60>
 80058b8:	68b5      	ldr	r5, [r6, #8]
 80058ba:	e7df      	b.n	800587c <_vfiprintf_r+0x20>
 80058bc:	4b79      	ldr	r3, [pc, #484]	; (8005aa4 <_vfiprintf_r+0x248>)
 80058be:	429d      	cmp	r5, r3
 80058c0:	bf08      	it	eq
 80058c2:	68f5      	ldreq	r5, [r6, #12]
 80058c4:	e7da      	b.n	800587c <_vfiprintf_r+0x20>
 80058c6:	89ab      	ldrh	r3, [r5, #12]
 80058c8:	0598      	lsls	r0, r3, #22
 80058ca:	d4ed      	bmi.n	80058a8 <_vfiprintf_r+0x4c>
 80058cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ce:	f000 fb84 	bl	8005fda <__retarget_lock_release_recursive>
 80058d2:	e7e9      	b.n	80058a8 <_vfiprintf_r+0x4c>
 80058d4:	2300      	movs	r3, #0
 80058d6:	9309      	str	r3, [sp, #36]	; 0x24
 80058d8:	2320      	movs	r3, #32
 80058da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058de:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e2:	2330      	movs	r3, #48	; 0x30
 80058e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005aa8 <_vfiprintf_r+0x24c>
 80058e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058ec:	f04f 0901 	mov.w	r9, #1
 80058f0:	4623      	mov	r3, r4
 80058f2:	469a      	mov	sl, r3
 80058f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f8:	b10a      	cbz	r2, 80058fe <_vfiprintf_r+0xa2>
 80058fa:	2a25      	cmp	r2, #37	; 0x25
 80058fc:	d1f9      	bne.n	80058f2 <_vfiprintf_r+0x96>
 80058fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005902:	d00b      	beq.n	800591c <_vfiprintf_r+0xc0>
 8005904:	465b      	mov	r3, fp
 8005906:	4622      	mov	r2, r4
 8005908:	4629      	mov	r1, r5
 800590a:	4630      	mov	r0, r6
 800590c:	f7ff ff93 	bl	8005836 <__sfputs_r>
 8005910:	3001      	adds	r0, #1
 8005912:	f000 80aa 	beq.w	8005a6a <_vfiprintf_r+0x20e>
 8005916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005918:	445a      	add	r2, fp
 800591a:	9209      	str	r2, [sp, #36]	; 0x24
 800591c:	f89a 3000 	ldrb.w	r3, [sl]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80a2 	beq.w	8005a6a <_vfiprintf_r+0x20e>
 8005926:	2300      	movs	r3, #0
 8005928:	f04f 32ff 	mov.w	r2, #4294967295
 800592c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005930:	f10a 0a01 	add.w	sl, sl, #1
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800593c:	931a      	str	r3, [sp, #104]	; 0x68
 800593e:	4654      	mov	r4, sl
 8005940:	2205      	movs	r2, #5
 8005942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005946:	4858      	ldr	r0, [pc, #352]	; (8005aa8 <_vfiprintf_r+0x24c>)
 8005948:	f7fa fc4a 	bl	80001e0 <memchr>
 800594c:	9a04      	ldr	r2, [sp, #16]
 800594e:	b9d8      	cbnz	r0, 8005988 <_vfiprintf_r+0x12c>
 8005950:	06d1      	lsls	r1, r2, #27
 8005952:	bf44      	itt	mi
 8005954:	2320      	movmi	r3, #32
 8005956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595a:	0713      	lsls	r3, r2, #28
 800595c:	bf44      	itt	mi
 800595e:	232b      	movmi	r3, #43	; 0x2b
 8005960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005964:	f89a 3000 	ldrb.w	r3, [sl]
 8005968:	2b2a      	cmp	r3, #42	; 0x2a
 800596a:	d015      	beq.n	8005998 <_vfiprintf_r+0x13c>
 800596c:	9a07      	ldr	r2, [sp, #28]
 800596e:	4654      	mov	r4, sl
 8005970:	2000      	movs	r0, #0
 8005972:	f04f 0c0a 	mov.w	ip, #10
 8005976:	4621      	mov	r1, r4
 8005978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800597c:	3b30      	subs	r3, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	d94e      	bls.n	8005a20 <_vfiprintf_r+0x1c4>
 8005982:	b1b0      	cbz	r0, 80059b2 <_vfiprintf_r+0x156>
 8005984:	9207      	str	r2, [sp, #28]
 8005986:	e014      	b.n	80059b2 <_vfiprintf_r+0x156>
 8005988:	eba0 0308 	sub.w	r3, r0, r8
 800598c:	fa09 f303 	lsl.w	r3, r9, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	46a2      	mov	sl, r4
 8005996:	e7d2      	b.n	800593e <_vfiprintf_r+0xe2>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	1d19      	adds	r1, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	9103      	str	r1, [sp, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bfbb      	ittet	lt
 80059a4:	425b      	neglt	r3, r3
 80059a6:	f042 0202 	orrlt.w	r2, r2, #2
 80059aa:	9307      	strge	r3, [sp, #28]
 80059ac:	9307      	strlt	r3, [sp, #28]
 80059ae:	bfb8      	it	lt
 80059b0:	9204      	strlt	r2, [sp, #16]
 80059b2:	7823      	ldrb	r3, [r4, #0]
 80059b4:	2b2e      	cmp	r3, #46	; 0x2e
 80059b6:	d10c      	bne.n	80059d2 <_vfiprintf_r+0x176>
 80059b8:	7863      	ldrb	r3, [r4, #1]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d135      	bne.n	8005a2a <_vfiprintf_r+0x1ce>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	1d1a      	adds	r2, r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	9203      	str	r2, [sp, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfb8      	it	lt
 80059ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80059ce:	3402      	adds	r4, #2
 80059d0:	9305      	str	r3, [sp, #20]
 80059d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ab8 <_vfiprintf_r+0x25c>
 80059d6:	7821      	ldrb	r1, [r4, #0]
 80059d8:	2203      	movs	r2, #3
 80059da:	4650      	mov	r0, sl
 80059dc:	f7fa fc00 	bl	80001e0 <memchr>
 80059e0:	b140      	cbz	r0, 80059f4 <_vfiprintf_r+0x198>
 80059e2:	2340      	movs	r3, #64	; 0x40
 80059e4:	eba0 000a 	sub.w	r0, r0, sl
 80059e8:	fa03 f000 	lsl.w	r0, r3, r0
 80059ec:	9b04      	ldr	r3, [sp, #16]
 80059ee:	4303      	orrs	r3, r0
 80059f0:	3401      	adds	r4, #1
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f8:	482c      	ldr	r0, [pc, #176]	; (8005aac <_vfiprintf_r+0x250>)
 80059fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059fe:	2206      	movs	r2, #6
 8005a00:	f7fa fbee 	bl	80001e0 <memchr>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d03f      	beq.n	8005a88 <_vfiprintf_r+0x22c>
 8005a08:	4b29      	ldr	r3, [pc, #164]	; (8005ab0 <_vfiprintf_r+0x254>)
 8005a0a:	bb1b      	cbnz	r3, 8005a54 <_vfiprintf_r+0x1f8>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	3307      	adds	r3, #7
 8005a10:	f023 0307 	bic.w	r3, r3, #7
 8005a14:	3308      	adds	r3, #8
 8005a16:	9303      	str	r3, [sp, #12]
 8005a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1a:	443b      	add	r3, r7
 8005a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1e:	e767      	b.n	80058f0 <_vfiprintf_r+0x94>
 8005a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a24:	460c      	mov	r4, r1
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7a5      	b.n	8005976 <_vfiprintf_r+0x11a>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	3401      	adds	r4, #1
 8005a2e:	9305      	str	r3, [sp, #20]
 8005a30:	4619      	mov	r1, r3
 8005a32:	f04f 0c0a 	mov.w	ip, #10
 8005a36:	4620      	mov	r0, r4
 8005a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a3c:	3a30      	subs	r2, #48	; 0x30
 8005a3e:	2a09      	cmp	r2, #9
 8005a40:	d903      	bls.n	8005a4a <_vfiprintf_r+0x1ee>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0c5      	beq.n	80059d2 <_vfiprintf_r+0x176>
 8005a46:	9105      	str	r1, [sp, #20]
 8005a48:	e7c3      	b.n	80059d2 <_vfiprintf_r+0x176>
 8005a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4e:	4604      	mov	r4, r0
 8005a50:	2301      	movs	r3, #1
 8005a52:	e7f0      	b.n	8005a36 <_vfiprintf_r+0x1da>
 8005a54:	ab03      	add	r3, sp, #12
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	462a      	mov	r2, r5
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <_vfiprintf_r+0x258>)
 8005a5c:	a904      	add	r1, sp, #16
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7fd fe24 	bl	80036ac <_printf_float>
 8005a64:	4607      	mov	r7, r0
 8005a66:	1c78      	adds	r0, r7, #1
 8005a68:	d1d6      	bne.n	8005a18 <_vfiprintf_r+0x1bc>
 8005a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a6c:	07d9      	lsls	r1, r3, #31
 8005a6e:	d405      	bmi.n	8005a7c <_vfiprintf_r+0x220>
 8005a70:	89ab      	ldrh	r3, [r5, #12]
 8005a72:	059a      	lsls	r2, r3, #22
 8005a74:	d402      	bmi.n	8005a7c <_vfiprintf_r+0x220>
 8005a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a78:	f000 faaf 	bl	8005fda <__retarget_lock_release_recursive>
 8005a7c:	89ab      	ldrh	r3, [r5, #12]
 8005a7e:	065b      	lsls	r3, r3, #25
 8005a80:	f53f af12 	bmi.w	80058a8 <_vfiprintf_r+0x4c>
 8005a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a86:	e711      	b.n	80058ac <_vfiprintf_r+0x50>
 8005a88:	ab03      	add	r3, sp, #12
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <_vfiprintf_r+0x258>)
 8005a90:	a904      	add	r1, sp, #16
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7fe f8ae 	bl	8003bf4 <_printf_i>
 8005a98:	e7e4      	b.n	8005a64 <_vfiprintf_r+0x208>
 8005a9a:	bf00      	nop
 8005a9c:	08007634 	.word	0x08007634
 8005aa0:	08007654 	.word	0x08007654
 8005aa4:	08007614 	.word	0x08007614
 8005aa8:	080074bc 	.word	0x080074bc
 8005aac:	080074c6 	.word	0x080074c6
 8005ab0:	080036ad 	.word	0x080036ad
 8005ab4:	08005837 	.word	0x08005837
 8005ab8:	080074c2 	.word	0x080074c2

08005abc <__swbuf_r>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	460e      	mov	r6, r1
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	b118      	cbz	r0, 8005ace <__swbuf_r+0x12>
 8005ac6:	6983      	ldr	r3, [r0, #24]
 8005ac8:	b90b      	cbnz	r3, 8005ace <__swbuf_r+0x12>
 8005aca:	f000 f9e7 	bl	8005e9c <__sinit>
 8005ace:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <__swbuf_r+0x98>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d12b      	bne.n	8005b2c <__swbuf_r+0x70>
 8005ad4:	686c      	ldr	r4, [r5, #4]
 8005ad6:	69a3      	ldr	r3, [r4, #24]
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	071a      	lsls	r2, r3, #28
 8005ade:	d52f      	bpl.n	8005b40 <__swbuf_r+0x84>
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	b36b      	cbz	r3, 8005b40 <__swbuf_r+0x84>
 8005ae4:	6923      	ldr	r3, [r4, #16]
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	1ac0      	subs	r0, r0, r3
 8005aea:	6963      	ldr	r3, [r4, #20]
 8005aec:	b2f6      	uxtb	r6, r6
 8005aee:	4283      	cmp	r3, r0
 8005af0:	4637      	mov	r7, r6
 8005af2:	dc04      	bgt.n	8005afe <__swbuf_r+0x42>
 8005af4:	4621      	mov	r1, r4
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 f93c 	bl	8005d74 <_fflush_r>
 8005afc:	bb30      	cbnz	r0, 8005b4c <__swbuf_r+0x90>
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	60a3      	str	r3, [r4, #8]
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	6022      	str	r2, [r4, #0]
 8005b0a:	701e      	strb	r6, [r3, #0]
 8005b0c:	6963      	ldr	r3, [r4, #20]
 8005b0e:	3001      	adds	r0, #1
 8005b10:	4283      	cmp	r3, r0
 8005b12:	d004      	beq.n	8005b1e <__swbuf_r+0x62>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	07db      	lsls	r3, r3, #31
 8005b18:	d506      	bpl.n	8005b28 <__swbuf_r+0x6c>
 8005b1a:	2e0a      	cmp	r6, #10
 8005b1c:	d104      	bne.n	8005b28 <__swbuf_r+0x6c>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f927 	bl	8005d74 <_fflush_r>
 8005b26:	b988      	cbnz	r0, 8005b4c <__swbuf_r+0x90>
 8005b28:	4638      	mov	r0, r7
 8005b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <__swbuf_r+0x9c>)
 8005b2e:	429c      	cmp	r4, r3
 8005b30:	d101      	bne.n	8005b36 <__swbuf_r+0x7a>
 8005b32:	68ac      	ldr	r4, [r5, #8]
 8005b34:	e7cf      	b.n	8005ad6 <__swbuf_r+0x1a>
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <__swbuf_r+0xa0>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	bf08      	it	eq
 8005b3c:	68ec      	ldreq	r4, [r5, #12]
 8005b3e:	e7ca      	b.n	8005ad6 <__swbuf_r+0x1a>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 f81a 	bl	8005b7c <__swsetup_r>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d0cb      	beq.n	8005ae4 <__swbuf_r+0x28>
 8005b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005b50:	e7ea      	b.n	8005b28 <__swbuf_r+0x6c>
 8005b52:	bf00      	nop
 8005b54:	08007634 	.word	0x08007634
 8005b58:	08007654 	.word	0x08007654
 8005b5c:	08007614 	.word	0x08007614

08005b60 <__ascii_wctomb>:
 8005b60:	b149      	cbz	r1, 8005b76 <__ascii_wctomb+0x16>
 8005b62:	2aff      	cmp	r2, #255	; 0xff
 8005b64:	bf85      	ittet	hi
 8005b66:	238a      	movhi	r3, #138	; 0x8a
 8005b68:	6003      	strhi	r3, [r0, #0]
 8005b6a:	700a      	strbls	r2, [r1, #0]
 8005b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b70:	bf98      	it	ls
 8005b72:	2001      	movls	r0, #1
 8005b74:	4770      	bx	lr
 8005b76:	4608      	mov	r0, r1
 8005b78:	4770      	bx	lr
	...

08005b7c <__swsetup_r>:
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <__swsetup_r+0xcc>)
 8005b7e:	b570      	push	{r4, r5, r6, lr}
 8005b80:	681d      	ldr	r5, [r3, #0]
 8005b82:	4606      	mov	r6, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	b125      	cbz	r5, 8005b92 <__swsetup_r+0x16>
 8005b88:	69ab      	ldr	r3, [r5, #24]
 8005b8a:	b913      	cbnz	r3, 8005b92 <__swsetup_r+0x16>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 f985 	bl	8005e9c <__sinit>
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <__swsetup_r+0xd0>)
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d10f      	bne.n	8005bb8 <__swsetup_r+0x3c>
 8005b98:	686c      	ldr	r4, [r5, #4]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba0:	0719      	lsls	r1, r3, #28
 8005ba2:	d42c      	bmi.n	8005bfe <__swsetup_r+0x82>
 8005ba4:	06dd      	lsls	r5, r3, #27
 8005ba6:	d411      	bmi.n	8005bcc <__swsetup_r+0x50>
 8005ba8:	2309      	movs	r3, #9
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	e03e      	b.n	8005c36 <__swsetup_r+0xba>
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <__swsetup_r+0xd4>)
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d101      	bne.n	8005bc2 <__swsetup_r+0x46>
 8005bbe:	68ac      	ldr	r4, [r5, #8]
 8005bc0:	e7eb      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <__swsetup_r+0xd8>)
 8005bc4:	429c      	cmp	r4, r3
 8005bc6:	bf08      	it	eq
 8005bc8:	68ec      	ldreq	r4, [r5, #12]
 8005bca:	e7e6      	b.n	8005b9a <__swsetup_r+0x1e>
 8005bcc:	0758      	lsls	r0, r3, #29
 8005bce:	d512      	bpl.n	8005bf6 <__swsetup_r+0x7a>
 8005bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd2:	b141      	cbz	r1, 8005be6 <__swsetup_r+0x6a>
 8005bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	d002      	beq.n	8005be2 <__swsetup_r+0x66>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff fb6f 	bl	80052c0 <_free_r>
 8005be2:	2300      	movs	r3, #0
 8005be4:	6363      	str	r3, [r4, #52]	; 0x34
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f043 0308 	orr.w	r3, r3, #8
 8005bfc:	81a3      	strh	r3, [r4, #12]
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	b94b      	cbnz	r3, 8005c16 <__swsetup_r+0x9a>
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0c:	d003      	beq.n	8005c16 <__swsetup_r+0x9a>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 fa07 	bl	8006024 <__smakebuf_r>
 8005c16:	89a0      	ldrh	r0, [r4, #12]
 8005c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c1c:	f010 0301 	ands.w	r3, r0, #1
 8005c20:	d00a      	beq.n	8005c38 <__swsetup_r+0xbc>
 8005c22:	2300      	movs	r3, #0
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	425b      	negs	r3, r3
 8005c2a:	61a3      	str	r3, [r4, #24]
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	b943      	cbnz	r3, 8005c42 <__swsetup_r+0xc6>
 8005c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c34:	d1ba      	bne.n	8005bac <__swsetup_r+0x30>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	0781      	lsls	r1, r0, #30
 8005c3a:	bf58      	it	pl
 8005c3c:	6963      	ldrpl	r3, [r4, #20]
 8005c3e:	60a3      	str	r3, [r4, #8]
 8005c40:	e7f4      	b.n	8005c2c <__swsetup_r+0xb0>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e7f7      	b.n	8005c36 <__swsetup_r+0xba>
 8005c46:	bf00      	nop
 8005c48:	20000008 	.word	0x20000008
 8005c4c:	08007634 	.word	0x08007634
 8005c50:	08007654 	.word	0x08007654
 8005c54:	08007614 	.word	0x08007614

08005c58 <abort>:
 8005c58:	b508      	push	{r3, lr}
 8005c5a:	2006      	movs	r0, #6
 8005c5c:	f000 fa52 	bl	8006104 <raise>
 8005c60:	2001      	movs	r0, #1
 8005c62:	f7fc fcba 	bl	80025da <_exit>
	...

08005c68 <__sflush_r>:
 8005c68:	898a      	ldrh	r2, [r1, #12]
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	4605      	mov	r5, r0
 8005c70:	0710      	lsls	r0, r2, #28
 8005c72:	460c      	mov	r4, r1
 8005c74:	d458      	bmi.n	8005d28 <__sflush_r+0xc0>
 8005c76:	684b      	ldr	r3, [r1, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dc05      	bgt.n	8005c88 <__sflush_r+0x20>
 8005c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dc02      	bgt.n	8005c88 <__sflush_r+0x20>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	d0f9      	beq.n	8005c82 <__sflush_r+0x1a>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c94:	682f      	ldr	r7, [r5, #0]
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	d032      	beq.n	8005d00 <__sflush_r+0x98>
 8005c9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	075a      	lsls	r2, r3, #29
 8005ca0:	d505      	bpl.n	8005cae <__sflush_r+0x46>
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	1ac0      	subs	r0, r0, r3
 8005ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca8:	b10b      	cbz	r3, 8005cae <__sflush_r+0x46>
 8005caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cac:	1ac0      	subs	r0, r0, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cb4:	6a21      	ldr	r1, [r4, #32]
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b0      	blx	r6
 8005cba:	1c43      	adds	r3, r0, #1
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	d106      	bne.n	8005cce <__sflush_r+0x66>
 8005cc0:	6829      	ldr	r1, [r5, #0]
 8005cc2:	291d      	cmp	r1, #29
 8005cc4:	d82c      	bhi.n	8005d20 <__sflush_r+0xb8>
 8005cc6:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <__sflush_r+0x108>)
 8005cc8:	40ca      	lsrs	r2, r1
 8005cca:	07d6      	lsls	r6, r2, #31
 8005ccc:	d528      	bpl.n	8005d20 <__sflush_r+0xb8>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6062      	str	r2, [r4, #4]
 8005cd2:	04d9      	lsls	r1, r3, #19
 8005cd4:	6922      	ldr	r2, [r4, #16]
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	d504      	bpl.n	8005ce4 <__sflush_r+0x7c>
 8005cda:	1c42      	adds	r2, r0, #1
 8005cdc:	d101      	bne.n	8005ce2 <__sflush_r+0x7a>
 8005cde:	682b      	ldr	r3, [r5, #0]
 8005ce0:	b903      	cbnz	r3, 8005ce4 <__sflush_r+0x7c>
 8005ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ce6:	602f      	str	r7, [r5, #0]
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d0ca      	beq.n	8005c82 <__sflush_r+0x1a>
 8005cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	d002      	beq.n	8005cfa <__sflush_r+0x92>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f7ff fae3 	bl	80052c0 <_free_r>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	6360      	str	r0, [r4, #52]	; 0x34
 8005cfe:	e7c1      	b.n	8005c84 <__sflush_r+0x1c>
 8005d00:	6a21      	ldr	r1, [r4, #32]
 8005d02:	2301      	movs	r3, #1
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	1c41      	adds	r1, r0, #1
 8005d0a:	d1c7      	bne.n	8005c9c <__sflush_r+0x34>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c4      	beq.n	8005c9c <__sflush_r+0x34>
 8005d12:	2b1d      	cmp	r3, #29
 8005d14:	d001      	beq.n	8005d1a <__sflush_r+0xb2>
 8005d16:	2b16      	cmp	r3, #22
 8005d18:	d101      	bne.n	8005d1e <__sflush_r+0xb6>
 8005d1a:	602f      	str	r7, [r5, #0]
 8005d1c:	e7b1      	b.n	8005c82 <__sflush_r+0x1a>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e7ad      	b.n	8005c84 <__sflush_r+0x1c>
 8005d28:	690f      	ldr	r7, [r1, #16]
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	d0a9      	beq.n	8005c82 <__sflush_r+0x1a>
 8005d2e:	0793      	lsls	r3, r2, #30
 8005d30:	680e      	ldr	r6, [r1, #0]
 8005d32:	bf08      	it	eq
 8005d34:	694b      	ldreq	r3, [r1, #20]
 8005d36:	600f      	str	r7, [r1, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	eba6 0807 	sub.w	r8, r6, r7
 8005d40:	608b      	str	r3, [r1, #8]
 8005d42:	f1b8 0f00 	cmp.w	r8, #0
 8005d46:	dd9c      	ble.n	8005c82 <__sflush_r+0x1a>
 8005d48:	6a21      	ldr	r1, [r4, #32]
 8005d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	463a      	mov	r2, r7
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b0      	blx	r6
 8005d54:	2800      	cmp	r0, #0
 8005d56:	dc06      	bgt.n	8005d66 <__sflush_r+0xfe>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	e78e      	b.n	8005c84 <__sflush_r+0x1c>
 8005d66:	4407      	add	r7, r0
 8005d68:	eba8 0800 	sub.w	r8, r8, r0
 8005d6c:	e7e9      	b.n	8005d42 <__sflush_r+0xda>
 8005d6e:	bf00      	nop
 8005d70:	20400001 	.word	0x20400001

08005d74 <_fflush_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b913      	cbnz	r3, 8005d84 <_fflush_r+0x10>
 8005d7e:	2500      	movs	r5, #0
 8005d80:	4628      	mov	r0, r5
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	b118      	cbz	r0, 8005d8e <_fflush_r+0x1a>
 8005d86:	6983      	ldr	r3, [r0, #24]
 8005d88:	b90b      	cbnz	r3, 8005d8e <_fflush_r+0x1a>
 8005d8a:	f000 f887 	bl	8005e9c <__sinit>
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <_fflush_r+0x6c>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d11b      	bne.n	8005dcc <_fflush_r+0x58>
 8005d94:	686c      	ldr	r4, [r5, #4]
 8005d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ef      	beq.n	8005d7e <_fflush_r+0xa>
 8005d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da0:	07d0      	lsls	r0, r2, #31
 8005da2:	d404      	bmi.n	8005dae <_fflush_r+0x3a>
 8005da4:	0599      	lsls	r1, r3, #22
 8005da6:	d402      	bmi.n	8005dae <_fflush_r+0x3a>
 8005da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005daa:	f000 f915 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8005dae:	4628      	mov	r0, r5
 8005db0:	4621      	mov	r1, r4
 8005db2:	f7ff ff59 	bl	8005c68 <__sflush_r>
 8005db6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005db8:	07da      	lsls	r2, r3, #31
 8005dba:	4605      	mov	r5, r0
 8005dbc:	d4e0      	bmi.n	8005d80 <_fflush_r+0xc>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	059b      	lsls	r3, r3, #22
 8005dc2:	d4dd      	bmi.n	8005d80 <_fflush_r+0xc>
 8005dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc6:	f000 f908 	bl	8005fda <__retarget_lock_release_recursive>
 8005dca:	e7d9      	b.n	8005d80 <_fflush_r+0xc>
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <_fflush_r+0x70>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d101      	bne.n	8005dd6 <_fflush_r+0x62>
 8005dd2:	68ac      	ldr	r4, [r5, #8]
 8005dd4:	e7df      	b.n	8005d96 <_fflush_r+0x22>
 8005dd6:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <_fflush_r+0x74>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	bf08      	it	eq
 8005ddc:	68ec      	ldreq	r4, [r5, #12]
 8005dde:	e7da      	b.n	8005d96 <_fflush_r+0x22>
 8005de0:	08007634 	.word	0x08007634
 8005de4:	08007654 	.word	0x08007654
 8005de8:	08007614 	.word	0x08007614

08005dec <std>:
 8005dec:	2300      	movs	r3, #0
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
 8005df2:	e9c0 3300 	strd	r3, r3, [r0]
 8005df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dfa:	6083      	str	r3, [r0, #8]
 8005dfc:	8181      	strh	r1, [r0, #12]
 8005dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8005e00:	81c2      	strh	r2, [r0, #14]
 8005e02:	6183      	str	r3, [r0, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	2208      	movs	r2, #8
 8005e08:	305c      	adds	r0, #92	; 0x5c
 8005e0a:	f7fd fba7 	bl	800355c <memset>
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x38>)
 8005e10:	6263      	str	r3, [r4, #36]	; 0x24
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x3c>)
 8005e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <std+0x40>)
 8005e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <std+0x44>)
 8005e1c:	6224      	str	r4, [r4, #32]
 8005e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	0800613d 	.word	0x0800613d
 8005e28:	0800615f 	.word	0x0800615f
 8005e2c:	08006197 	.word	0x08006197
 8005e30:	080061bb 	.word	0x080061bb

08005e34 <_cleanup_r>:
 8005e34:	4901      	ldr	r1, [pc, #4]	; (8005e3c <_cleanup_r+0x8>)
 8005e36:	f000 b8af 	b.w	8005f98 <_fwalk_reent>
 8005e3a:	bf00      	nop
 8005e3c:	08005d75 	.word	0x08005d75

08005e40 <__sfmoreglue>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	1e4a      	subs	r2, r1, #1
 8005e44:	2568      	movs	r5, #104	; 0x68
 8005e46:	4355      	muls	r5, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e4e:	f7ff fa87 	bl	8005360 <_malloc_r>
 8005e52:	4604      	mov	r4, r0
 8005e54:	b140      	cbz	r0, 8005e68 <__sfmoreglue+0x28>
 8005e56:	2100      	movs	r1, #0
 8005e58:	e9c0 1600 	strd	r1, r6, [r0]
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e64:	f7fd fb7a 	bl	800355c <memset>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <__sfp_lock_acquire>:
 8005e6c:	4801      	ldr	r0, [pc, #4]	; (8005e74 <__sfp_lock_acquire+0x8>)
 8005e6e:	f000 b8b3 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e72:	bf00      	nop
 8005e74:	2000025c 	.word	0x2000025c

08005e78 <__sfp_lock_release>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__sfp_lock_release+0x8>)
 8005e7a:	f000 b8ae 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e7e:	bf00      	nop
 8005e80:	2000025c 	.word	0x2000025c

08005e84 <__sinit_lock_acquire>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__sinit_lock_acquire+0x8>)
 8005e86:	f000 b8a7 	b.w	8005fd8 <__retarget_lock_acquire_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000257 	.word	0x20000257

08005e90 <__sinit_lock_release>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__sinit_lock_release+0x8>)
 8005e92:	f000 b8a2 	b.w	8005fda <__retarget_lock_release_recursive>
 8005e96:	bf00      	nop
 8005e98:	20000257 	.word	0x20000257

08005e9c <__sinit>:
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	f7ff fff0 	bl	8005e84 <__sinit_lock_acquire>
 8005ea4:	69a3      	ldr	r3, [r4, #24]
 8005ea6:	b11b      	cbz	r3, 8005eb0 <__sinit+0x14>
 8005ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eac:	f7ff bff0 	b.w	8005e90 <__sinit_lock_release>
 8005eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <__sinit+0x68>)
 8005eb8:	4a13      	ldr	r2, [pc, #76]	; (8005f08 <__sinit+0x6c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ebe:	42a3      	cmp	r3, r4
 8005ec0:	bf04      	itt	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	61a3      	streq	r3, [r4, #24]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 f820 	bl	8005f0c <__sfp>
 8005ecc:	6060      	str	r0, [r4, #4]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f81c 	bl	8005f0c <__sfp>
 8005ed4:	60a0      	str	r0, [r4, #8]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f000 f818 	bl	8005f0c <__sfp>
 8005edc:	2200      	movs	r2, #0
 8005ede:	60e0      	str	r0, [r4, #12]
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	6860      	ldr	r0, [r4, #4]
 8005ee4:	f7ff ff82 	bl	8005dec <std>
 8005ee8:	68a0      	ldr	r0, [r4, #8]
 8005eea:	2201      	movs	r2, #1
 8005eec:	2109      	movs	r1, #9
 8005eee:	f7ff ff7d 	bl	8005dec <std>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	2112      	movs	r1, #18
 8005ef8:	f7ff ff78 	bl	8005dec <std>
 8005efc:	2301      	movs	r3, #1
 8005efe:	61a3      	str	r3, [r4, #24]
 8005f00:	e7d2      	b.n	8005ea8 <__sinit+0xc>
 8005f02:	bf00      	nop
 8005f04:	08007294 	.word	0x08007294
 8005f08:	08005e35 	.word	0x08005e35

08005f0c <__sfp>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	4607      	mov	r7, r0
 8005f10:	f7ff ffac 	bl	8005e6c <__sfp_lock_acquire>
 8005f14:	4b1e      	ldr	r3, [pc, #120]	; (8005f90 <__sfp+0x84>)
 8005f16:	681e      	ldr	r6, [r3, #0]
 8005f18:	69b3      	ldr	r3, [r6, #24]
 8005f1a:	b913      	cbnz	r3, 8005f22 <__sfp+0x16>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff ffbd 	bl	8005e9c <__sinit>
 8005f22:	3648      	adds	r6, #72	; 0x48
 8005f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	d503      	bpl.n	8005f34 <__sfp+0x28>
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	b30b      	cbz	r3, 8005f74 <__sfp+0x68>
 8005f30:	6836      	ldr	r6, [r6, #0]
 8005f32:	e7f7      	b.n	8005f24 <__sfp+0x18>
 8005f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f38:	b9d5      	cbnz	r5, 8005f70 <__sfp+0x64>
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <__sfp+0x88>)
 8005f3c:	60e3      	str	r3, [r4, #12]
 8005f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f42:	6665      	str	r5, [r4, #100]	; 0x64
 8005f44:	f000 f847 	bl	8005fd6 <__retarget_lock_init_recursive>
 8005f48:	f7ff ff96 	bl	8005e78 <__sfp_lock_release>
 8005f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f54:	6025      	str	r5, [r4, #0]
 8005f56:	61a5      	str	r5, [r4, #24]
 8005f58:	2208      	movs	r2, #8
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f60:	f7fd fafc 	bl	800355c <memset>
 8005f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f70:	3468      	adds	r4, #104	; 0x68
 8005f72:	e7d9      	b.n	8005f28 <__sfp+0x1c>
 8005f74:	2104      	movs	r1, #4
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff ff62 	bl	8005e40 <__sfmoreglue>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	6030      	str	r0, [r6, #0]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d1d5      	bne.n	8005f30 <__sfp+0x24>
 8005f84:	f7ff ff78 	bl	8005e78 <__sfp_lock_release>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	e7ee      	b.n	8005f6c <__sfp+0x60>
 8005f8e:	bf00      	nop
 8005f90:	08007294 	.word	0x08007294
 8005f94:	ffff0001 	.word	0xffff0001

08005f98 <_fwalk_reent>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	4688      	mov	r8, r1
 8005fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fa4:	2700      	movs	r7, #0
 8005fa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005faa:	f1b9 0901 	subs.w	r9, r9, #1
 8005fae:	d505      	bpl.n	8005fbc <_fwalk_reent+0x24>
 8005fb0:	6824      	ldr	r4, [r4, #0]
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d1f7      	bne.n	8005fa6 <_fwalk_reent+0xe>
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbc:	89ab      	ldrh	r3, [r5, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d907      	bls.n	8005fd2 <_fwalk_reent+0x3a>
 8005fc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	d003      	beq.n	8005fd2 <_fwalk_reent+0x3a>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	4630      	mov	r0, r6
 8005fce:	47c0      	blx	r8
 8005fd0:	4307      	orrs	r7, r0
 8005fd2:	3568      	adds	r5, #104	; 0x68
 8005fd4:	e7e9      	b.n	8005faa <_fwalk_reent+0x12>

08005fd6 <__retarget_lock_init_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <__swhatbuf_r>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	460e      	mov	r6, r1
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	b096      	sub	sp, #88	; 0x58
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461d      	mov	r5, r3
 8005fec:	da07      	bge.n	8005ffe <__swhatbuf_r+0x22>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	89b3      	ldrh	r3, [r6, #12]
 8005ff4:	061a      	lsls	r2, r3, #24
 8005ff6:	d410      	bmi.n	800601a <__swhatbuf_r+0x3e>
 8005ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffc:	e00e      	b.n	800601c <__swhatbuf_r+0x40>
 8005ffe:	466a      	mov	r2, sp
 8006000:	f000 f902 	bl	8006208 <_fstat_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	dbf2      	blt.n	8005fee <__swhatbuf_r+0x12>
 8006008:	9a01      	ldr	r2, [sp, #4]
 800600a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800600e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006012:	425a      	negs	r2, r3
 8006014:	415a      	adcs	r2, r3
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	e7ee      	b.n	8005ff8 <__swhatbuf_r+0x1c>
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	2000      	movs	r0, #0
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	b016      	add	sp, #88	; 0x58
 8006022:	bd70      	pop	{r4, r5, r6, pc}

08006024 <__smakebuf_r>:
 8006024:	898b      	ldrh	r3, [r1, #12]
 8006026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006028:	079d      	lsls	r5, r3, #30
 800602a:	4606      	mov	r6, r0
 800602c:	460c      	mov	r4, r1
 800602e:	d507      	bpl.n	8006040 <__smakebuf_r+0x1c>
 8006030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	2301      	movs	r3, #1
 800603a:	6163      	str	r3, [r4, #20]
 800603c:	b002      	add	sp, #8
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	ab01      	add	r3, sp, #4
 8006042:	466a      	mov	r2, sp
 8006044:	f7ff ffca 	bl	8005fdc <__swhatbuf_r>
 8006048:	9900      	ldr	r1, [sp, #0]
 800604a:	4605      	mov	r5, r0
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff f987 	bl	8005360 <_malloc_r>
 8006052:	b948      	cbnz	r0, 8006068 <__smakebuf_r+0x44>
 8006054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006058:	059a      	lsls	r2, r3, #22
 800605a:	d4ef      	bmi.n	800603c <__smakebuf_r+0x18>
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	e7e3      	b.n	8006030 <__smakebuf_r+0xc>
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <__smakebuf_r+0x7c>)
 800606a:	62b3      	str	r3, [r6, #40]	; 0x28
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	6020      	str	r0, [r4, #0]
 8006070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	9b00      	ldr	r3, [sp, #0]
 8006078:	6163      	str	r3, [r4, #20]
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	6120      	str	r0, [r4, #16]
 800607e:	b15b      	cbz	r3, 8006098 <__smakebuf_r+0x74>
 8006080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006084:	4630      	mov	r0, r6
 8006086:	f000 f8d1 	bl	800622c <_isatty_r>
 800608a:	b128      	cbz	r0, 8006098 <__smakebuf_r+0x74>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	89a0      	ldrh	r0, [r4, #12]
 800609a:	4305      	orrs	r5, r0
 800609c:	81a5      	strh	r5, [r4, #12]
 800609e:	e7cd      	b.n	800603c <__smakebuf_r+0x18>
 80060a0:	08005e35 	.word	0x08005e35

080060a4 <_malloc_usable_size_r>:
 80060a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a8:	1f18      	subs	r0, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bfbc      	itt	lt
 80060ae:	580b      	ldrlt	r3, [r1, r0]
 80060b0:	18c0      	addlt	r0, r0, r3
 80060b2:	4770      	bx	lr

080060b4 <_raise_r>:
 80060b4:	291f      	cmp	r1, #31
 80060b6:	b538      	push	{r3, r4, r5, lr}
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	d904      	bls.n	80060c8 <_raise_r+0x14>
 80060be:	2316      	movs	r3, #22
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060ca:	b112      	cbz	r2, 80060d2 <_raise_r+0x1e>
 80060cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060d0:	b94b      	cbnz	r3, 80060e6 <_raise_r+0x32>
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f830 	bl	8006138 <_getpid_r>
 80060d8:	462a      	mov	r2, r5
 80060da:	4601      	mov	r1, r0
 80060dc:	4620      	mov	r0, r4
 80060de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060e2:	f000 b817 	b.w	8006114 <_kill_r>
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d00a      	beq.n	8006100 <_raise_r+0x4c>
 80060ea:	1c59      	adds	r1, r3, #1
 80060ec:	d103      	bne.n	80060f6 <_raise_r+0x42>
 80060ee:	2316      	movs	r3, #22
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	2001      	movs	r0, #1
 80060f4:	e7e7      	b.n	80060c6 <_raise_r+0x12>
 80060f6:	2400      	movs	r4, #0
 80060f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060fc:	4628      	mov	r0, r5
 80060fe:	4798      	blx	r3
 8006100:	2000      	movs	r0, #0
 8006102:	e7e0      	b.n	80060c6 <_raise_r+0x12>

08006104 <raise>:
 8006104:	4b02      	ldr	r3, [pc, #8]	; (8006110 <raise+0xc>)
 8006106:	4601      	mov	r1, r0
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f7ff bfd3 	b.w	80060b4 <_raise_r>
 800610e:	bf00      	nop
 8006110:	20000008 	.word	0x20000008

08006114 <_kill_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	; (8006134 <_kill_r+0x20>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f7fc fa4a 	bl	80025ba <_kill>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d102      	bne.n	8006130 <_kill_r+0x1c>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	b103      	cbz	r3, 8006130 <_kill_r+0x1c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	20000250 	.word	0x20000250

08006138 <_getpid_r>:
 8006138:	f7fc ba37 	b.w	80025aa <_getpid>

0800613c <__sread>:
 800613c:	b510      	push	{r4, lr}
 800613e:	460c      	mov	r4, r1
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	f000 f894 	bl	8006270 <_read_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	bfab      	itete	ge
 800614c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800614e:	89a3      	ldrhlt	r3, [r4, #12]
 8006150:	181b      	addge	r3, r3, r0
 8006152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006156:	bfac      	ite	ge
 8006158:	6563      	strge	r3, [r4, #84]	; 0x54
 800615a:	81a3      	strhlt	r3, [r4, #12]
 800615c:	bd10      	pop	{r4, pc}

0800615e <__swrite>:
 800615e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	461f      	mov	r7, r3
 8006164:	898b      	ldrh	r3, [r1, #12]
 8006166:	05db      	lsls	r3, r3, #23
 8006168:	4605      	mov	r5, r0
 800616a:	460c      	mov	r4, r1
 800616c:	4616      	mov	r6, r2
 800616e:	d505      	bpl.n	800617c <__swrite+0x1e>
 8006170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006174:	2302      	movs	r3, #2
 8006176:	2200      	movs	r2, #0
 8006178:	f000 f868 	bl	800624c <_lseek_r>
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	4632      	mov	r2, r6
 800618a:	463b      	mov	r3, r7
 800618c:	4628      	mov	r0, r5
 800618e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006192:	f000 b817 	b.w	80061c4 <_write_r>

08006196 <__sseek>:
 8006196:	b510      	push	{r4, lr}
 8006198:	460c      	mov	r4, r1
 800619a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619e:	f000 f855 	bl	800624c <_lseek_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	bf15      	itete	ne
 80061a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80061aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061b2:	81a3      	strheq	r3, [r4, #12]
 80061b4:	bf18      	it	ne
 80061b6:	81a3      	strhne	r3, [r4, #12]
 80061b8:	bd10      	pop	{r4, pc}

080061ba <__sclose>:
 80061ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061be:	f000 b813 	b.w	80061e8 <_close_r>
	...

080061c4 <_write_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d07      	ldr	r5, [pc, #28]	; (80061e4 <_write_r+0x20>)
 80061c8:	4604      	mov	r4, r0
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fc fa28 	bl	8002628 <_write>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_write_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_write_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20000250 	.word	0x20000250

080061e8 <_close_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	; (8006204 <_close_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fc fa34 	bl	8002660 <_close>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_close_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_close_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000250 	.word	0x20000250

08006208 <_fstat_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_fstat_r+0x20>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	602b      	str	r3, [r5, #0]
 8006216:	f7fc fa2f 	bl	8002678 <_fstat>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d102      	bne.n	8006224 <_fstat_r+0x1c>
 800621e:	682b      	ldr	r3, [r5, #0]
 8006220:	b103      	cbz	r3, 8006224 <_fstat_r+0x1c>
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	bd38      	pop	{r3, r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	20000250 	.word	0x20000250

0800622c <_isatty_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_isatty_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fc fa2e 	bl	8002698 <_isatty>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_isatty_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_isatty_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000250 	.word	0x20000250

0800624c <_lseek_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d07      	ldr	r5, [pc, #28]	; (800626c <_lseek_r+0x20>)
 8006250:	4604      	mov	r4, r0
 8006252:	4608      	mov	r0, r1
 8006254:	4611      	mov	r1, r2
 8006256:	2200      	movs	r2, #0
 8006258:	602a      	str	r2, [r5, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f7fc fa27 	bl	80026ae <_lseek>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_lseek_r+0x1e>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_lseek_r+0x1e>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20000250 	.word	0x20000250

08006270 <_read_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	; (8006290 <_read_r+0x20>)
 8006274:	4604      	mov	r4, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fc f9b5 	bl	80025ee <_read>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_read_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_read_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000250 	.word	0x20000250

08006294 <pow>:
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006298:	ec59 8b10 	vmov	r8, r9, d0
 800629c:	ec57 6b11 	vmov	r6, r7, d1
 80062a0:	f000 f8a6 	bl	80063f0 <__ieee754_pow>
 80062a4:	4b4e      	ldr	r3, [pc, #312]	; (80063e0 <pow+0x14c>)
 80062a6:	f993 3000 	ldrsb.w	r3, [r3]
 80062aa:	3301      	adds	r3, #1
 80062ac:	ec55 4b10 	vmov	r4, r5, d0
 80062b0:	d015      	beq.n	80062de <pow+0x4a>
 80062b2:	4632      	mov	r2, r6
 80062b4:	463b      	mov	r3, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fc37 	bl	8000b2c <__aeabi_dcmpun>
 80062be:	b970      	cbnz	r0, 80062de <pow+0x4a>
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fc30 	bl	8000b2c <__aeabi_dcmpun>
 80062cc:	2200      	movs	r2, #0
 80062ce:	2300      	movs	r3, #0
 80062d0:	b148      	cbz	r0, 80062e6 <pow+0x52>
 80062d2:	4630      	mov	r0, r6
 80062d4:	4639      	mov	r1, r7
 80062d6:	f7fa fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d17d      	bne.n	80063da <pow+0x146>
 80062de:	ec45 4b10 	vmov	d0, r4, r5
 80062e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80062ee:	b1e0      	cbz	r0, 800632a <pow+0x96>
 80062f0:	2200      	movs	r2, #0
 80062f2:	2300      	movs	r3, #0
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7fa fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d16c      	bne.n	80063da <pow+0x146>
 8006300:	ec47 6b10 	vmov	d0, r6, r7
 8006304:	f000 fe53 	bl	8006fae <finite>
 8006308:	2800      	cmp	r0, #0
 800630a:	d0e8      	beq.n	80062de <pow+0x4a>
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fbe2 	bl	8000adc <__aeabi_dcmplt>
 8006318:	2800      	cmp	r0, #0
 800631a:	d0e0      	beq.n	80062de <pow+0x4a>
 800631c:	f7fd f8f4 	bl	8003508 <__errno>
 8006320:	2321      	movs	r3, #33	; 0x21
 8006322:	6003      	str	r3, [r0, #0]
 8006324:	2400      	movs	r4, #0
 8006326:	4d2f      	ldr	r5, [pc, #188]	; (80063e4 <pow+0x150>)
 8006328:	e7d9      	b.n	80062de <pow+0x4a>
 800632a:	ec45 4b10 	vmov	d0, r4, r5
 800632e:	f000 fe3e 	bl	8006fae <finite>
 8006332:	bbb8      	cbnz	r0, 80063a4 <pow+0x110>
 8006334:	ec49 8b10 	vmov	d0, r8, r9
 8006338:	f000 fe39 	bl	8006fae <finite>
 800633c:	b390      	cbz	r0, 80063a4 <pow+0x110>
 800633e:	ec47 6b10 	vmov	d0, r6, r7
 8006342:	f000 fe34 	bl	8006fae <finite>
 8006346:	b368      	cbz	r0, 80063a4 <pow+0x110>
 8006348:	4622      	mov	r2, r4
 800634a:	462b      	mov	r3, r5
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f7fa fbec 	bl	8000b2c <__aeabi_dcmpun>
 8006354:	b160      	cbz	r0, 8006370 <pow+0xdc>
 8006356:	f7fd f8d7 	bl	8003508 <__errno>
 800635a:	2321      	movs	r3, #33	; 0x21
 800635c:	6003      	str	r3, [r0, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	2300      	movs	r3, #0
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	f7fa fa71 	bl	800084c <__aeabi_ddiv>
 800636a:	4604      	mov	r4, r0
 800636c:	460d      	mov	r5, r1
 800636e:	e7b6      	b.n	80062de <pow+0x4a>
 8006370:	f7fd f8ca 	bl	8003508 <__errno>
 8006374:	2322      	movs	r3, #34	; 0x22
 8006376:	6003      	str	r3, [r0, #0]
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7fa fbac 	bl	8000adc <__aeabi_dcmplt>
 8006384:	2400      	movs	r4, #0
 8006386:	b158      	cbz	r0, 80063a0 <pow+0x10c>
 8006388:	ec47 6b10 	vmov	d0, r6, r7
 800638c:	f000 fe24 	bl	8006fd8 <rint>
 8006390:	4632      	mov	r2, r6
 8006392:	ec51 0b10 	vmov	r0, r1, d0
 8006396:	463b      	mov	r3, r7
 8006398:	f7fa fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800639c:	2800      	cmp	r0, #0
 800639e:	d0c2      	beq.n	8006326 <pow+0x92>
 80063a0:	4d11      	ldr	r5, [pc, #68]	; (80063e8 <pow+0x154>)
 80063a2:	e79c      	b.n	80062de <pow+0x4a>
 80063a4:	2200      	movs	r2, #0
 80063a6:	2300      	movs	r3, #0
 80063a8:	4620      	mov	r0, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	f7fa fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d094      	beq.n	80062de <pow+0x4a>
 80063b4:	ec49 8b10 	vmov	d0, r8, r9
 80063b8:	f000 fdf9 	bl	8006fae <finite>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d08e      	beq.n	80062de <pow+0x4a>
 80063c0:	ec47 6b10 	vmov	d0, r6, r7
 80063c4:	f000 fdf3 	bl	8006fae <finite>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d088      	beq.n	80062de <pow+0x4a>
 80063cc:	f7fd f89c 	bl	8003508 <__errno>
 80063d0:	2322      	movs	r3, #34	; 0x22
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	2400      	movs	r4, #0
 80063d6:	2500      	movs	r5, #0
 80063d8:	e781      	b.n	80062de <pow+0x4a>
 80063da:	4d04      	ldr	r5, [pc, #16]	; (80063ec <pow+0x158>)
 80063dc:	2400      	movs	r4, #0
 80063de:	e77e      	b.n	80062de <pow+0x4a>
 80063e0:	200001d8 	.word	0x200001d8
 80063e4:	fff00000 	.word	0xfff00000
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	3ff00000 	.word	0x3ff00000

080063f0 <__ieee754_pow>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	ed2d 8b06 	vpush	{d8-d10}
 80063f8:	b08d      	sub	sp, #52	; 0x34
 80063fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80063fe:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006402:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006406:	ea56 0100 	orrs.w	r1, r6, r0
 800640a:	ec53 2b10 	vmov	r2, r3, d0
 800640e:	f000 84d1 	beq.w	8006db4 <__ieee754_pow+0x9c4>
 8006412:	497f      	ldr	r1, [pc, #508]	; (8006610 <__ieee754_pow+0x220>)
 8006414:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006418:	428c      	cmp	r4, r1
 800641a:	ee10 8a10 	vmov	r8, s0
 800641e:	4699      	mov	r9, r3
 8006420:	dc09      	bgt.n	8006436 <__ieee754_pow+0x46>
 8006422:	d103      	bne.n	800642c <__ieee754_pow+0x3c>
 8006424:	b97a      	cbnz	r2, 8006446 <__ieee754_pow+0x56>
 8006426:	42a6      	cmp	r6, r4
 8006428:	dd02      	ble.n	8006430 <__ieee754_pow+0x40>
 800642a:	e00c      	b.n	8006446 <__ieee754_pow+0x56>
 800642c:	428e      	cmp	r6, r1
 800642e:	dc02      	bgt.n	8006436 <__ieee754_pow+0x46>
 8006430:	428e      	cmp	r6, r1
 8006432:	d110      	bne.n	8006456 <__ieee754_pow+0x66>
 8006434:	b178      	cbz	r0, 8006456 <__ieee754_pow+0x66>
 8006436:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800643a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800643e:	ea54 0308 	orrs.w	r3, r4, r8
 8006442:	f000 84b7 	beq.w	8006db4 <__ieee754_pow+0x9c4>
 8006446:	4873      	ldr	r0, [pc, #460]	; (8006614 <__ieee754_pow+0x224>)
 8006448:	b00d      	add	sp, #52	; 0x34
 800644a:	ecbd 8b06 	vpop	{d8-d10}
 800644e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006452:	f000 bdb9 	b.w	8006fc8 <nan>
 8006456:	f1b9 0f00 	cmp.w	r9, #0
 800645a:	da36      	bge.n	80064ca <__ieee754_pow+0xda>
 800645c:	496e      	ldr	r1, [pc, #440]	; (8006618 <__ieee754_pow+0x228>)
 800645e:	428e      	cmp	r6, r1
 8006460:	dc51      	bgt.n	8006506 <__ieee754_pow+0x116>
 8006462:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8006466:	428e      	cmp	r6, r1
 8006468:	f340 84af 	ble.w	8006dca <__ieee754_pow+0x9da>
 800646c:	1531      	asrs	r1, r6, #20
 800646e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006472:	2914      	cmp	r1, #20
 8006474:	dd0f      	ble.n	8006496 <__ieee754_pow+0xa6>
 8006476:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800647a:	fa20 fc01 	lsr.w	ip, r0, r1
 800647e:	fa0c f101 	lsl.w	r1, ip, r1
 8006482:	4281      	cmp	r1, r0
 8006484:	f040 84a1 	bne.w	8006dca <__ieee754_pow+0x9da>
 8006488:	f00c 0c01 	and.w	ip, ip, #1
 800648c:	f1cc 0102 	rsb	r1, ip, #2
 8006490:	9100      	str	r1, [sp, #0]
 8006492:	b180      	cbz	r0, 80064b6 <__ieee754_pow+0xc6>
 8006494:	e059      	b.n	800654a <__ieee754_pow+0x15a>
 8006496:	2800      	cmp	r0, #0
 8006498:	d155      	bne.n	8006546 <__ieee754_pow+0x156>
 800649a:	f1c1 0114 	rsb	r1, r1, #20
 800649e:	fa46 fc01 	asr.w	ip, r6, r1
 80064a2:	fa0c f101 	lsl.w	r1, ip, r1
 80064a6:	42b1      	cmp	r1, r6
 80064a8:	f040 848c 	bne.w	8006dc4 <__ieee754_pow+0x9d4>
 80064ac:	f00c 0c01 	and.w	ip, ip, #1
 80064b0:	f1cc 0102 	rsb	r1, ip, #2
 80064b4:	9100      	str	r1, [sp, #0]
 80064b6:	4959      	ldr	r1, [pc, #356]	; (800661c <__ieee754_pow+0x22c>)
 80064b8:	428e      	cmp	r6, r1
 80064ba:	d12d      	bne.n	8006518 <__ieee754_pow+0x128>
 80064bc:	2f00      	cmp	r7, #0
 80064be:	da79      	bge.n	80065b4 <__ieee754_pow+0x1c4>
 80064c0:	4956      	ldr	r1, [pc, #344]	; (800661c <__ieee754_pow+0x22c>)
 80064c2:	2000      	movs	r0, #0
 80064c4:	f7fa f9c2 	bl	800084c <__aeabi_ddiv>
 80064c8:	e016      	b.n	80064f8 <__ieee754_pow+0x108>
 80064ca:	2100      	movs	r1, #0
 80064cc:	9100      	str	r1, [sp, #0]
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d13b      	bne.n	800654a <__ieee754_pow+0x15a>
 80064d2:	494f      	ldr	r1, [pc, #316]	; (8006610 <__ieee754_pow+0x220>)
 80064d4:	428e      	cmp	r6, r1
 80064d6:	d1ee      	bne.n	80064b6 <__ieee754_pow+0xc6>
 80064d8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80064dc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80064e0:	ea53 0308 	orrs.w	r3, r3, r8
 80064e4:	f000 8466 	beq.w	8006db4 <__ieee754_pow+0x9c4>
 80064e8:	4b4d      	ldr	r3, [pc, #308]	; (8006620 <__ieee754_pow+0x230>)
 80064ea:	429c      	cmp	r4, r3
 80064ec:	dd0d      	ble.n	800650a <__ieee754_pow+0x11a>
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	f280 8464 	bge.w	8006dbc <__ieee754_pow+0x9cc>
 80064f4:	2000      	movs	r0, #0
 80064f6:	2100      	movs	r1, #0
 80064f8:	ec41 0b10 	vmov	d0, r0, r1
 80064fc:	b00d      	add	sp, #52	; 0x34
 80064fe:	ecbd 8b06 	vpop	{d8-d10}
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	2102      	movs	r1, #2
 8006508:	e7e0      	b.n	80064cc <__ieee754_pow+0xdc>
 800650a:	2f00      	cmp	r7, #0
 800650c:	daf2      	bge.n	80064f4 <__ieee754_pow+0x104>
 800650e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006516:	e7ef      	b.n	80064f8 <__ieee754_pow+0x108>
 8006518:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800651c:	d104      	bne.n	8006528 <__ieee754_pow+0x138>
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f7fa f869 	bl	80005f8 <__aeabi_dmul>
 8006526:	e7e7      	b.n	80064f8 <__ieee754_pow+0x108>
 8006528:	493e      	ldr	r1, [pc, #248]	; (8006624 <__ieee754_pow+0x234>)
 800652a:	428f      	cmp	r7, r1
 800652c:	d10d      	bne.n	800654a <__ieee754_pow+0x15a>
 800652e:	f1b9 0f00 	cmp.w	r9, #0
 8006532:	db0a      	blt.n	800654a <__ieee754_pow+0x15a>
 8006534:	ec43 2b10 	vmov	d0, r2, r3
 8006538:	b00d      	add	sp, #52	; 0x34
 800653a:	ecbd 8b06 	vpop	{d8-d10}
 800653e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006542:	f000 bc77 	b.w	8006e34 <__ieee754_sqrt>
 8006546:	2100      	movs	r1, #0
 8006548:	9100      	str	r1, [sp, #0]
 800654a:	ec43 2b10 	vmov	d0, r2, r3
 800654e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006552:	f000 fd23 	bl	8006f9c <fabs>
 8006556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655a:	ec51 0b10 	vmov	r0, r1, d0
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d12a      	bne.n	80065ba <__ieee754_pow+0x1ca>
 8006564:	b12c      	cbz	r4, 8006572 <__ieee754_pow+0x182>
 8006566:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800661c <__ieee754_pow+0x22c>
 800656a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800656e:	45e6      	cmp	lr, ip
 8006570:	d123      	bne.n	80065ba <__ieee754_pow+0x1ca>
 8006572:	2f00      	cmp	r7, #0
 8006574:	da05      	bge.n	8006582 <__ieee754_pow+0x192>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	2000      	movs	r0, #0
 800657c:	4927      	ldr	r1, [pc, #156]	; (800661c <__ieee754_pow+0x22c>)
 800657e:	f7fa f965 	bl	800084c <__aeabi_ddiv>
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	dab7      	bge.n	80064f8 <__ieee754_pow+0x108>
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800658e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006592:	4323      	orrs	r3, r4
 8006594:	d108      	bne.n	80065a8 <__ieee754_pow+0x1b8>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	f7f9 fe73 	bl	8000288 <__aeabi_dsub>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	e78d      	b.n	80064c4 <__ieee754_pow+0xd4>
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d1a4      	bne.n	80064f8 <__ieee754_pow+0x108>
 80065ae:	4602      	mov	r2, r0
 80065b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065b4:	4610      	mov	r0, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	e79e      	b.n	80064f8 <__ieee754_pow+0x108>
 80065ba:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80065be:	f10c 35ff 	add.w	r5, ip, #4294967295
 80065c2:	950a      	str	r5, [sp, #40]	; 0x28
 80065c4:	9d00      	ldr	r5, [sp, #0]
 80065c6:	46ac      	mov	ip, r5
 80065c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80065ca:	ea5c 0505 	orrs.w	r5, ip, r5
 80065ce:	d0e4      	beq.n	800659a <__ieee754_pow+0x1aa>
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <__ieee754_pow+0x238>)
 80065d2:	429e      	cmp	r6, r3
 80065d4:	f340 80fc 	ble.w	80067d0 <__ieee754_pow+0x3e0>
 80065d8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80065dc:	429e      	cmp	r6, r3
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <__ieee754_pow+0x230>)
 80065e0:	dd07      	ble.n	80065f2 <__ieee754_pow+0x202>
 80065e2:	429c      	cmp	r4, r3
 80065e4:	dc0a      	bgt.n	80065fc <__ieee754_pow+0x20c>
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	da84      	bge.n	80064f4 <__ieee754_pow+0x104>
 80065ea:	a307      	add	r3, pc, #28	; (adr r3, 8006608 <__ieee754_pow+0x218>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	e795      	b.n	800651e <__ieee754_pow+0x12e>
 80065f2:	429c      	cmp	r4, r3
 80065f4:	dbf7      	blt.n	80065e6 <__ieee754_pow+0x1f6>
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <__ieee754_pow+0x22c>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	dd17      	ble.n	800662c <__ieee754_pow+0x23c>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	dcf4      	bgt.n	80065ea <__ieee754_pow+0x1fa>
 8006600:	e778      	b.n	80064f4 <__ieee754_pow+0x104>
 8006602:	bf00      	nop
 8006604:	f3af 8000 	nop.w
 8006608:	8800759c 	.word	0x8800759c
 800660c:	7e37e43c 	.word	0x7e37e43c
 8006610:	7ff00000 	.word	0x7ff00000
 8006614:	08007508 	.word	0x08007508
 8006618:	433fffff 	.word	0x433fffff
 800661c:	3ff00000 	.word	0x3ff00000
 8006620:	3fefffff 	.word	0x3fefffff
 8006624:	3fe00000 	.word	0x3fe00000
 8006628:	41e00000 	.word	0x41e00000
 800662c:	4b64      	ldr	r3, [pc, #400]	; (80067c0 <__ieee754_pow+0x3d0>)
 800662e:	2200      	movs	r2, #0
 8006630:	f7f9 fe2a 	bl	8000288 <__aeabi_dsub>
 8006634:	a356      	add	r3, pc, #344	; (adr r3, 8006790 <__ieee754_pow+0x3a0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	4604      	mov	r4, r0
 800663c:	460d      	mov	r5, r1
 800663e:	f7f9 ffdb 	bl	80005f8 <__aeabi_dmul>
 8006642:	a355      	add	r3, pc, #340	; (adr r3, 8006798 <__ieee754_pow+0x3a8>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4620      	mov	r0, r4
 800664e:	4629      	mov	r1, r5
 8006650:	f7f9 ffd2 	bl	80005f8 <__aeabi_dmul>
 8006654:	4b5b      	ldr	r3, [pc, #364]	; (80067c4 <__ieee754_pow+0x3d4>)
 8006656:	4682      	mov	sl, r0
 8006658:	468b      	mov	fp, r1
 800665a:	2200      	movs	r2, #0
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	a14d      	add	r1, pc, #308	; (adr r1, 80067a0 <__ieee754_pow+0x3b0>)
 800666a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	4622      	mov	r2, r4
 8006674:	462b      	mov	r3, r5
 8006676:	f7f9 ffbf 	bl	80005f8 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	2000      	movs	r0, #0
 8006680:	4951      	ldr	r1, [pc, #324]	; (80067c8 <__ieee754_pow+0x3d8>)
 8006682:	f7f9 fe01 	bl	8000288 <__aeabi_dsub>
 8006686:	4622      	mov	r2, r4
 8006688:	4680      	mov	r8, r0
 800668a:	4689      	mov	r9, r1
 800668c:	462b      	mov	r3, r5
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 ffb1 	bl	80005f8 <__aeabi_dmul>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4640      	mov	r0, r8
 800669c:	4649      	mov	r1, r9
 800669e:	f7f9 ffab 	bl	80005f8 <__aeabi_dmul>
 80066a2:	a341      	add	r3, pc, #260	; (adr r3, 80067a8 <__ieee754_pow+0x3b8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 ffa6 	bl	80005f8 <__aeabi_dmul>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7f9 fde8 	bl	8000288 <__aeabi_dsub>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7f9 fde2 	bl	800028c <__adddf3>
 80066c8:	2400      	movs	r4, #0
 80066ca:	4632      	mov	r2, r6
 80066cc:	463b      	mov	r3, r7
 80066ce:	4620      	mov	r0, r4
 80066d0:	460d      	mov	r5, r1
 80066d2:	f7f9 fdd9 	bl	8000288 <__aeabi_dsub>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fdd3 	bl	8000288 <__aeabi_dsub>
 80066e2:	9b00      	ldr	r3, [sp, #0]
 80066e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4313      	orrs	r3, r2
 80066ea:	4682      	mov	sl, r0
 80066ec:	468b      	mov	fp, r1
 80066ee:	f040 81f1 	bne.w	8006ad4 <__ieee754_pow+0x6e4>
 80066f2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80067b0 <__ieee754_pow+0x3c0>
 80066f6:	eeb0 8a47 	vmov.f32	s16, s14
 80066fa:	eef0 8a67 	vmov.f32	s17, s15
 80066fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006702:	2600      	movs	r6, #0
 8006704:	4632      	mov	r2, r6
 8006706:	463b      	mov	r3, r7
 8006708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670c:	f7f9 fdbc 	bl	8000288 <__aeabi_dsub>
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671c:	4680      	mov	r8, r0
 800671e:	4689      	mov	r9, r1
 8006720:	4650      	mov	r0, sl
 8006722:	4659      	mov	r1, fp
 8006724:	f7f9 ff68 	bl	80005f8 <__aeabi_dmul>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7f9 fdac 	bl	800028c <__adddf3>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	4680      	mov	r8, r0
 800673a:	4689      	mov	r9, r1
 800673c:	4620      	mov	r0, r4
 800673e:	4629      	mov	r1, r5
 8006740:	f7f9 ff5a 	bl	80005f8 <__aeabi_dmul>
 8006744:	460b      	mov	r3, r1
 8006746:	4604      	mov	r4, r0
 8006748:	460d      	mov	r5, r1
 800674a:	4602      	mov	r2, r0
 800674c:	4649      	mov	r1, r9
 800674e:	4640      	mov	r0, r8
 8006750:	f7f9 fd9c 	bl	800028c <__adddf3>
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <__ieee754_pow+0x3dc>)
 8006756:	4299      	cmp	r1, r3
 8006758:	ec45 4b19 	vmov	d9, r4, r5
 800675c:	4606      	mov	r6, r0
 800675e:	460f      	mov	r7, r1
 8006760:	468b      	mov	fp, r1
 8006762:	f340 82fe 	ble.w	8006d62 <__ieee754_pow+0x972>
 8006766:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800676a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800676e:	4303      	orrs	r3, r0
 8006770:	f000 81f0 	beq.w	8006b54 <__ieee754_pow+0x764>
 8006774:	a310      	add	r3, pc, #64	; (adr r3, 80067b8 <__ieee754_pow+0x3c8>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	ec51 0b18 	vmov	r0, r1, d8
 800677e:	f7f9 ff3b 	bl	80005f8 <__aeabi_dmul>
 8006782:	a30d      	add	r3, pc, #52	; (adr r3, 80067b8 <__ieee754_pow+0x3c8>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	e6cb      	b.n	8006522 <__ieee754_pow+0x132>
 800678a:	bf00      	nop
 800678c:	f3af 8000 	nop.w
 8006790:	60000000 	.word	0x60000000
 8006794:	3ff71547 	.word	0x3ff71547
 8006798:	f85ddf44 	.word	0xf85ddf44
 800679c:	3e54ae0b 	.word	0x3e54ae0b
 80067a0:	55555555 	.word	0x55555555
 80067a4:	3fd55555 	.word	0x3fd55555
 80067a8:	652b82fe 	.word	0x652b82fe
 80067ac:	3ff71547 	.word	0x3ff71547
 80067b0:	00000000 	.word	0x00000000
 80067b4:	bff00000 	.word	0xbff00000
 80067b8:	8800759c 	.word	0x8800759c
 80067bc:	7e37e43c 	.word	0x7e37e43c
 80067c0:	3ff00000 	.word	0x3ff00000
 80067c4:	3fd00000 	.word	0x3fd00000
 80067c8:	3fe00000 	.word	0x3fe00000
 80067cc:	408fffff 	.word	0x408fffff
 80067d0:	4bd7      	ldr	r3, [pc, #860]	; (8006b30 <__ieee754_pow+0x740>)
 80067d2:	ea03 0309 	and.w	r3, r3, r9
 80067d6:	2200      	movs	r2, #0
 80067d8:	b92b      	cbnz	r3, 80067e6 <__ieee754_pow+0x3f6>
 80067da:	4bd6      	ldr	r3, [pc, #856]	; (8006b34 <__ieee754_pow+0x744>)
 80067dc:	f7f9 ff0c 	bl	80005f8 <__aeabi_dmul>
 80067e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80067e4:	460c      	mov	r4, r1
 80067e6:	1523      	asrs	r3, r4, #20
 80067e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067ec:	4413      	add	r3, r2
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	4bd1      	ldr	r3, [pc, #836]	; (8006b38 <__ieee754_pow+0x748>)
 80067f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80067fa:	429c      	cmp	r4, r3
 80067fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006800:	dd08      	ble.n	8006814 <__ieee754_pow+0x424>
 8006802:	4bce      	ldr	r3, [pc, #824]	; (8006b3c <__ieee754_pow+0x74c>)
 8006804:	429c      	cmp	r4, r3
 8006806:	f340 8163 	ble.w	8006ad0 <__ieee754_pow+0x6e0>
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	3301      	adds	r3, #1
 800680e:	9309      	str	r3, [sp, #36]	; 0x24
 8006810:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006814:	2400      	movs	r4, #0
 8006816:	00e3      	lsls	r3, r4, #3
 8006818:	930b      	str	r3, [sp, #44]	; 0x2c
 800681a:	4bc9      	ldr	r3, [pc, #804]	; (8006b40 <__ieee754_pow+0x750>)
 800681c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006820:	ed93 7b00 	vldr	d7, [r3]
 8006824:	4629      	mov	r1, r5
 8006826:	ec53 2b17 	vmov	r2, r3, d7
 800682a:	eeb0 8a47 	vmov.f32	s16, s14
 800682e:	eef0 8a67 	vmov.f32	s17, s15
 8006832:	4682      	mov	sl, r0
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	4652      	mov	r2, sl
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	462b      	mov	r3, r5
 8006840:	ec51 0b18 	vmov	r0, r1, d8
 8006844:	f7f9 fd22 	bl	800028c <__adddf3>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	2000      	movs	r0, #0
 800684e:	49bd      	ldr	r1, [pc, #756]	; (8006b44 <__ieee754_pow+0x754>)
 8006850:	f7f9 fffc 	bl	800084c <__aeabi_ddiv>
 8006854:	ec41 0b19 	vmov	d9, r0, r1
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800686c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006870:	2300      	movs	r3, #0
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006878:	46ab      	mov	fp, r5
 800687a:	106d      	asrs	r5, r5, #1
 800687c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006880:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006884:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006888:	2200      	movs	r2, #0
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	4614      	mov	r4, r2
 8006890:	461d      	mov	r5, r3
 8006892:	f7f9 feb1 	bl	80005f8 <__aeabi_dmul>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4630      	mov	r0, r6
 800689c:	4639      	mov	r1, r7
 800689e:	f7f9 fcf3 	bl	8000288 <__aeabi_dsub>
 80068a2:	ec53 2b18 	vmov	r2, r3, d8
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7f9 fceb 	bl	8000288 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4650      	mov	r0, sl
 80068b8:	4659      	mov	r1, fp
 80068ba:	f7f9 fce5 	bl	8000288 <__aeabi_dsub>
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4630      	mov	r0, r6
 80068cc:	4639      	mov	r1, r7
 80068ce:	f7f9 fcdb 	bl	8000288 <__aeabi_dsub>
 80068d2:	ec53 2b19 	vmov	r2, r3, d9
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068de:	ec41 0b18 	vmov	d8, r0, r1
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	f7f9 fe87 	bl	80005f8 <__aeabi_dmul>
 80068ea:	a37d      	add	r3, pc, #500	; (adr r3, 8006ae0 <__ieee754_pow+0x6f0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	a37b      	add	r3, pc, #492	; (adr r3, 8006ae8 <__ieee754_pow+0x6f8>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fcc5 	bl	800028c <__adddf3>
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	a379      	add	r3, pc, #484	; (adr r3, 8006af0 <__ieee754_pow+0x700>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fcbc 	bl	800028c <__adddf3>
 8006914:	4622      	mov	r2, r4
 8006916:	462b      	mov	r3, r5
 8006918:	f7f9 fe6e 	bl	80005f8 <__aeabi_dmul>
 800691c:	a376      	add	r3, pc, #472	; (adr r3, 8006af8 <__ieee754_pow+0x708>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7f9 fcb3 	bl	800028c <__adddf3>
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	f7f9 fe65 	bl	80005f8 <__aeabi_dmul>
 800692e:	a374      	add	r3, pc, #464	; (adr r3, 8006b00 <__ieee754_pow+0x710>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7f9 fcaa 	bl	800028c <__adddf3>
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	f7f9 fe5c 	bl	80005f8 <__aeabi_dmul>
 8006940:	a371      	add	r3, pc, #452	; (adr r3, 8006b08 <__ieee754_pow+0x718>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fca1 	bl	800028c <__adddf3>
 800694a:	4622      	mov	r2, r4
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	462b      	mov	r3, r5
 8006952:	4620      	mov	r0, r4
 8006954:	4629      	mov	r1, r5
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7f9 fe49 	bl	80005f8 <__aeabi_dmul>
 8006966:	4642      	mov	r2, r8
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	464b      	mov	r3, r9
 800696e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006972:	f7f9 fc8b 	bl	800028c <__adddf3>
 8006976:	ec53 2b18 	vmov	r2, r3, d8
 800697a:	f7f9 fe3d 	bl	80005f8 <__aeabi_dmul>
 800697e:	4622      	mov	r2, r4
 8006980:	462b      	mov	r3, r5
 8006982:	f7f9 fc83 	bl	800028c <__adddf3>
 8006986:	4642      	mov	r2, r8
 8006988:	4682      	mov	sl, r0
 800698a:	468b      	mov	fp, r1
 800698c:	464b      	mov	r3, r9
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 fe31 	bl	80005f8 <__aeabi_dmul>
 8006996:	4b6c      	ldr	r3, [pc, #432]	; (8006b48 <__ieee754_pow+0x758>)
 8006998:	2200      	movs	r2, #0
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	f7f9 fc75 	bl	800028c <__adddf3>
 80069a2:	4652      	mov	r2, sl
 80069a4:	465b      	mov	r3, fp
 80069a6:	f7f9 fc71 	bl	800028c <__adddf3>
 80069aa:	9c04      	ldr	r4, [sp, #16]
 80069ac:	460d      	mov	r5, r1
 80069ae:	4622      	mov	r2, r4
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	4b63      	ldr	r3, [pc, #396]	; (8006b48 <__ieee754_pow+0x758>)
 80069bc:	4680      	mov	r8, r0
 80069be:	4689      	mov	r9, r1
 80069c0:	2200      	movs	r2, #0
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	4632      	mov	r2, r6
 80069cc:	463b      	mov	r3, r7
 80069ce:	f7f9 fc5b 	bl	8000288 <__aeabi_dsub>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4650      	mov	r0, sl
 80069d8:	4659      	mov	r1, fp
 80069da:	f7f9 fc55 	bl	8000288 <__aeabi_dsub>
 80069de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069e2:	f7f9 fe09 	bl	80005f8 <__aeabi_dmul>
 80069e6:	4622      	mov	r2, r4
 80069e8:	4606      	mov	r6, r0
 80069ea:	460f      	mov	r7, r1
 80069ec:	462b      	mov	r3, r5
 80069ee:	ec51 0b18 	vmov	r0, r1, d8
 80069f2:	f7f9 fe01 	bl	80005f8 <__aeabi_dmul>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4630      	mov	r0, r6
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7f9 fc45 	bl	800028c <__adddf3>
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7f9 fc3d 	bl	800028c <__adddf3>
 8006a12:	9c04      	ldr	r4, [sp, #16]
 8006a14:	a33e      	add	r3, pc, #248	; (adr r3, 8006b10 <__ieee754_pow+0x720>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	4642      	mov	r2, r8
 8006a24:	ec41 0b18 	vmov	d8, r0, r1
 8006a28:	464b      	mov	r3, r9
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	f7f9 fc2b 	bl	8000288 <__aeabi_dsub>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fc25 	bl	8000288 <__aeabi_dsub>
 8006a3e:	a336      	add	r3, pc, #216	; (adr r3, 8006b18 <__ieee754_pow+0x728>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	a335      	add	r3, pc, #212	; (adr r3, 8006b20 <__ieee754_pow+0x730>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460f      	mov	r7, r1
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fdcf 	bl	80005f8 <__aeabi_dmul>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4630      	mov	r0, r6
 8006a60:	4639      	mov	r1, r7
 8006a62:	f7f9 fc13 	bl	800028c <__adddf3>
 8006a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a68:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <__ieee754_pow+0x75c>)
 8006a6a:	4413      	add	r3, r2
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fc0c 	bl	800028c <__adddf3>
 8006a74:	4682      	mov	sl, r0
 8006a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a78:	468b      	mov	fp, r1
 8006a7a:	f7f9 fd53 	bl	8000524 <__aeabi_i2d>
 8006a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a80:	4b33      	ldr	r3, [pc, #204]	; (8006b50 <__ieee754_pow+0x760>)
 8006a82:	4413      	add	r3, r2
 8006a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a88:	4606      	mov	r6, r0
 8006a8a:	460f      	mov	r7, r1
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	465b      	mov	r3, fp
 8006a90:	ec51 0b18 	vmov	r0, r1, d8
 8006a94:	f7f9 fbfa 	bl	800028c <__adddf3>
 8006a98:	4642      	mov	r2, r8
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	f7f9 fbf6 	bl	800028c <__adddf3>
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	f7f9 fbf2 	bl	800028c <__adddf3>
 8006aa8:	9c04      	ldr	r4, [sp, #16]
 8006aaa:	4632      	mov	r2, r6
 8006aac:	463b      	mov	r3, r7
 8006aae:	4620      	mov	r0, r4
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	f7f9 fbe9 	bl	8000288 <__aeabi_dsub>
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	f7f9 fbe5 	bl	8000288 <__aeabi_dsub>
 8006abe:	ec53 2b18 	vmov	r2, r3, d8
 8006ac2:	f7f9 fbe1 	bl	8000288 <__aeabi_dsub>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4650      	mov	r0, sl
 8006acc:	4659      	mov	r1, fp
 8006ace:	e606      	b.n	80066de <__ieee754_pow+0x2ee>
 8006ad0:	2401      	movs	r4, #1
 8006ad2:	e6a0      	b.n	8006816 <__ieee754_pow+0x426>
 8006ad4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006b28 <__ieee754_pow+0x738>
 8006ad8:	e60d      	b.n	80066f6 <__ieee754_pow+0x306>
 8006ada:	bf00      	nop
 8006adc:	f3af 8000 	nop.w
 8006ae0:	4a454eef 	.word	0x4a454eef
 8006ae4:	3fca7e28 	.word	0x3fca7e28
 8006ae8:	93c9db65 	.word	0x93c9db65
 8006aec:	3fcd864a 	.word	0x3fcd864a
 8006af0:	a91d4101 	.word	0xa91d4101
 8006af4:	3fd17460 	.word	0x3fd17460
 8006af8:	518f264d 	.word	0x518f264d
 8006afc:	3fd55555 	.word	0x3fd55555
 8006b00:	db6fabff 	.word	0xdb6fabff
 8006b04:	3fdb6db6 	.word	0x3fdb6db6
 8006b08:	33333303 	.word	0x33333303
 8006b0c:	3fe33333 	.word	0x3fe33333
 8006b10:	e0000000 	.word	0xe0000000
 8006b14:	3feec709 	.word	0x3feec709
 8006b18:	dc3a03fd 	.word	0xdc3a03fd
 8006b1c:	3feec709 	.word	0x3feec709
 8006b20:	145b01f5 	.word	0x145b01f5
 8006b24:	be3e2fe0 	.word	0xbe3e2fe0
 8006b28:	00000000 	.word	0x00000000
 8006b2c:	3ff00000 	.word	0x3ff00000
 8006b30:	7ff00000 	.word	0x7ff00000
 8006b34:	43400000 	.word	0x43400000
 8006b38:	0003988e 	.word	0x0003988e
 8006b3c:	000bb679 	.word	0x000bb679
 8006b40:	08007678 	.word	0x08007678
 8006b44:	3ff00000 	.word	0x3ff00000
 8006b48:	40080000 	.word	0x40080000
 8006b4c:	08007698 	.word	0x08007698
 8006b50:	08007688 	.word	0x08007688
 8006b54:	a3b5      	add	r3, pc, #724	; (adr r3, 8006e2c <__ieee754_pow+0xa3c>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fb95 	bl	800028c <__adddf3>
 8006b62:	4622      	mov	r2, r4
 8006b64:	ec41 0b1a 	vmov	d10, r0, r1
 8006b68:	462b      	mov	r3, r5
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	ec51 0b1a 	vmov	r0, r1, d10
 8006b7a:	f7f9 ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f47f adf8 	bne.w	8006774 <__ieee754_pow+0x384>
 8006b84:	4aa4      	ldr	r2, [pc, #656]	; (8006e18 <__ieee754_pow+0xa28>)
 8006b86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f340 810b 	ble.w	8006da6 <__ieee754_pow+0x9b6>
 8006b90:	151b      	asrs	r3, r3, #20
 8006b92:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b96:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b9a:	fa4a f303 	asr.w	r3, sl, r3
 8006b9e:	445b      	add	r3, fp
 8006ba0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ba4:	4e9d      	ldr	r6, [pc, #628]	; (8006e1c <__ieee754_pow+0xa2c>)
 8006ba6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006baa:	4116      	asrs	r6, r2
 8006bac:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	ea23 0106 	bic.w	r1, r3, r6
 8006bb6:	f1c2 0214 	rsb	r2, r2, #20
 8006bba:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006bbe:	fa4a fa02 	asr.w	sl, sl, r2
 8006bc2:	f1bb 0f00 	cmp.w	fp, #0
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	bfb8      	it	lt
 8006bd0:	f1ca 0a00 	rsblt	sl, sl, #0
 8006bd4:	f7f9 fb58 	bl	8000288 <__aeabi_dsub>
 8006bd8:	ec41 0b19 	vmov	d9, r0, r1
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	ec51 0b19 	vmov	r0, r1, d9
 8006be4:	f7f9 fb52 	bl	800028c <__adddf3>
 8006be8:	2400      	movs	r4, #0
 8006bea:	a379      	add	r3, pc, #484	; (adr r3, 8006dd0 <__ieee754_pow+0x9e0>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	f7f9 fd00 	bl	80005f8 <__aeabi_dmul>
 8006bf8:	ec53 2b19 	vmov	r2, r3, d9
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fb40 	bl	8000288 <__aeabi_dsub>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4649      	mov	r1, r9
 8006c10:	f7f9 fb3a 	bl	8000288 <__aeabi_dsub>
 8006c14:	a370      	add	r3, pc, #448	; (adr r3, 8006dd8 <__ieee754_pow+0x9e8>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	a370      	add	r3, pc, #448	; (adr r3, 8006de0 <__ieee754_pow+0x9f0>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4640      	mov	r0, r8
 8006c36:	4649      	mov	r1, r9
 8006c38:	f7f9 fb28 	bl	800028c <__adddf3>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 fb20 	bl	800028c <__adddf3>
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	463b      	mov	r3, r7
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	f7f9 fb18 	bl	8000288 <__aeabi_dsub>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4629      	mov	r1, r5
 8006c60:	f7f9 fb12 	bl	8000288 <__aeabi_dsub>
 8006c64:	4642      	mov	r2, r8
 8006c66:	4606      	mov	r6, r0
 8006c68:	460f      	mov	r7, r1
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 fcc2 	bl	80005f8 <__aeabi_dmul>
 8006c74:	a35c      	add	r3, pc, #368	; (adr r3, 8006de8 <__ieee754_pow+0x9f8>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	f7f9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8006c82:	a35b      	add	r3, pc, #364	; (adr r3, 8006df0 <__ieee754_pow+0xa00>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f7f9 fafe 	bl	8000288 <__aeabi_dsub>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	462b      	mov	r3, r5
 8006c90:	f7f9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8006c94:	a358      	add	r3, pc, #352	; (adr r3, 8006df8 <__ieee754_pow+0xa08>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 faf7 	bl	800028c <__adddf3>
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	a356      	add	r3, pc, #344	; (adr r3, 8006e00 <__ieee754_pow+0xa10>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 faec 	bl	8000288 <__aeabi_dsub>
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	f7f9 fca0 	bl	80005f8 <__aeabi_dmul>
 8006cb8:	a353      	add	r3, pc, #332	; (adr r3, 8006e08 <__ieee754_pow+0xa18>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fae5 	bl	800028c <__adddf3>
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	f7f9 fc97 	bl	80005f8 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fad9 	bl	8000288 <__aeabi_dsub>
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fc89 	bl	80005f8 <__aeabi_dmul>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	ec41 0b19 	vmov	d9, r0, r1
 8006cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7f9 fac8 	bl	8000288 <__aeabi_dsub>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	ec51 0b19 	vmov	r0, r1, d9
 8006d00:	f7f9 fda4 	bl	800084c <__aeabi_ddiv>
 8006d04:	4632      	mov	r2, r6
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	463b      	mov	r3, r7
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4649      	mov	r1, r9
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	4632      	mov	r2, r6
 8006d16:	463b      	mov	r3, r7
 8006d18:	f7f9 fab8 	bl	800028c <__adddf3>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7f9 fab0 	bl	8000288 <__aeabi_dsub>
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	f7f9 faac 	bl	8000288 <__aeabi_dsub>
 8006d30:	460b      	mov	r3, r1
 8006d32:	4602      	mov	r2, r0
 8006d34:	493a      	ldr	r1, [pc, #232]	; (8006e20 <__ieee754_pow+0xa30>)
 8006d36:	2000      	movs	r0, #0
 8006d38:	f7f9 faa6 	bl	8000288 <__aeabi_dsub>
 8006d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4a:	da2f      	bge.n	8006dac <__ieee754_pow+0x9bc>
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	ed9d 0b00 	vldr	d0, [sp]
 8006d52:	f000 f9cd 	bl	80070f0 <scalbn>
 8006d56:	ec51 0b10 	vmov	r0, r1, d0
 8006d5a:	ec53 2b18 	vmov	r2, r3, d8
 8006d5e:	f7ff bbe0 	b.w	8006522 <__ieee754_pow+0x132>
 8006d62:	4b30      	ldr	r3, [pc, #192]	; (8006e24 <__ieee754_pow+0xa34>)
 8006d64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d68:	429e      	cmp	r6, r3
 8006d6a:	f77f af0b 	ble.w	8006b84 <__ieee754_pow+0x794>
 8006d6e:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <__ieee754_pow+0xa38>)
 8006d70:	440b      	add	r3, r1
 8006d72:	4303      	orrs	r3, r0
 8006d74:	d00b      	beq.n	8006d8e <__ieee754_pow+0x99e>
 8006d76:	a326      	add	r3, pc, #152	; (adr r3, 8006e10 <__ieee754_pow+0xa20>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	ec51 0b18 	vmov	r0, r1, d8
 8006d80:	f7f9 fc3a 	bl	80005f8 <__aeabi_dmul>
 8006d84:	a322      	add	r3, pc, #136	; (adr r3, 8006e10 <__ieee754_pow+0xa20>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7ff bbca 	b.w	8006522 <__ieee754_pow+0x132>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 fa79 	bl	8000288 <__aeabi_dsub>
 8006d96:	4642      	mov	r2, r8
 8006d98:	464b      	mov	r3, r9
 8006d9a:	f7f9 feb3 	bl	8000b04 <__aeabi_dcmpge>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f43f aef0 	beq.w	8006b84 <__ieee754_pow+0x794>
 8006da4:	e7e7      	b.n	8006d76 <__ieee754_pow+0x986>
 8006da6:	f04f 0a00 	mov.w	sl, #0
 8006daa:	e717      	b.n	8006bdc <__ieee754_pow+0x7ec>
 8006dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db0:	4619      	mov	r1, r3
 8006db2:	e7d2      	b.n	8006d5a <__ieee754_pow+0x96a>
 8006db4:	491a      	ldr	r1, [pc, #104]	; (8006e20 <__ieee754_pow+0xa30>)
 8006db6:	2000      	movs	r0, #0
 8006db8:	f7ff bb9e 	b.w	80064f8 <__ieee754_pow+0x108>
 8006dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc0:	f7ff bb9a 	b.w	80064f8 <__ieee754_pow+0x108>
 8006dc4:	9000      	str	r0, [sp, #0]
 8006dc6:	f7ff bb76 	b.w	80064b6 <__ieee754_pow+0xc6>
 8006dca:	2100      	movs	r1, #0
 8006dcc:	f7ff bb60 	b.w	8006490 <__ieee754_pow+0xa0>
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	3fe62e43 	.word	0x3fe62e43
 8006dd8:	fefa39ef 	.word	0xfefa39ef
 8006ddc:	3fe62e42 	.word	0x3fe62e42
 8006de0:	0ca86c39 	.word	0x0ca86c39
 8006de4:	be205c61 	.word	0xbe205c61
 8006de8:	72bea4d0 	.word	0x72bea4d0
 8006dec:	3e663769 	.word	0x3e663769
 8006df0:	c5d26bf1 	.word	0xc5d26bf1
 8006df4:	3ebbbd41 	.word	0x3ebbbd41
 8006df8:	af25de2c 	.word	0xaf25de2c
 8006dfc:	3f11566a 	.word	0x3f11566a
 8006e00:	16bebd93 	.word	0x16bebd93
 8006e04:	3f66c16c 	.word	0x3f66c16c
 8006e08:	5555553e 	.word	0x5555553e
 8006e0c:	3fc55555 	.word	0x3fc55555
 8006e10:	c2f8f359 	.word	0xc2f8f359
 8006e14:	01a56e1f 	.word	0x01a56e1f
 8006e18:	3fe00000 	.word	0x3fe00000
 8006e1c:	000fffff 	.word	0x000fffff
 8006e20:	3ff00000 	.word	0x3ff00000
 8006e24:	4090cbff 	.word	0x4090cbff
 8006e28:	3f6f3400 	.word	0x3f6f3400
 8006e2c:	652b82fe 	.word	0x652b82fe
 8006e30:	3c971547 	.word	0x3c971547

08006e34 <__ieee754_sqrt>:
 8006e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e38:	ec55 4b10 	vmov	r4, r5, d0
 8006e3c:	4e56      	ldr	r6, [pc, #344]	; (8006f98 <__ieee754_sqrt+0x164>)
 8006e3e:	43ae      	bics	r6, r5
 8006e40:	ee10 0a10 	vmov	r0, s0
 8006e44:	ee10 3a10 	vmov	r3, s0
 8006e48:	4629      	mov	r1, r5
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	d110      	bne.n	8006e70 <__ieee754_sqrt+0x3c>
 8006e4e:	ee10 2a10 	vmov	r2, s0
 8006e52:	462b      	mov	r3, r5
 8006e54:	f7f9 fbd0 	bl	80005f8 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7f9 fa14 	bl	800028c <__adddf3>
 8006e64:	4604      	mov	r4, r0
 8006e66:	460d      	mov	r5, r1
 8006e68:	ec45 4b10 	vmov	d0, r4, r5
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	dc10      	bgt.n	8006e96 <__ieee754_sqrt+0x62>
 8006e74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e78:	4330      	orrs	r0, r6
 8006e7a:	d0f5      	beq.n	8006e68 <__ieee754_sqrt+0x34>
 8006e7c:	b15d      	cbz	r5, 8006e96 <__ieee754_sqrt+0x62>
 8006e7e:	ee10 2a10 	vmov	r2, s0
 8006e82:	462b      	mov	r3, r5
 8006e84:	ee10 0a10 	vmov	r0, s0
 8006e88:	f7f9 f9fe 	bl	8000288 <__aeabi_dsub>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	f7f9 fcdc 	bl	800084c <__aeabi_ddiv>
 8006e94:	e7e6      	b.n	8006e64 <__ieee754_sqrt+0x30>
 8006e96:	1509      	asrs	r1, r1, #20
 8006e98:	d076      	beq.n	8006f88 <__ieee754_sqrt+0x154>
 8006e9a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006e9e:	07ce      	lsls	r6, r1, #31
 8006ea0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006ea4:	bf5e      	ittt	pl
 8006ea6:	0fda      	lsrpl	r2, r3, #31
 8006ea8:	005b      	lslpl	r3, r3, #1
 8006eaa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006eae:	0fda      	lsrs	r2, r3, #31
 8006eb0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006eb4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006eb8:	2000      	movs	r0, #0
 8006eba:	106d      	asrs	r5, r5, #1
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	f04f 0e16 	mov.w	lr, #22
 8006ec2:	4684      	mov	ip, r0
 8006ec4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ec8:	eb0c 0401 	add.w	r4, ip, r1
 8006ecc:	4294      	cmp	r4, r2
 8006ece:	bfde      	ittt	le
 8006ed0:	1b12      	suble	r2, r2, r4
 8006ed2:	eb04 0c01 	addle.w	ip, r4, r1
 8006ed6:	1840      	addle	r0, r0, r1
 8006ed8:	0052      	lsls	r2, r2, #1
 8006eda:	f1be 0e01 	subs.w	lr, lr, #1
 8006ede:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006ee2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006ee6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006eea:	d1ed      	bne.n	8006ec8 <__ieee754_sqrt+0x94>
 8006eec:	4671      	mov	r1, lr
 8006eee:	2720      	movs	r7, #32
 8006ef0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006ef4:	4562      	cmp	r2, ip
 8006ef6:	eb04 060e 	add.w	r6, r4, lr
 8006efa:	dc02      	bgt.n	8006f02 <__ieee754_sqrt+0xce>
 8006efc:	d113      	bne.n	8006f26 <__ieee754_sqrt+0xf2>
 8006efe:	429e      	cmp	r6, r3
 8006f00:	d811      	bhi.n	8006f26 <__ieee754_sqrt+0xf2>
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	eb06 0e04 	add.w	lr, r6, r4
 8006f08:	da43      	bge.n	8006f92 <__ieee754_sqrt+0x15e>
 8006f0a:	f1be 0f00 	cmp.w	lr, #0
 8006f0e:	db40      	blt.n	8006f92 <__ieee754_sqrt+0x15e>
 8006f10:	f10c 0801 	add.w	r8, ip, #1
 8006f14:	eba2 020c 	sub.w	r2, r2, ip
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	bf88      	it	hi
 8006f1c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	4421      	add	r1, r4
 8006f24:	46c4      	mov	ip, r8
 8006f26:	0052      	lsls	r2, r2, #1
 8006f28:	3f01      	subs	r7, #1
 8006f2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006f2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006f32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f36:	d1dd      	bne.n	8006ef4 <__ieee754_sqrt+0xc0>
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	d006      	beq.n	8006f4a <__ieee754_sqrt+0x116>
 8006f3c:	1c4c      	adds	r4, r1, #1
 8006f3e:	bf13      	iteet	ne
 8006f40:	3101      	addne	r1, #1
 8006f42:	3001      	addeq	r0, #1
 8006f44:	4639      	moveq	r1, r7
 8006f46:	f021 0101 	bicne.w	r1, r1, #1
 8006f4a:	1043      	asrs	r3, r0, #1
 8006f4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006f50:	0849      	lsrs	r1, r1, #1
 8006f52:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006f56:	07c2      	lsls	r2, r0, #31
 8006f58:	bf48      	it	mi
 8006f5a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006f5e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006f62:	460c      	mov	r4, r1
 8006f64:	463d      	mov	r5, r7
 8006f66:	e77f      	b.n	8006e68 <__ieee754_sqrt+0x34>
 8006f68:	0ada      	lsrs	r2, r3, #11
 8006f6a:	3815      	subs	r0, #21
 8006f6c:	055b      	lsls	r3, r3, #21
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d0fa      	beq.n	8006f68 <__ieee754_sqrt+0x134>
 8006f72:	02d7      	lsls	r7, r2, #11
 8006f74:	d50a      	bpl.n	8006f8c <__ieee754_sqrt+0x158>
 8006f76:	f1c1 0420 	rsb	r4, r1, #32
 8006f7a:	fa23 f404 	lsr.w	r4, r3, r4
 8006f7e:	1e4d      	subs	r5, r1, #1
 8006f80:	408b      	lsls	r3, r1
 8006f82:	4322      	orrs	r2, r4
 8006f84:	1b41      	subs	r1, r0, r5
 8006f86:	e788      	b.n	8006e9a <__ieee754_sqrt+0x66>
 8006f88:	4608      	mov	r0, r1
 8006f8a:	e7f0      	b.n	8006f6e <__ieee754_sqrt+0x13a>
 8006f8c:	0052      	lsls	r2, r2, #1
 8006f8e:	3101      	adds	r1, #1
 8006f90:	e7ef      	b.n	8006f72 <__ieee754_sqrt+0x13e>
 8006f92:	46e0      	mov	r8, ip
 8006f94:	e7be      	b.n	8006f14 <__ieee754_sqrt+0xe0>
 8006f96:	bf00      	nop
 8006f98:	7ff00000 	.word	0x7ff00000

08006f9c <fabs>:
 8006f9c:	ec51 0b10 	vmov	r0, r1, d0
 8006fa0:	ee10 2a10 	vmov	r2, s0
 8006fa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fa8:	ec43 2b10 	vmov	d0, r2, r3
 8006fac:	4770      	bx	lr

08006fae <finite>:
 8006fae:	b082      	sub	sp, #8
 8006fb0:	ed8d 0b00 	vstr	d0, [sp]
 8006fb4:	9801      	ldr	r0, [sp, #4]
 8006fb6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006fba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006fbe:	0fc0      	lsrs	r0, r0, #31
 8006fc0:	b002      	add	sp, #8
 8006fc2:	4770      	bx	lr
 8006fc4:	0000      	movs	r0, r0
	...

08006fc8 <nan>:
 8006fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006fd0 <nan+0x8>
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	00000000 	.word	0x00000000
 8006fd4:	7ff80000 	.word	0x7ff80000

08006fd8 <rint>:
 8006fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fda:	ec51 0b10 	vmov	r0, r1, d0
 8006fde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006fe2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006fe6:	2e13      	cmp	r6, #19
 8006fe8:	ee10 4a10 	vmov	r4, s0
 8006fec:	460b      	mov	r3, r1
 8006fee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006ff2:	dc58      	bgt.n	80070a6 <rint+0xce>
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	da2b      	bge.n	8007050 <rint+0x78>
 8006ff8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006ffc:	4302      	orrs	r2, r0
 8006ffe:	d023      	beq.n	8007048 <rint+0x70>
 8007000:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007004:	4302      	orrs	r2, r0
 8007006:	4254      	negs	r4, r2
 8007008:	4314      	orrs	r4, r2
 800700a:	0c4b      	lsrs	r3, r1, #17
 800700c:	0b24      	lsrs	r4, r4, #12
 800700e:	045b      	lsls	r3, r3, #17
 8007010:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007014:	ea44 0103 	orr.w	r1, r4, r3
 8007018:	4b32      	ldr	r3, [pc, #200]	; (80070e4 <rint+0x10c>)
 800701a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800701e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 f92f 	bl	800028c <__adddf3>
 800702e:	e9cd 0100 	strd	r0, r1, [sp]
 8007032:	463b      	mov	r3, r7
 8007034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007038:	4632      	mov	r2, r6
 800703a:	f7f9 f925 	bl	8000288 <__aeabi_dsub>
 800703e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007042:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007046:	4639      	mov	r1, r7
 8007048:	ec41 0b10 	vmov	d0, r0, r1
 800704c:	b003      	add	sp, #12
 800704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007050:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <rint+0x110>)
 8007052:	4132      	asrs	r2, r6
 8007054:	ea01 0702 	and.w	r7, r1, r2
 8007058:	4307      	orrs	r7, r0
 800705a:	d0f5      	beq.n	8007048 <rint+0x70>
 800705c:	0851      	lsrs	r1, r2, #1
 800705e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007062:	4314      	orrs	r4, r2
 8007064:	d00c      	beq.n	8007080 <rint+0xa8>
 8007066:	ea23 0201 	bic.w	r2, r3, r1
 800706a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800706e:	2e13      	cmp	r6, #19
 8007070:	fa43 f606 	asr.w	r6, r3, r6
 8007074:	bf0c      	ite	eq
 8007076:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800707a:	2400      	movne	r4, #0
 800707c:	ea42 0306 	orr.w	r3, r2, r6
 8007080:	4918      	ldr	r1, [pc, #96]	; (80070e4 <rint+0x10c>)
 8007082:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007086:	4622      	mov	r2, r4
 8007088:	e9d5 4500 	ldrd	r4, r5, [r5]
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f7f9 f8fc 	bl	800028c <__adddf3>
 8007094:	e9cd 0100 	strd	r0, r1, [sp]
 8007098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800709c:	4622      	mov	r2, r4
 800709e:	462b      	mov	r3, r5
 80070a0:	f7f9 f8f2 	bl	8000288 <__aeabi_dsub>
 80070a4:	e7d0      	b.n	8007048 <rint+0x70>
 80070a6:	2e33      	cmp	r6, #51	; 0x33
 80070a8:	dd07      	ble.n	80070ba <rint+0xe2>
 80070aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80070ae:	d1cb      	bne.n	8007048 <rint+0x70>
 80070b0:	ee10 2a10 	vmov	r2, s0
 80070b4:	f7f9 f8ea 	bl	800028c <__adddf3>
 80070b8:	e7c6      	b.n	8007048 <rint+0x70>
 80070ba:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80070be:	f04f 36ff 	mov.w	r6, #4294967295
 80070c2:	40d6      	lsrs	r6, r2
 80070c4:	4230      	tst	r0, r6
 80070c6:	d0bf      	beq.n	8007048 <rint+0x70>
 80070c8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80070cc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80070d0:	bf1f      	itttt	ne
 80070d2:	ea24 0101 	bicne.w	r1, r4, r1
 80070d6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80070da:	fa44 f202 	asrne.w	r2, r4, r2
 80070de:	ea41 0402 	orrne.w	r4, r1, r2
 80070e2:	e7cd      	b.n	8007080 <rint+0xa8>
 80070e4:	080076a8 	.word	0x080076a8
 80070e8:	000fffff 	.word	0x000fffff
 80070ec:	00000000 	.word	0x00000000

080070f0 <scalbn>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	ec55 4b10 	vmov	r4, r5, d0
 80070f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80070fa:	4606      	mov	r6, r0
 80070fc:	462b      	mov	r3, r5
 80070fe:	b99a      	cbnz	r2, 8007128 <scalbn+0x38>
 8007100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007104:	4323      	orrs	r3, r4
 8007106:	d036      	beq.n	8007176 <scalbn+0x86>
 8007108:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <scalbn+0x100>)
 800710a:	4629      	mov	r1, r5
 800710c:	ee10 0a10 	vmov	r0, s0
 8007110:	2200      	movs	r2, #0
 8007112:	f7f9 fa71 	bl	80005f8 <__aeabi_dmul>
 8007116:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <scalbn+0x104>)
 8007118:	429e      	cmp	r6, r3
 800711a:	4604      	mov	r4, r0
 800711c:	460d      	mov	r5, r1
 800711e:	da10      	bge.n	8007142 <scalbn+0x52>
 8007120:	a32b      	add	r3, pc, #172	; (adr r3, 80071d0 <scalbn+0xe0>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e03a      	b.n	800719e <scalbn+0xae>
 8007128:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800712c:	428a      	cmp	r2, r1
 800712e:	d10c      	bne.n	800714a <scalbn+0x5a>
 8007130:	ee10 2a10 	vmov	r2, s0
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 f8a8 	bl	800028c <__adddf3>
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	e019      	b.n	8007176 <scalbn+0x86>
 8007142:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007146:	460b      	mov	r3, r1
 8007148:	3a36      	subs	r2, #54	; 0x36
 800714a:	4432      	add	r2, r6
 800714c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007150:	428a      	cmp	r2, r1
 8007152:	dd08      	ble.n	8007166 <scalbn+0x76>
 8007154:	2d00      	cmp	r5, #0
 8007156:	a120      	add	r1, pc, #128	; (adr r1, 80071d8 <scalbn+0xe8>)
 8007158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800715c:	da1c      	bge.n	8007198 <scalbn+0xa8>
 800715e:	a120      	add	r1, pc, #128	; (adr r1, 80071e0 <scalbn+0xf0>)
 8007160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007164:	e018      	b.n	8007198 <scalbn+0xa8>
 8007166:	2a00      	cmp	r2, #0
 8007168:	dd08      	ble.n	800717c <scalbn+0x8c>
 800716a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800716e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007172:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007176:	ec45 4b10 	vmov	d0, r4, r5
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007180:	da19      	bge.n	80071b6 <scalbn+0xc6>
 8007182:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007186:	429e      	cmp	r6, r3
 8007188:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800718c:	dd0a      	ble.n	80071a4 <scalbn+0xb4>
 800718e:	a112      	add	r1, pc, #72	; (adr r1, 80071d8 <scalbn+0xe8>)
 8007190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e2      	bne.n	800715e <scalbn+0x6e>
 8007198:	a30f      	add	r3, pc, #60	; (adr r3, 80071d8 <scalbn+0xe8>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 fa2b 	bl	80005f8 <__aeabi_dmul>
 80071a2:	e7cb      	b.n	800713c <scalbn+0x4c>
 80071a4:	a10a      	add	r1, pc, #40	; (adr r1, 80071d0 <scalbn+0xe0>)
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0b8      	beq.n	8007120 <scalbn+0x30>
 80071ae:	a10e      	add	r1, pc, #56	; (adr r1, 80071e8 <scalbn+0xf8>)
 80071b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071b4:	e7b4      	b.n	8007120 <scalbn+0x30>
 80071b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071ba:	3236      	adds	r2, #54	; 0x36
 80071bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80071c4:	4620      	mov	r0, r4
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <scalbn+0x108>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	e7e8      	b.n	800719e <scalbn+0xae>
 80071cc:	f3af 8000 	nop.w
 80071d0:	c2f8f359 	.word	0xc2f8f359
 80071d4:	01a56e1f 	.word	0x01a56e1f
 80071d8:	8800759c 	.word	0x8800759c
 80071dc:	7e37e43c 	.word	0x7e37e43c
 80071e0:	8800759c 	.word	0x8800759c
 80071e4:	fe37e43c 	.word	0xfe37e43c
 80071e8:	c2f8f359 	.word	0xc2f8f359
 80071ec:	81a56e1f 	.word	0x81a56e1f
 80071f0:	43500000 	.word	0x43500000
 80071f4:	ffff3cb0 	.word	0xffff3cb0
 80071f8:	3c900000 	.word	0x3c900000

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
