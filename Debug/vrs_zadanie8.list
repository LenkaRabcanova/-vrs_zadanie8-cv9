
vrs_zadanie8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080024e4  080024e4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e4  080024e4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080024ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000048  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f57  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192a  00000000  00000000  00027f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  000298c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e8  00000000  00000000  0002a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002497  00000000  00000000  0002a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061a6  00000000  00000000  0002cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000796c0  00000000  00000000  00032d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ac455  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f04  00000000  00000000  000ac4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002454 	.word	0x08002454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002454 	.word	0x08002454

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <lps25hb_write_byte>:
#include "math.h"

static uint8_t address = LPS25HB_I2C_ADDRESS_1;

void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address, 0);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <lps25hb_write_byte+0x28>)
 80001ea:	781a      	ldrb	r2, [r3, #0]
 80001ec:	79f9      	ldrb	r1, [r7, #7]
 80001ee:	79b8      	ldrb	r0, [r7, #6]
 80001f0:	2300      	movs	r3, #0
 80001f2:	f000 fc45 	bl	8000a80 <i2c_master_write>
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <lps25hb_read_byte>:


uint8_t  lps25hb_read_byte(uint8_t reg_addr)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af02      	add	r7, sp, #8
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address, 0));
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <lps25hb_read_byte+0x30>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	79fa      	ldrb	r2, [r7, #7]
 8000218:	f107 000f 	add.w	r0, r7, #15
 800021c:	2100      	movs	r1, #0
 800021e:	9100      	str	r1, [sp, #0]
 8000220:	2101      	movs	r1, #1
 8000222:	f000 fc71 	bl	8000b08 <i2c_master_read>
 8000226:	4603      	mov	r3, r0
 8000228:	781b      	ldrb	r3, [r3, #0]
}
 800022a:	4618      	mov	r0, r3
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000

08000238 <lps25hb_init>:

uint8_t lps25hb_init(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800023e:	2301      	movs	r3, #1
 8000240:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f002 f8ac 	bl	80023a0 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_REG_WHO_AM_I_ADDR);
 8000248:	200f      	movs	r0, #15
 800024a:	f7ff ffdb 	bl	8000204 <lps25hb_read_byte>
 800024e:	4603      	mov	r3, r0
 8000250:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	2bbd      	cmp	r3, #189	; 0xbd
 8000256:	d102      	bne.n	800025e <lps25hb_init+0x26>
	{
		status = 1;
 8000258:	2301      	movs	r3, #1
 800025a:	71fb      	strb	r3, [r7, #7]
 800025c:	e00f      	b.n	800027e <lps25hb_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		address = LPS25HB_I2C_ADDRESS_1;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <lps25hb_init+0x60>)
 8000260:	225d      	movs	r2, #93	; 0x5d
 8000262:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_VALUE);
 8000264:	20bd      	movs	r0, #189	; 0xbd
 8000266:	f7ff ffcd 	bl	8000204 <lps25hb_read_byte>
 800026a:	4603      	mov	r3, r0
 800026c:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_REG_WHO_AM_I_ADDR)
 800026e:	79bb      	ldrb	r3, [r7, #6]
 8000270:	2b0f      	cmp	r3, #15
 8000272:	d102      	bne.n	800027a <lps25hb_init+0x42>
		{
			status = 1;
 8000274:	2301      	movs	r3, #1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	e001      	b.n	800027e <lps25hb_init+0x46>
		}
		else
		{
			status = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	71fb      	strb	r3, [r7, #7]
		}
	}
	//nastavenie registrov

	uint8_t ctrl1 = 0b11000000; // power enable,  ODR 25Hz, interupt off, BDU off, autozero off
 800027e:	23c0      	movs	r3, #192	; 0xc0
 8000280:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 8000282:	797b      	ldrb	r3, [r7, #5]
 8000284:	4619      	mov	r1, r3
 8000286:	2020      	movs	r0, #32
 8000288:	f7ff ffa6 	bl	80001d8 <lps25hb_write_byte>

	return status;
 800028c:	79fb      	ldrb	r3, [r7, #7]

}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000000 	.word	0x20000000

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4907      	ldr	r1, [pc, #28]	; (80002f0 <__NVIC_EnableIRQ+0x38>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	db0a      	blt.n	800031e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	490c      	ldr	r1, [pc, #48]	; (8000340 <__NVIC_SetPriority+0x4c>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800031c:	e00a      	b.n	8000334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	; (8000344 <__NVIC_SetPriority+0x50>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 030f 	and.w	r3, r3, #15
 800032a:	3b04      	subs	r3, #4
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	440b      	add	r3, r1
 8000332:	761a      	strb	r2, [r3, #24]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	; 0x24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	f1c3 0307 	rsb	r3, r3, #7
 8000362:	2b04      	cmp	r3, #4
 8000364:	bf28      	it	cs
 8000366:	2304      	movcs	r3, #4
 8000368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	3304      	adds	r3, #4
 800036e:	2b06      	cmp	r3, #6
 8000370:	d902      	bls.n	8000378 <NVIC_EncodePriority+0x30>
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3b03      	subs	r3, #3
 8000376:	e000      	b.n	800037a <NVIC_EncodePriority+0x32>
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	f04f 32ff 	mov.w	r2, #4294967295
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	43da      	mvns	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	401a      	ands	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000390:	f04f 31ff 	mov.w	r1, #4294967295
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43d9      	mvns	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a0:	4313      	orrs	r3, r2
         );
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3724      	adds	r7, #36	; 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ba:	695a      	ldr	r2, [r3, #20]
 80003bc:	4907      	ldr	r1, [pc, #28]	; (80003dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003c6:	695a      	ldr	r2, [r3, #20]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80003ea:	4a13      	ldr	r2, [pc, #76]	; (8000438 <LL_SYSCFG_SetEXTISource+0x58>)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	3302      	adds	r3, #2
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	0c1b      	lsrs	r3, r3, #16
 80003fa:	43db      	mvns	r3, r3
 80003fc:	ea02 0103 	and.w	r1, r2, r3
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	fa93 f3a3 	rbit	r3, r3
 800040c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	fab3 f383 	clz	r3, r3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	fa03 f202 	lsl.w	r2, r3, r2
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <LL_SYSCFG_SetEXTISource+0x58>)
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	430a      	orrs	r2, r1
 8000426:	3302      	adds	r3, #2
 8000428:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800042c:	bf00      	nop
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40010000 	.word	0x40010000

0800043c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800043c:	b480      	push	{r7}
 800043e:	b089      	sub	sp, #36	; 0x24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa93 f3a3 	rbit	r3, r3
 8000456:	613b      	str	r3, [r7, #16]
  return result;
 8000458:	693b      	ldr	r3, [r7, #16]
 800045a:	fab3 f383 	clz	r3, r3
 800045e:	b2db      	uxtb	r3, r3
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	401a      	ands	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000470:	69fb      	ldr	r3, [r7, #28]
 8000472:	fa93 f3a3 	rbit	r3, r3
 8000476:	61bb      	str	r3, [r7, #24]
  return result;
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	fab3 f383 	clz	r3, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	431a      	orrs	r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800049a:	b480      	push	{r7}
 800049c:	b089      	sub	sp, #36	; 0x24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	fa93 f3a3 	rbit	r3, r3
 80004b4:	613b      	str	r3, [r7, #16]
  return result;
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	fab3 f383 	clz	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	2103      	movs	r1, #3
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	43db      	mvns	r3, r3
 80004c8:	401a      	ands	r2, r3
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	fa93 f3a3 	rbit	r3, r3
 80004d4:	61bb      	str	r3, [r7, #24]
  return result;
 80004d6:	69bb      	ldr	r3, [r7, #24]
 80004d8:	fab3 f383 	clz	r3, r3
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	fa01 f303 	lsl.w	r3, r1, r3
 80004e6:	431a      	orrs	r2, r3
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	60da      	str	r2, [r3, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3724      	adds	r7, #36	; 0x24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000536:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800053a:	f7ff ff39 	bl	80003b0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800053e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000542:	f7ff ff35 	bl	80003b0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8000546:	f640 11ff 	movw	r1, #2559	; 0x9ff
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f7ff ffd3 	bl	80004f8 <LL_GPIO_ResetOutputPin>
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 8000552:	2132      	movs	r1, #50	; 0x32
 8000554:	482b      	ldr	r0, [pc, #172]	; (8000604 <MX_GPIO_Init+0xf0>)
 8000556:	f7ff ffcf 	bl	80004f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 800055a:	f640 13ff 	movw	r3, #2559	; 0x9ff
 800055e:	607b      	str	r3, [r7, #4]
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f001 fcee 	bl	8001f58 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 800057c:	2332      	movs	r3, #50	; 0x32
 800057e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000580:	2301      	movs	r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	481b      	ldr	r0, [pc, #108]	; (8000604 <MX_GPIO_Init+0xf0>)
 8000596:	f001 fcdf 	bl	8001f58 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800059a:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 800059e:	2001      	movs	r0, #1
 80005a0:	f7ff ff1e 	bl	80003e0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <MX_GPIO_Init+0xf0>)
 80005aa:	f7ff ff76 	bl	800049a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	4814      	ldr	r0, [pc, #80]	; (8000604 <MX_GPIO_Init+0xf0>)
 80005b4:	f7ff ff42 	bl	800043c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80005b8:	2308      	movs	r3, #8
 80005ba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fac6 	bl	8001b68 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80005dc:	f7ff fe5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff feae 	bl	8000348 <NVIC_EncodePriority>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4619      	mov	r1, r3
 80005f0:	2009      	movs	r0, #9
 80005f2:	f7ff fe7f 	bl	80002f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80005f6:	2009      	movs	r0, #9
 80005f8:	f7ff fe5e 	bl	80002b8 <__NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3728      	adds	r7, #40	; 0x28
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	48000400 	.word	0x48000400

08000608 <__NVIC_GetPriorityGrouping>:
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_EnableIRQ>:
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db0b      	blt.n	800064e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 021f 	and.w	r2, r3, #31
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <__NVIC_EnableIRQ+0x38>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <__NVIC_SetPriority>:
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f043 0201 	orr.w	r2, r3, #1
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800078e:	f023 0306 	bic.w	r3, r3, #6
 8000792:	68b9      	ldr	r1, [r7, #8]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	430a      	orrs	r2, r1
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	60da      	str	r2, [r3, #12]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f043 0204 	orr.w	r2, r3, #4
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f023 0204 	bic.w	r2, r3, #4
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	2b02      	cmp	r3, #2
 800081c:	d101      	bne.n	8000822 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800081e:	2301      	movs	r3, #1
 8000820:	e000      	b.n	8000824 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	2b04      	cmp	r3, #4
 8000842:	d101      	bne.n	8000848 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000844:	2301      	movs	r3, #1
 8000846:	e000      	b.n	800084a <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0320 	and.w	r3, r3, #32
 8000866:	2b20      	cmp	r3, #32
 8000868:	d101      	bne.n	800086e <LL_I2C_IsActiveFlag_STOP+0x18>
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <LL_I2C_IsActiveFlag_STOP+0x1a>
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f043 0220 	orr.w	r2, r3, #32
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	61da      	str	r2, [r3, #28]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	605a      	str	r2, [r3, #4]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	0d5b      	lsrs	r3, r3, #21
 80008d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LL_I2C_HandleTransfer+0x48>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	43db      	mvns	r3, r3
 80008dc:	401a      	ands	r2, r3
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4319      	orrs	r1, r3
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	041b      	lsls	r3, r3, #16
 80008e8:	4319      	orrs	r1, r3
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	4319      	orrs	r1, r3
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	430b      	orrs	r3, r1
 80008f2:	431a      	orrs	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	03ff7bff 	.word	0x03ff7bff

08000908 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000914:	b2db      	uxtb	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	460b      	mov	r3, r1
 800092c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_AHB1_GRP1_EnableClock>:
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000

08000970 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <LL_APB1_GRP1_EnableClock+0x2c>)
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <LL_APB1_GRP1_EnableClock+0x2c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000986:	69da      	ldr	r2, [r3, #28]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4013      	ands	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80009ce:	f7ff ffb7 	bl	8000940 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80009d2:	23c0      	movs	r3, #192	; 0xc0
 80009d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009de:	2301      	movs	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_I2C1_Init+0xd4>)
 80009f0:	f001 fab2 	bl	8001f58 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80009f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009f8:	f7ff ffba 	bl	8000970 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009fc:	f7ff fe04 	bl	8000608 <__NVIC_GetPriorityGrouping>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe54 	bl	80006b4 <NVIC_EncodePriority>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	201f      	movs	r0, #31
 8000a12:	f7ff fe25 	bl	8000660 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a16:	201f      	movs	r0, #31
 8000a18:	f7ff fe04 	bl	8000624 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a1e:	f7ff ff3d 	bl	800089c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a24:	f7ff fec1 	bl	80007aa <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a2a:	f7ff fe96 	bl	800075a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000a2e:	4812      	ldr	r0, [pc, #72]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a30:	f7ff fe83 	bl	800073a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_I2C1_Init+0xdc>)
 8000a3a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a58:	f001 fb91 	bl	800217e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a62:	f7ff fe8a 	bl	800077a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0xd8>)
 8000a68:	f7ff fe57 	bl	800071a <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3738      	adds	r7, #56	; 0x38
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	48000400 	.word	0x48000400
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	2000090e 	.word	0x2000090e

08000a80 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4603      	mov	r3, r0
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	717b      	strb	r3, [r7, #5]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8000a9e:	793b      	ldrb	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aaa:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000aac:	7979      	ldrb	r1, [r7, #5]
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <i2c_master_write+0x80>)
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2302      	movs	r3, #2
 8000aba:	2200      	movs	r2, #0
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <i2c_master_write+0x84>)
 8000abe:	f7ff fefd 	bl	80008bc <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480f      	ldr	r0, [pc, #60]	; (8000b04 <i2c_master_write+0x84>)
 8000ac8:	f7ff ff2b 	bl	8000922 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000acc:	e00a      	b.n	8000ae4 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <i2c_master_write+0x84>)
 8000ad0:	f7ff fe9b 	bl	800080a <LL_I2C_IsActiveFlag_TXIS>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d004      	beq.n	8000ae4 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4619      	mov	r1, r3
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <i2c_master_write+0x84>)
 8000ae0:	f7ff ff1f 	bl	8000922 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <i2c_master_write+0x84>)
 8000ae6:	f7ff feb6 	bl	8000856 <LL_I2C_IsActiveFlag_STOP>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0ee      	beq.n	8000ace <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <i2c_master_write+0x84>)
 8000af2:	f7ff fec3 	bl	800087c <LL_I2C_ClearFlag_STOP>
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	80002000 	.word	0x80002000
 8000b04:	40005400 	.word	0x40005400

08000b08 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	70fb      	strb	r3, [r7, #3]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	70bb      	strb	r3, [r7, #2]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8000b22:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <i2c_master_read+0xdc>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8000b28:	7c3b      	ldrb	r3, [r7, #16]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8000b2e:	78bb      	ldrb	r3, [r7, #2]
 8000b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b34:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <i2c_master_read+0xe0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8000b3c:	482b      	ldr	r0, [pc, #172]	; (8000bec <i2c_master_read+0xe4>)
 8000b3e:	f7ff fe44 	bl	80007ca <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8000b42:	7879      	ldrb	r1, [r7, #1]
 8000b44:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <i2c_master_read+0xe8>)
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2200      	movs	r2, #0
 8000b52:	4826      	ldr	r0, [pc, #152]	; (8000bec <i2c_master_read+0xe4>)
 8000b54:	f7ff feb2 	bl	80008bc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000b58:	e00a      	b.n	8000b70 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8000b5a:	4824      	ldr	r0, [pc, #144]	; (8000bec <i2c_master_read+0xe4>)
 8000b5c:	f7ff fe55 	bl	800080a <LL_I2C_IsActiveFlag_TXIS>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d004      	beq.n	8000b70 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8000b66:	78bb      	ldrb	r3, [r7, #2]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <i2c_master_read+0xe4>)
 8000b6c:	f7ff fed9 	bl	8000922 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <i2c_master_read+0xe4>)
 8000b72:	f7ff fe70 	bl	8000856 <LL_I2C_IsActiveFlag_STOP>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0ee      	beq.n	8000b5a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8000b7c:	481b      	ldr	r0, [pc, #108]	; (8000bec <i2c_master_read+0xe4>)
 8000b7e:	f7ff fe7d 	bl	800087c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8000b82:	bf00      	nop
 8000b84:	4819      	ldr	r0, [pc, #100]	; (8000bec <i2c_master_read+0xe4>)
 8000b86:	f7ff fe66 	bl	8000856 <LL_I2C_IsActiveFlag_STOP>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f9      	bne.n	8000b84 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8000b90:	7879      	ldrb	r1, [r7, #1]
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <i2c_master_read+0xec>)
 8000b96:	9201      	str	r2, [sp, #4]
 8000b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b9c:	9200      	str	r2, [sp, #0]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <i2c_master_read+0xe4>)
 8000ba2:	f7ff fe8b 	bl	80008bc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8000ba6:	bf00      	nop
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <i2c_master_read+0xe4>)
 8000baa:	f7ff fe54 	bl	8000856 <LL_I2C_IsActiveFlag_STOP>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f9      	beq.n	8000ba8 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <i2c_master_read+0xe4>)
 8000bb6:	f7ff fe61 	bl	800087c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <i2c_master_read+0xe4>)
 8000bbc:	f7ff fe15 	bl	80007ea <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <i2c_master_read+0xe4>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <i2c_master_read+0xe4>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <i2c_master_read+0xf0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <i2c_master_read+0xe0>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <i2c_master_read+0xdc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000038 	.word	0x20000038
 8000be8:	20000024 	.word	0x20000024
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	80002000 	.word	0x80002000
 8000bf4:	80002400 	.word	0x80002400
 8000bf8:	20000025 	.word	0x20000025

08000bfc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8000bfc:	b598      	push	{r3, r4, r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <I2C1_EV_IRQHandler+0x50>)
 8000c02:	f7ff fe15 	bl	8000830 <LL_I2C_IsActiveFlag_RXNE>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01c      	beq.n	8000c46 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <I2C1_EV_IRQHandler+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <I2C1_EV_IRQHandler+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	1c59      	adds	r1, r3, #1
 8000c18:	b2c8      	uxtb	r0, r1
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <I2C1_EV_IRQHandler+0x58>)
 8000c1c:	7008      	strb	r0, [r1, #0]
 8000c1e:	18d4      	adds	r4, r2, r3
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <I2C1_EV_IRQHandler+0x50>)
 8000c22:	f7ff fe71 	bl	8000908 <LL_I2C_ReceiveData8>
 8000c26:	4603      	mov	r3, r0
 8000c28:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <I2C1_EV_IRQHandler+0x58>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b13      	cmp	r3, #19
 8000c32:	d903      	bls.n	8000c3c <I2C1_EV_IRQHandler+0x40>
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <I2C1_EV_IRQHandler+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e001      	b.n	8000c40 <I2C1_EV_IRQHandler+0x44>
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <I2C1_EV_IRQHandler+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <I2C1_EV_IRQHandler+0x5c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
	}
}
 8000c46:	bf00      	nop
 8000c48:	bd98      	pop	{r3, r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	20000038 	.word	0x20000038
 8000c54:	20000025 	.word	0x20000025
 8000c58:	20000024 	.word	0x20000024

08000c5c <__NVIC_SetPriorityGrouping>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_RCC_HSI_Enable+0x1c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <LL_RCC_HSI_Enable+0x1c>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <LL_RCC_HSI_IsReady+0x20>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	4904      	ldr	r1, [pc, #16]	; (8000de8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <LL_RCC_SetSysClkSource+0x24>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f023 0203 	bic.w	r2, r3, #3
 8000dfc:	4904      	ldr	r1, [pc, #16]	; (8000e10 <LL_RCC_SetSysClkSource+0x24>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000

08000e14 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <LL_RCC_GetSysClkSource+0x18>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000

08000e58 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LL_RCC_SetI2CClockSource+0x2c>)
 8000eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0e1b      	lsrs	r3, r3, #24
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ec2:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <LL_RCC_SetI2CClockSource+0x2c>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <LL_APB1_GRP1_EnableClock>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <LL_FLASH_SetLatency+0x24>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 0207 	bic.w	r2, r3, #7
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <LL_FLASH_SetLatency+0x24>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40022000 	.word	0x40022000

08000f60 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <LL_FLASH_GetLatency+0x18>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0307 	and.w	r3, r3, #7
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f06f 0201 	mvn.w	r2, #1
 8000faa:	611a      	str	r2, [r3, #16]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60da      	str	r2, [r3, #12]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_GPIO_IsInputPinSet>:
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4013      	ands	r3, r2
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	bf0c      	ite	eq
 8001016:	2301      	moveq	r3, #1
 8001018:	2300      	movne	r3, #0
 800101a:	b2db      	uxtb	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_GPIO_SetOutputPin>:
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	619a      	str	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_GPIO_ResetOutputPin>:
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <resetSegments>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetSegments(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f7ff ffdc 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f7ff ffd6 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 800107c:	2102      	movs	r1, #2
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <resetSegments+0x58>)
 8001080:	f7ff ffd2 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001084:	2120      	movs	r1, #32
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <resetSegments+0x58>)
 8001088:	f7ff ffce 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800108c:	2110      	movs	r1, #16
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <resetSegments+0x58>)
 8001090:	f7ff ffca 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001094:	2101      	movs	r1, #1
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f7ff ffc5 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 800109e:	2102      	movs	r1, #2
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f7ff ffc0 	bl	8001028 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80010a8:	2108      	movs	r1, #8
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f7ff ffbb 	bl	8001028 <LL_GPIO_SetOutputPin>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000400 	.word	0x48000400

080010bc <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 80010c0:	2104      	movs	r1, #4
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f7ff ffbd 	bl	8001044 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80010ca:	2120      	movs	r1, #32
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f7ff ffb8 	bl	8001044 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80010d4:	2110      	movs	r1, #16
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f7ff ffb3 	bl	8001044 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f7ff ffae 	bl	8001044 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f7ff ffa9 	bl	8001044 <LL_GPIO_ResetOutputPin>
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <decode_7seg>:




unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    if (chr > (unsigned char)'z')
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b7a      	cmp	r3, #122	; 0x7a
 8001106:	d901      	bls.n	800110c <decode_7seg+0x14>
        return 0x00;
 8001108:	2300      	movs	r3, #0
 800110a:	e003      	b.n	8001114 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3b30      	subs	r3, #48	; 0x30
 8001110:	4a03      	ldr	r2, [pc, #12]	; (8001120 <decode_7seg+0x28>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
    /* or */
//	return seven_seg_digits_decode_gfedcba[chr - '0'];
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	08002498 	.word	0x08002498

08001124 <display_symbol>:


void display_symbol(char symbol,int digit)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d822      	bhi.n	800117c <display_symbol+0x58>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <display_symbol+0x18>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001159 	.word	0x08001159
 8001144:	08001165 	.word	0x08001165
 8001148:	08001171 	.word	0x08001171
	switch (digit)
	{
	    case 0:
		    DIGIT_0_ON;
 800114c:	2120      	movs	r1, #32
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f7ff ff69 	bl	8001028 <LL_GPIO_SetOutputPin>
	      break;
 8001156:	e011      	b.n	800117c <display_symbol+0x58>

	    case 1:
	    	DIGIT_1_ON;
 8001158:	2110      	movs	r1, #16
 800115a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115e:	f7ff ff63 	bl	8001028 <LL_GPIO_SetOutputPin>
	      break;
 8001162:	e00b      	b.n	800117c <display_symbol+0x58>

	    case 2:
	    	DIGIT_2_ON;
 8001164:	2140      	movs	r1, #64	; 0x40
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f7ff ff5d 	bl	8001028 <LL_GPIO_SetOutputPin>
	      break;
 800116e:	e005      	b.n	800117c <display_symbol+0x58>

	    case 3:
	    	DIGIT_3_ON;
 8001170:	2104      	movs	r1, #4
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f7ff ff57 	bl	8001028 <LL_GPIO_SetOutputPin>
	      break;
 800117a:	bf00      	nop
	}



	char pomocna=symbol;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d103      	bne.n	8001196 <display_symbol+0x72>
		LL_GPIO_ResetOutputPin(segmentG_GPIO_Port, segmentG_Pin);
 800118e:	2110      	movs	r1, #16
 8001190:	4836      	ldr	r0, [pc, #216]	; (800126c <display_symbol+0x148>)
 8001192:	f7ff ff57 	bl	8001044 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 1;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d104      	bne.n	80011b8 <display_symbol+0x94>
		LL_GPIO_ResetOutputPin(segmentF_GPIO_Port, segmentF_Pin);
 80011ae:	2108      	movs	r1, #8
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f7ff ff46 	bl	8001044 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 2;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <display_symbol+0xb8>
		LL_GPIO_ResetOutputPin(segmentE_GPIO_Port, segmentE_Pin);
 80011d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f7ff ff34 	bl	8001044 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 3;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d103      	bne.n	80011fc <display_symbol+0xd8>
		LL_GPIO_ResetOutputPin(segmentD_GPIO_Port, segmentD_Pin);
 80011f4:	2120      	movs	r1, #32
 80011f6:	481d      	ldr	r0, [pc, #116]	; (800126c <display_symbol+0x148>)
 80011f8:	f7ff ff24 	bl	8001044 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 4;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <display_symbol+0xfc>
		LL_GPIO_ResetOutputPin(segmentC_GPIO_Port, segmentC_Pin);
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f7ff ff12 	bl	8001044 <LL_GPIO_ResetOutputPin>


	pomocna=symbol;
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 5;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d104      	bne.n	8001242 <display_symbol+0x11e>
		LL_GPIO_ResetOutputPin(segmentB_GPIO_Port, segmentB_Pin);
 8001238:	2101      	movs	r1, #1
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f7ff ff01 	bl	8001044 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 6;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d104      	bne.n	8001264 <display_symbol+0x140>
		LL_GPIO_ResetOutputPin(segmentA_GPIO_Port, segmentA_Pin);
 800125a:	2102      	movs	r1, #2
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f7ff fef0 	bl	8001044 <LL_GPIO_ResetOutputPin>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	48000400 	.word	0x48000400

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b598      	push	{r3, r4, r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fe47 	bl	8000f08 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800127a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800127e:	f7ff fe2b 	bl	8000ed8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f7ff fcea 	bl	8000c5c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001288:	f7ff fd0c 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 800128c:	4603      	mov	r3, r0
 800128e:	2200      	movs	r2, #0
 8001290:	210f      	movs	r1, #15
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fd3e 	bl	8000d14 <NVIC_EncodePriority>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff fd0e 	bl	8000cc0 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f7ff fcd9 	bl	8000c5c <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f86b 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f7ff f931 	bl	8000514 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b2:	f000 fabd 	bl	8001830 <MX_TIM2_Init>
  MX_I2C1_Init();
 80012b6:	f7ff fb73 	bl	80009a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 80012ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012be:	f7ff fe5d 	bl	8000f7c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80012c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012c6:	f7ff fe8a 	bl	8000fde <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lps25hb_init();
 80012ca:	f7fe ffb5 	bl	8000238 <lps25hb_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if(mode==0){
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <main+0xf8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <main+0x82>
		   strcpy(retazec, "TEMP_xx.x");
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <main+0xfc>)
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <main+0x100>)
 80012da:	cb03      	ldmia	r3!, {r0, r1}
 80012dc:	6010      	str	r0, [r2, #0]
 80012de:	6051      	str	r1, [r2, #4]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	8113      	strh	r3, [r2, #8]
		   length_retazec = strlen(retazec);
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <main+0xfc>)
 80012e6:	f7fe ff6f 	bl	80001c8 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <main+0x104>)
 80012f0:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==1){
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <main+0xf8>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10e      	bne.n	8001318 <main+0xa8>
		   strcpy(retazec, "HUM_xx");
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <main+0xfc>)
 80012fc:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <main+0x108>)
 80012fe:	6810      	ldr	r0, [r2, #0]
 8001300:	6018      	str	r0, [r3, #0]
 8001302:	8891      	ldrh	r1, [r2, #4]
 8001304:	7992      	ldrb	r2, [r2, #6]
 8001306:	8099      	strh	r1, [r3, #4]
 8001308:	719a      	strb	r2, [r3, #6]
		   length_retazec = strlen(retazec);
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <main+0xfc>)
 800130c:	f7fe ff5c 	bl	80001c8 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <main+0x104>)
 8001316:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==2){
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <main+0xf8>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d10d      	bne.n	800133c <main+0xcc>
		   strcpy(retazec, "BAR_xxxx.xx");
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <main+0xfc>)
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <main+0x10c>)
 8001324:	4614      	mov	r4, r2
 8001326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001328:	6020      	str	r0, [r4, #0]
 800132a:	6061      	str	r1, [r4, #4]
 800132c:	60a2      	str	r2, [r4, #8]
		   length_retazec = strlen(retazec);
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <main+0xfc>)
 8001330:	f7fe ff4a 	bl	80001c8 <strlen>
 8001334:	4603      	mov	r3, r0
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <main+0x104>)
 800133a:	701a      	strb	r2, [r3, #0]

	   }
	   if(mode==3){
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <main+0xf8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d1c4      	bne.n	80012ce <main+0x5e>
		   strcpy(retazec, "ALT_xxxx.x");
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <main+0xfc>)
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <main+0x110>)
 8001348:	cb03      	ldmia	r3!, {r0, r1}
 800134a:	6010      	str	r0, [r2, #0]
 800134c:	6051      	str	r1, [r2, #4]
 800134e:	8819      	ldrh	r1, [r3, #0]
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	8111      	strh	r1, [r2, #8]
 8001354:	7293      	strb	r3, [r2, #10]
		   length_retazec = strlen(retazec);
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <main+0xfc>)
 8001358:	f7fe ff36 	bl	80001c8 <strlen>
 800135c:	4603      	mov	r3, r0
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <main+0x104>)
 8001362:	701a      	strb	r2, [r3, #0]
	   if(mode==0){
 8001364:	e7b3      	b.n	80012ce <main+0x5e>
 8001366:	bf00      	nop
 8001368:	20000026 	.word	0x20000026
 800136c:	2000003c 	.word	0x2000003c
 8001370:	0800246c 	.word	0x0800246c
 8001374:	20000027 	.word	0x20000027
 8001378:	08002478 	.word	0x08002478
 800137c:	08002480 	.word	0x08002480
 8001380:	0800248c 	.word	0x0800248c

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fdd5 	bl	8000f38 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800138e:	bf00      	nop
 8001390:	f7ff fde6 	bl	8000f60 <LL_FLASH_GetLatency>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1fa      	bne.n	8001390 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800139a:	f7ff fcef 	bl	8000d7c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800139e:	bf00      	nop
 80013a0:	f7ff fcfc 	bl	8000d9c <LL_RCC_HSI_IsReady>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d1fa      	bne.n	80013a0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80013aa:	2010      	movs	r0, #16
 80013ac:	f7ff fd08 	bl	8000dc0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd3d 	bl	8000e30 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fd4e 	bl	8000e58 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fd5f 	bl	8000e80 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fd12 	bl	8000dec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80013c8:	bf00      	nop
 80013ca:	f7ff fd23 	bl	8000e14 <LL_RCC_GetSysClkSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1fa      	bne.n	80013ca <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <SystemClock_Config+0x68>)
 80013d6:	f000 ffd5 	bl	8002384 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <SystemClock_Config+0x68>)
 80013dc:	f001 f806 	bl	80023ec <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80013e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80013e4:	f7ff fd60 	bl	8000ea8 <LL_RCC_SetI2CClockSource>
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	007a1200 	.word	0x007a1200

080013f0 <checkButtonState>:

/* USER CODE BEGIN 4 */

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	460b      	mov	r3, r1
 8001404:	70bb      	strb	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	2300      	movs	r3, #0
 8001410:	73bb      	strb	r3, [r7, #14]

		while(button_state < samples_required && timeout < samples_window)
 8001412:	e021      	b.n	8001458 <checkButtonState+0x68>
		{
			if((LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_RISE)) || (!LL_GPIO_IsInputPinSet(PORT, PIN) && (edge==TRIGGER_FALL)))/*LL_GPIO_IsInputPinSet(PORT, PIN)*/
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	4619      	mov	r1, r3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fdf0 	bl	8000ffe <LL_GPIO_IsInputPinSet>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <checkButtonState+0x3a>
 8001424:	78bb      	ldrb	r3, [r7, #2]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d00a      	beq.n	8001440 <checkButtonState+0x50>
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	4619      	mov	r1, r3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fde5 	bl	8000ffe <LL_GPIO_IsInputPinSet>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <checkButtonState+0x58>
 800143a:	78bb      	ldrb	r3, [r7, #2]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d103      	bne.n	8001448 <checkButtonState+0x58>
			{
				button_state += 1;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e001      	b.n	800144c <checkButtonState+0x5c>
			}
			else
			{
				button_state = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
			}

			timeout += 1;
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	3301      	adds	r3, #1
 8001450:	73bb      	strb	r3, [r7, #14]
			LL_mDelay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f000 ffa4 	bl	80023a0 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	7e3b      	ldrb	r3, [r7, #24]
 800145c:	429a      	cmp	r2, r3
 800145e:	d203      	bcs.n	8001468 <checkButtonState+0x78>
 8001460:	7bba      	ldrb	r2, [r7, #14]
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3d5      	bcc.n	8001414 <checkButtonState+0x24>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	7e3b      	ldrb	r3, [r7, #24]
 800146c:	429a      	cmp	r2, r3
 800146e:	d305      	bcc.n	800147c <checkButtonState+0x8c>
 8001470:	7bba      	ldrb	r2, [r7, #14]
 8001472:	787b      	ldrb	r3, [r7, #1]
 8001474:	429a      	cmp	r2, r3
 8001476:	d801      	bhi.n	800147c <checkButtonState+0x8c>
		{
			return 1;
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <checkButtonState+0x8e>
		}
		else
		{
			return 0;
 800147c:	2300      	movs	r3, #0
		}
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <updateDisplay>:

void updateDisplay(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
//	for(uint8_t i = pos; i < pos+4; i++)
//	{

	resetDigits();
 800148e:	f7ff fe15 	bl	80010bc <resetDigits>
	resetSegments();
 8001492:	f7ff fde5 	bl	8001060 <resetSegments>

	char symbol = retazec[textposition+digit];
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <updateDisplay+0x58>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <updateDisplay+0x5c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <updateDisplay+0x60>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	71fb      	strb	r3, [r7, #7]
	char segments = decode_7seg(symbol);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe25 	bl	80010f8 <decode_7seg>
 80014ae:	4603      	mov	r3, r0
 80014b0:	71bb      	strb	r3, [r7, #6]
	display_symbol(segments, digit);
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <updateDisplay+0x5c>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe32 	bl	8001124 <display_symbol>

	digit = digit+1;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <updateDisplay+0x5c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <updateDisplay+0x5c>)
 80014c8:	6013      	str	r3, [r2, #0]
	if(digit >= 4)
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <updateDisplay+0x5c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	dd02      	ble.n	80014d8 <updateDisplay+0x50>
		digit=0;
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <updateDisplay+0x5c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

//		digit+=1;

//	}
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000034 	.word	0x20000034
 80014e4:	20000030 	.word	0x20000030
 80014e8:	2000003c 	.word	0x2000003c

080014ec <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	//1000 za s
	tim2count = tim2count + 1;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <TIM2_IRQHandler+0x7c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <TIM2_IRQHandler+0x7c>)
 80014f8:	6013      	str	r3, [r2, #0]
	if(tim2count >=500) {
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <TIM2_IRQHandler+0x7c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001502:	db22      	blt.n	800154a <TIM2_IRQHandler+0x5e>
		tim2count = 0; //2 krat za sekundu sa vykona tento if
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <TIM2_IRQHandler+0x7c>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

		//Posun textu
		if (orientation==0){
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <TIM2_IRQHandler+0x80>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10f      	bne.n	8001532 <TIM2_IRQHandler+0x46>
			textposition = textposition + 1;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <TIM2_IRQHandler+0x84>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <TIM2_IRQHandler+0x84>)
 800151a:	6013      	str	r3, [r2, #0]
			if((textposition+4)>=(length_retazec))
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <TIM2_IRQHandler+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3304      	adds	r3, #4
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <TIM2_IRQHandler+0x88>)
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	4293      	cmp	r3, r2
 8001528:	db0f      	blt.n	800154a <TIM2_IRQHandler+0x5e>
			    orientation=1;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <TIM2_IRQHandler+0x80>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00b      	b.n	800154a <TIM2_IRQHandler+0x5e>
		}

		else{
			textposition = textposition - 1;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <TIM2_IRQHandler+0x84>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <TIM2_IRQHandler+0x84>)
 800153a:	6013      	str	r3, [r2, #0]
			if((textposition)<=0)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <TIM2_IRQHandler+0x84>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dc02      	bgt.n	800154a <TIM2_IRQHandler+0x5e>
			    orientation=0;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <TIM2_IRQHandler+0x80>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
		}

	}

	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 800154a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800154e:	f7ff fd33 	bl	8000fb8 <LL_TIM_IsActiveFlag_UPDATE>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <TIM2_IRQHandler+0x70>
	{
		updateDisplay();
 8001558:	f7ff ff96 	bl	8001488 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 800155c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001560:	f7ff fd1c 	bl	8000f9c <LL_TIM_ClearFlag_UPDATE>


}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000028 	.word	0x20000028
 800156c:	2000002c 	.word	0x2000002c
 8001570:	20000034 	.word	0x20000034
 8001574:	20000027 	.word	0x20000027

08001578 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 800157e:	2314      	movs	r3, #20
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	231e      	movs	r3, #30
 8001584:	2200      	movs	r2, #0
 8001586:	2108      	movs	r1, #8
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <EXTI3_IRQHandler+0x54>)
 800158a:	f7ff ff31 	bl	80013f0 <checkButtonState>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d012      	beq.n	80015ba <EXTI3_IRQHandler+0x42>
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		//switch_state ^= 1;
		mode = mode+1;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <EXTI3_IRQHandler+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <EXTI3_IRQHandler+0x58>)
 800159e:	701a      	strb	r2, [r3, #0]
		if (mode > 3) {
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <EXTI3_IRQHandler+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d902      	bls.n	80015ae <EXTI3_IRQHandler+0x36>
			mode = 0;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <EXTI3_IRQHandler+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		}
		textposition = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <EXTI3_IRQHandler+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		orientation = 0;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <EXTI3_IRQHandler+0x60>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
	}

	/* Clear EXTI4 pending register flag */

		//type your code for pending register flag clear here:
	EXTI->PR |= (1 << 4);
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <EXTI3_IRQHandler+0x64>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <EXTI3_IRQHandler+0x64>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6153      	str	r3, [r2, #20]
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	48000400 	.word	0x48000400
 80015d0:	20000026 	.word	0x20000026
 80015d4:	20000034 	.word	0x20000034
 80015d8:	2000002c 	.word	0x2000002c
 80015dc:	40010400 	.word	0x40010400

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <LL_APB1_GRP1_EnableClock>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <LL_APB1_GRP1_EnableClock+0x2c>)
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <LL_APB1_GRP1_EnableClock+0x2c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_TIM_DisableARRPreload>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_TIM_SetClockSource>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_TIM_SetTriggerOutput>:
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_TIM_DisableMasterSlaveMode>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff ff93 	bl	8001770 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800184a:	f7ff ff07 	bl	800165c <__NVIC_GetPriorityGrouping>
 800184e:	4603      	mov	r3, r0
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff57 	bl	8001708 <NVIC_EncodePriority>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	201c      	movs	r0, #28
 8001860:	f7ff ff28 	bl	80016b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001864:	201c      	movs	r0, #28
 8001866:	f7ff ff07 	bl	8001678 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 800186a:	2307      	movs	r3, #7
 800186c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001884:	f000 fcf2 	bl	800226c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001888:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800188c:	f7ff ff88 	bl	80017a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001890:	2100      	movs	r1, #0
 8001892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001896:	f7ff ff93 	bl	80017c0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800189a:	2100      	movs	r1, #0
 800189c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a0:	f7ff ffa3 	bl	80017ea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80018a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a8:	f7ff ffb2 	bl	8001810 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ba:	490e      	ldr	r1, [pc, #56]	; (80018f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <LoopForever+0xe>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d0:	4c0b      	ldr	r4, [pc, #44]	; (8001900 <LoopForever+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018de:	f7ff feab 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f000 fd93 	bl	800240c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018e6:	f7ff fcc3 	bl	8001270 <main>

080018ea <LoopForever>:

LoopForever:
    b LoopForever
 80018ea:	e7fe      	b.n	80018ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80018f8:	080024ec 	.word	0x080024ec
  ldr r2, =_sbss
 80018fc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001900:	20000050 	.word	0x20000050

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_EXTI_EnableIT_0_31+0x20>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <LL_EXTI_EnableIT_0_31+0x20>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40010400 	.word	0x40010400

0800192c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_EXTI_EnableIT_32_63+0x20>)
 8001936:	6a1a      	ldr	r2, [r3, #32]
 8001938:	4904      	ldr	r1, [pc, #16]	; (800194c <LL_EXTI_EnableIT_32_63+0x20>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	620b      	str	r3, [r1, #32]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40010400 	.word	0x40010400

08001950 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LL_EXTI_DisableIT_0_31+0x24>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	43db      	mvns	r3, r3
 8001960:	4904      	ldr	r1, [pc, #16]	; (8001974 <LL_EXTI_DisableIT_0_31+0x24>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40010400 	.word	0x40010400

08001978 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LL_EXTI_DisableIT_32_63+0x24>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	43db      	mvns	r3, r3
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <LL_EXTI_DisableIT_32_63+0x24>)
 800198a:	4013      	ands	r3, r2
 800198c:	620b      	str	r3, [r1, #32]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40010400 	.word	0x40010400

080019a0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4904      	ldr	r1, [pc, #16]	; (80019c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40010400 	.word	0x40010400

080019c4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80019ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <LL_EXTI_DisableEvent_0_31+0x24>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <LL_EXTI_DisableEvent_0_31+0x24>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010400 	.word	0x40010400

08001a10 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40010400 	.word	0x40010400

08001a38 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4904      	ldr	r1, [pc, #16]	; (8001a58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]

}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40010400 	.word	0x40010400

08001a5c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a68:	4904      	ldr	r1, [pc, #16]	; (8001a7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40010400 	.word	0x40010400

08001a80 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]

}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	4904      	ldr	r1, [pc, #16]	; (8001acc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40010400 	.word	0x40010400

08001ad0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4904      	ldr	r1, [pc, #16]	; (8001af0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40010400 	.word	0x40010400

08001af4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40010400 	.word	0x40010400

08001b18 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4904      	ldr	r1, [pc, #16]	; (8001b3c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60cb      	str	r3, [r1, #12]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40010400 	.word	0x40010400

08001b40 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010400 	.word	0x40010400

08001b68 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a1b      	ldrb	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80cd 	beq.w	8001d18 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d061      	beq.n	8001c4a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7a5b      	ldrb	r3, [r3, #9]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d01c      	beq.n	8001bc8 <LL_EXTI_Init+0x60>
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	dc25      	bgt.n	8001bde <LL_EXTI_Init+0x76>
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <LL_EXTI_Init+0x34>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d00b      	beq.n	8001bb2 <LL_EXTI_Init+0x4a>
 8001b9a:	e020      	b.n	8001bde <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff21 	bl	80019e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff feac 	bl	8001908 <LL_EXTI_EnableIT_0_31>
          break;
 8001bb0:	e018      	b.n	8001be4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff feca 	bl	8001950 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff feed 	bl	80019a0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001bc6:	e00d      	b.n	8001be4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fe9b 	bl	8001908 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fee2 	bl	80019a0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001bdc:	e002      	b.n	8001be4 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
          break;
 8001be2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7a9b      	ldrb	r3, [r3, #10]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02e      	beq.n	8001c4a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7a9b      	ldrb	r3, [r3, #10]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d01c      	beq.n	8001c2e <LL_EXTI_Init+0xc6>
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	dc25      	bgt.n	8001c44 <LL_EXTI_Init+0xdc>
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d002      	beq.n	8001c02 <LL_EXTI_Init+0x9a>
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d00b      	beq.n	8001c18 <LL_EXTI_Init+0xb0>
 8001c00:	e020      	b.n	8001c44 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff86 	bl	8001b18 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff11 	bl	8001a38 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001c16:	e019      	b.n	8001c4c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff2f 	bl	8001a80 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff52 	bl	8001ad0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001c2c:	e00e      	b.n	8001c4c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff00 	bl	8001a38 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff47 	bl	8001ad0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001c42:	e003      	b.n	8001c4c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
            break;
 8001c48:	e000      	b.n	8001c4c <LL_EXTI_Init+0xe4>
        }
      }
 8001c4a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d076      	beq.n	8001d42 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7a5b      	ldrb	r3, [r3, #9]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d01c      	beq.n	8001c96 <LL_EXTI_Init+0x12e>
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dc25      	bgt.n	8001cac <LL_EXTI_Init+0x144>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <LL_EXTI_Init+0x102>
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d00b      	beq.n	8001c80 <LL_EXTI_Init+0x118>
 8001c68:	e020      	b.n	8001cac <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fece 	bl	8001a10 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fe57 	bl	800192c <LL_EXTI_EnableIT_32_63>
          break;
 8001c7e:	e018      	b.n	8001cb2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe77 	bl	8001978 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe98 	bl	80019c4 <LL_EXTI_EnableEvent_32_63>
          break;
 8001c94:	e00d      	b.n	8001cb2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe46 	bl	800192c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe8d 	bl	80019c4 <LL_EXTI_EnableEvent_32_63>
          break;
 8001caa:	e002      	b.n	8001cb2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
          break;
 8001cb0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7a9b      	ldrb	r3, [r3, #10]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d043      	beq.n	8001d42 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7a9b      	ldrb	r3, [r3, #10]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d01c      	beq.n	8001cfc <LL_EXTI_Init+0x194>
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	dc25      	bgt.n	8001d12 <LL_EXTI_Init+0x1aa>
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <LL_EXTI_Init+0x168>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d00b      	beq.n	8001ce6 <LL_EXTI_Init+0x17e>
 8001cce:	e020      	b.n	8001d12 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff33 	bl	8001b40 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff febc 	bl	8001a5c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001ce4:	e02e      	b.n	8001d44 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fedc 	bl	8001aa8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fefd 	bl	8001af4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001cfa:	e023      	b.n	8001d44 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff feab 	bl	8001a5c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fef2 	bl	8001af4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001d10:	e018      	b.n	8001d44 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
            break;
 8001d16:	e015      	b.n	8001d44 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe17 	bl	8001950 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fe5e 	bl	80019e8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe21 	bl	8001978 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe68 	bl	8001a10 <LL_EXTI_DisableEvent_32_63>
 8001d40:	e000      	b.n	8001d44 <LL_EXTI_Init+0x1dc>
      }
 8001d42:	bf00      	nop
#endif
  }
  return status;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <LL_GPIO_SetPinMode>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b089      	sub	sp, #36	; 0x24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa93 f3a3 	rbit	r3, r3
 8001d68:	613b      	str	r3, [r7, #16]
  return result;
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2103      	movs	r1, #3
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	61bb      	str	r3, [r7, #24]
  return result;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	601a      	str	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	3724      	adds	r7, #36	; 0x24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_GPIO_SetPinOutputType>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_GPIO_SetPinSpeed>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	613b      	str	r3, [r7, #16]
  return result;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2103      	movs	r1, #3
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	61bb      	str	r3, [r7, #24]
  return result;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	609a      	str	r2, [r3, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_GPIO_SetPinPull>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b089      	sub	sp, #36	; 0x24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	613b      	str	r3, [r7, #16]
  return result;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2103      	movs	r1, #3
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	61bb      	str	r3, [r7, #24]
  return result;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	60da      	str	r2, [r3, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3724      	adds	r7, #36	; 0x24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_GPIO_SetAFPin_0_7>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	613b      	str	r3, [r7, #16]
  return result;
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	61bb      	str	r3, [r7, #24]
  return result;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	621a      	str	r2, [r3, #32]
}
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_GPIO_SetAFPin_8_15>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b089      	sub	sp, #36	; 0x24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	613b      	str	r3, [r7, #16]
  return result;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	210f      	movs	r1, #15
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	61bb      	str	r3, [r7, #24]
  return result;
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f4c:	bf00      	nop
 8001f4e:	3724      	adds	r7, #36	; 0x24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	613b      	str	r3, [r7, #16]
  return result;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f7a:	e051      	b.n	8002020 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d043      	beq.n	800201a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d003      	beq.n	8001fa2 <LL_GPIO_Init+0x4a>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d10e      	bne.n	8001fc0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff16 	bl	8001ddc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fef6 	bl	8001dac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff36 	bl	8001e3a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d11a      	bne.n	800200c <LL_GPIO_Init+0xb4>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	60bb      	str	r3, [r7, #8]
  return result;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	d807      	bhi.n	8001ffe <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff4e 	bl	8001e98 <LL_GPIO_SetAFPin_0_7>
 8001ffc:	e006      	b.n	800200c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	461a      	mov	r2, r3
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff75 	bl	8001ef6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	461a      	mov	r2, r3
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fe9a 	bl	8001d4e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1a6      	bne.n	8001f7c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <LL_I2C_Enable>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_I2C_Disable>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0201 	bic.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_I2C_ConfigFilters>:
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0219      	lsls	r1, r3, #8
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	430b      	orrs	r3, r1
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_I2C_SetOwnAddress1>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020ba:	f023 0307 	bic.w	r3, r3, #7
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	609a      	str	r2, [r3, #8]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_I2C_EnableOwnAddress1>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_I2C_DisableOwnAddress1>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_I2C_SetTiming>:
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	611a      	str	r2, [r3, #16]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_I2C_SetMode>:
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_I2C_AcknowledgeNextData>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff65 	bl	8002058 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	461a      	mov	r2, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff6d 	bl	8002078 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ffb6 	bl	8002116 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff44 	bl	8002038 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffa0 	bl	80020f6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6919      	ldr	r1, [r3, #16]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	461a      	mov	r2, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff70 	bl	80020a6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ff81 	bl	80020d6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa9 	bl	8002132 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffb6 	bl	8002158 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <LL_TIM_SetPrescaler>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_TIM_SetAutoReload>:
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <LL_TIM_SetRepetitionCounter>:
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a2f      	ldr	r2, [pc, #188]	; (800233c <LL_TIM_Init+0xd0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <LL_TIM_Init+0x28>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d003      	beq.n	8002294 <LL_TIM_Init+0x28>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <LL_TIM_Init+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d106      	bne.n	80022a2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <LL_TIM_Init+0xd0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <LL_TIM_Init+0x66>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d00f      	beq.n	80022d2 <LL_TIM_Init+0x66>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <LL_TIM_Init+0xd4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <LL_TIM_Init+0x66>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <LL_TIM_Init+0xd8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <LL_TIM_Init+0x66>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a20      	ldr	r2, [pc, #128]	; (8002348 <LL_TIM_Init+0xdc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <LL_TIM_Init+0x66>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <LL_TIM_Init+0xe0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d106      	bne.n	80022e0 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff90 	bl	8002212 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff7c 	bl	80021f6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <LL_TIM_Init+0xd0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00b      	beq.n	800231e <LL_TIM_Init+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <LL_TIM_Init+0xd8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <LL_TIM_Init+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <LL_TIM_Init+0xdc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d003      	beq.n	800231e <LL_TIM_Init+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <LL_TIM_Init+0xe0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d105      	bne.n	800232a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff82 	bl	800222e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff8d 	bl	800224a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40000400 	.word	0x40000400
 8002344:	40014000 	.word	0x40014000
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800

08002350 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <LL_InitTick+0x30>)
 8002364:	3b01      	subs	r3, #1
 8002366:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <LL_InitTick+0x30>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <LL_InitTick+0x30>)
 8002370:	2205      	movs	r2, #5
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e010 	.word	0xe000e010

08002384 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800238c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffdd 	bl	8002350 <LL_InitTick>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <LL_mDelay+0x48>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80023ae:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d00c      	beq.n	80023d2 <LL_mDelay+0x32>
  {
    Delay++;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3301      	adds	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80023be:	e008      	b.n	80023d2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <LL_mDelay+0x48>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <LL_mDelay+0x32>
    {
      Delay--;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f3      	bne.n	80023c0 <LL_mDelay+0x20>
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <LL_SetSystemCoreClock+0x1c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000004 	.word	0x20000004

0800240c <__libc_init_array>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4d0d      	ldr	r5, [pc, #52]	; (8002444 <__libc_init_array+0x38>)
 8002410:	4c0d      	ldr	r4, [pc, #52]	; (8002448 <__libc_init_array+0x3c>)
 8002412:	1b64      	subs	r4, r4, r5
 8002414:	10a4      	asrs	r4, r4, #2
 8002416:	2600      	movs	r6, #0
 8002418:	42a6      	cmp	r6, r4
 800241a:	d109      	bne.n	8002430 <__libc_init_array+0x24>
 800241c:	4d0b      	ldr	r5, [pc, #44]	; (800244c <__libc_init_array+0x40>)
 800241e:	4c0c      	ldr	r4, [pc, #48]	; (8002450 <__libc_init_array+0x44>)
 8002420:	f000 f818 	bl	8002454 <_init>
 8002424:	1b64      	subs	r4, r4, r5
 8002426:	10a4      	asrs	r4, r4, #2
 8002428:	2600      	movs	r6, #0
 800242a:	42a6      	cmp	r6, r4
 800242c:	d105      	bne.n	800243a <__libc_init_array+0x2e>
 800242e:	bd70      	pop	{r4, r5, r6, pc}
 8002430:	f855 3b04 	ldr.w	r3, [r5], #4
 8002434:	4798      	blx	r3
 8002436:	3601      	adds	r6, #1
 8002438:	e7ee      	b.n	8002418 <__libc_init_array+0xc>
 800243a:	f855 3b04 	ldr.w	r3, [r5], #4
 800243e:	4798      	blx	r3
 8002440:	3601      	adds	r6, #1
 8002442:	e7f2      	b.n	800242a <__libc_init_array+0x1e>
 8002444:	080024e4 	.word	0x080024e4
 8002448:	080024e4 	.word	0x080024e4
 800244c:	080024e4 	.word	0x080024e4
 8002450:	080024e8 	.word	0x080024e8

08002454 <_init>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	bf00      	nop
 8002458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245a:	bc08      	pop	{r3}
 800245c:	469e      	mov	lr, r3
 800245e:	4770      	bx	lr

08002460 <_fini>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr
