
vrs_zadanie8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002010  08002010  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002010  08002010  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002010  08002010  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000030  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a63  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001705  00000000  00000000  00026a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  000281a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b8  00000000  00000000  00028910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016cd  00000000  00000000  00028fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005835  00000000  00000000  0002a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000756c3  00000000  00000000  0002feca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000a558d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e3c  00000000  00000000  000a55e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f94 	.word	0x08001f94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001f94 	.word	0x08001f94

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fab3 f383 	clz	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fa03 f202 	lsl.w	r2, r3, r2
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <LL_SYSCFG_SetEXTISource+0x58>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	430a      	orrs	r2, r1
 8000352:	3302      	adds	r3, #2
 8000354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40010000 	.word	0x40010000

08000368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa93 f3a3 	rbit	r3, r3
 8000382:	613b      	str	r3, [r7, #16]
  return result;
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	b2db      	uxtb	r3, r3
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b089      	sub	sp, #36	; 0x24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa93 f3a3 	rbit	r3, r3
 80003e0:	613b      	str	r3, [r7, #16]
  return result;
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	fab3 f383 	clz	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	fa93 f3a3 	rbit	r3, r3
 8000400:	61bb      	str	r3, [r7, #24]
  return result;
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	fab3 f383 	clz	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	431a      	orrs	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	3724      	adds	r7, #36	; 0x24
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000446:	f107 031c 	add.w	r3, r7, #28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
 8000460:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000462:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000466:	f7ff ff39 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800046a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800046e:	f7ff ff35 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8000472:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f7ff ffd3 	bl	8000424 <LL_GPIO_ResetOutputPin>
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segmentDP_Pin|segmentG_Pin|segmentD_Pin);
 800047e:	2132      	movs	r1, #50	; 0x32
 8000480:	482b      	ldr	r0, [pc, #172]	; (8000530 <MX_GPIO_Init+0xf0>)
 8000482:	f7ff ffcf 	bl	8000424 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segmentB_Pin|segmentA_Pin|digit3_Pin|segmentF_Pin
 8000486:	f640 13ff 	movw	r3, #2559	; 0x9ff
 800048a:	607b      	str	r3, [r7, #4]
                          |digit1_Pin|digit0_Pin|digit2_Pin|digitTime_Pin
                          |segmentC_Pin|segmentE_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800048c:	2301      	movs	r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f001 faf8 	bl	8001a98 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segmentDP_Pin|segmentG_Pin|segmentD_Pin;
 80004a8:	2332      	movs	r3, #50	; 0x32
 80004aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ac:	2301      	movs	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	4619      	mov	r1, r3
 80004c0:	481b      	ldr	r0, [pc, #108]	; (8000530 <MX_GPIO_Init+0xf0>)
 80004c2:	f001 fae9 	bl	8001a98 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 80004c6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 80004ca:	2001      	movs	r0, #1
 80004cc:	f7ff ff1e 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(btn_GPIO_Port, btn_Pin, LL_GPIO_PULL_UP);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	4816      	ldr	r0, [pc, #88]	; (8000530 <MX_GPIO_Init+0xf0>)
 80004d6:	f7ff ff76 	bl	80003c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(btn_GPIO_Port, btn_Pin, LL_GPIO_MODE_INPUT);
 80004da:	2200      	movs	r2, #0
 80004dc:	2108      	movs	r1, #8
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <MX_GPIO_Init+0xf0>)
 80004e0:	f7ff ff42 	bl	8000368 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80004e4:	2308      	movs	r3, #8
 80004e6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004ec:	2301      	movs	r3, #1
 80004ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004f8:	2302      	movs	r3, #2
 80004fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f8d0 	bl	80016a8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000508:	f7ff fe5e 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800050c:	4603      	mov	r3, r0
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff feae 	bl	8000274 <NVIC_EncodePriority>
 8000518:	4603      	mov	r3, r0
 800051a:	4619      	mov	r1, r3
 800051c:	2009      	movs	r0, #9
 800051e:	f7ff fe7f 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000522:	2009      	movs	r0, #9
 8000524:	f7ff fe5e 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000528:	bf00      	nop
 800052a:	3728      	adds	r7, #40	; 0x28
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48000400 	.word	0x48000400

08000534 <__NVIC_GetPriorityGrouping>:
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <__NVIC_GetPriorityGrouping+0x18>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	f003 0307 	and.w	r3, r3, #7
}
 8000542:	4618      	mov	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_EnableIRQ>:
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	db0b      	blt.n	800057a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 021f 	and.w	r2, r3, #31
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <__NVIC_EnableIRQ+0x38>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	095b      	lsrs	r3, r3, #5
 8000570:	2001      	movs	r0, #1
 8000572:	fa00 f202 	lsl.w	r2, r0, r2
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000e100 	.word	0xe000e100

0800058c <__NVIC_SetPriority>:
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db0a      	blt.n	80005b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	490c      	ldr	r1, [pc, #48]	; (80005d8 <__NVIC_SetPriority+0x4c>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	0112      	lsls	r2, r2, #4
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005b4:	e00a      	b.n	80005cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <__NVIC_SetPriority+0x50>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	3b04      	subs	r3, #4
 80005c4:	0112      	lsls	r2, r2, #4
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	440b      	add	r3, r1
 80005ca:	761a      	strb	r2, [r3, #24]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <NVIC_EncodePriority>:
{
 80005e0:	b480      	push	{r7}
 80005e2:	b089      	sub	sp, #36	; 0x24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	f1c3 0307 	rsb	r3, r3, #7
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	bf28      	it	cs
 80005fe:	2304      	movcs	r3, #4
 8000600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3304      	adds	r3, #4
 8000606:	2b06      	cmp	r3, #6
 8000608:	d902      	bls.n	8000610 <NVIC_EncodePriority+0x30>
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3b03      	subs	r3, #3
 800060e:	e000      	b.n	8000612 <NVIC_EncodePriority+0x32>
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	43da      	mvns	r2, r3
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	401a      	ands	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000628:	f04f 31ff 	mov.w	r1, #4294967295
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43d9      	mvns	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	4313      	orrs	r3, r2
}
 800063a:	4618      	mov	r0, r3
 800063c:	3724      	adds	r7, #36	; 0x24
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b085      	sub	sp, #20
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80006ba:	f023 0306 	bic.w	r3, r3, #6
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	431a      	orrs	r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	60da      	str	r2, [r3, #12]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	2b04      	cmp	r3, #4
 8000708:	d101      	bne.n	800070e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800070a:	2301      	movs	r3, #1
 800070c:	e000      	b.n	8000710 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	605a      	str	r2, [r3, #4]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	b2db      	uxtb	r3, r3
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <LL_AHB1_GRP1_EnableClock>:
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4313      	orrs	r3, r2
 800076a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000

08000788 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000792:	69da      	ldr	r2, [r3, #28]
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4013      	ands	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007e6:	f7ff ffb7 	bl	8000758 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80007ea:	23c0      	movs	r3, #192	; 0xc0
 80007ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80007f6:	2301      	movs	r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80007fe:	2304      	movs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4821      	ldr	r0, [pc, #132]	; (800088c <MX_I2C1_Init+0xd4>)
 8000808:	f001 f946 	bl	8001a98 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800080c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000810:	f7ff ffba 	bl	8000788 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000814:	f7ff fe8e 	bl	8000534 <__NVIC_GetPriorityGrouping>
 8000818:	4603      	mov	r3, r0
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fede 	bl	80005e0 <NVIC_EncodePriority>
 8000824:	4603      	mov	r3, r0
 8000826:	4619      	mov	r1, r3
 8000828:	201f      	movs	r0, #31
 800082a:	f7ff feaf 	bl	800058c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800082e:	201f      	movs	r0, #31
 8000830:	f7ff fe8e 	bl	8000550 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <MX_I2C1_Init+0xd8>)
 8000836:	f7ff ff71 	bl	800071c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <MX_I2C1_Init+0xd8>)
 800083c:	f7ff ff4b 	bl	80006d6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000840:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_I2C1_Init+0xd8>)
 8000842:	f7ff ff20 	bl	8000686 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <MX_I2C1_Init+0xd8>)
 8000848:	f7ff ff0d 	bl	8000666 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_I2C1_Init+0xdc>)
 8000852:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000860:	2300      	movs	r3, #0
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_I2C1_Init+0xd8>)
 8000870:	f001 fa25 	bl	8001cbe <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_I2C1_Init+0xd8>)
 800087a:	f7ff ff14 	bl	80006a6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_I2C1_Init+0xd8>)
 8000880:	f7ff fee1 	bl	8000646 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	; 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	48000400 	.word	0x48000400
 8000890:	40005400 	.word	0x40005400
 8000894:	2000090e 	.word	0x2000090e

08000898 <I2C1_EV_IRQHandler>:
	return aReceiveBuffer_read;
}


void I2C1_EV_IRQHandler(void)
{
 8000898:	b598      	push	{r3, r4, r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <I2C1_EV_IRQHandler+0x50>)
 800089e:	f7ff ff2a 	bl	80006f6 <LL_I2C_IsActiveFlag_RXNE>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d01c      	beq.n	80008e2 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <I2C1_EV_IRQHandler+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <I2C1_EV_IRQHandler+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	1c59      	adds	r1, r3, #1
 80008b4:	b2c8      	uxtb	r0, r1
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <I2C1_EV_IRQHandler+0x58>)
 80008b8:	7008      	strb	r0, [r1, #0]
 80008ba:	18d4      	adds	r4, r2, r3
 80008bc:	480a      	ldr	r0, [pc, #40]	; (80008e8 <I2C1_EV_IRQHandler+0x50>)
 80008be:	f7ff ff3d 	bl	800073c <LL_I2C_ReceiveData8>
 80008c2:	4603      	mov	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <I2C1_EV_IRQHandler+0x58>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b13      	cmp	r3, #19
 80008ce:	d903      	bls.n	80008d8 <I2C1_EV_IRQHandler+0x40>
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <I2C1_EV_IRQHandler+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e001      	b.n	80008dc <I2C1_EV_IRQHandler+0x44>
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <I2C1_EV_IRQHandler+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <I2C1_EV_IRQHandler+0x5c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	}
}
 80008e2:	bf00      	nop
 80008e4:	bd98      	pop	{r3, r4, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40005400 	.word	0x40005400
 80008ec:	2000002c 	.word	0x2000002c
 80008f0:	20000021 	.word	0x20000021
 80008f4:	20000020 	.word	0x20000020

080008f8 <__NVIC_SetPriorityGrouping>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <LL_RCC_HSI_Enable+0x1c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <LL_RCC_HSI_Enable+0x1c>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <LL_RCC_HSI_IsReady+0x20>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4904      	ldr	r1, [pc, #16]	; (8000a84 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a72:	4313      	orrs	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <LL_RCC_SetSysClkSource+0x24>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f023 0203 	bic.w	r2, r3, #3
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <LL_RCC_SetSysClkSource+0x24>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <LL_RCC_GetSysClkSource+0x18>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 030c 	and.w	r3, r3, #12
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	604b      	str	r3, [r1, #4]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000

08000af4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b04:	4904      	ldr	r1, [pc, #16]	; (8000b18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000b2c:	4904      	ldr	r1, [pc, #16]	; (8000b40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000

08000b44 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <LL_RCC_SetI2CClockSource+0x2c>)
 8000b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	0e1b      	lsrs	r3, r3, #24
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000b5e:	4904      	ldr	r1, [pc, #16]	; (8000b70 <LL_RCC_SetI2CClockSource+0x2c>)
 8000b60:	4313      	orrs	r3, r2
 8000b62:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000

08000b74 <LL_APB1_GRP1_EnableClock>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b7e:	69da      	ldr	r2, [r3, #28]
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b8a:	69da      	ldr	r2, [r3, #28]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bae:	699a      	ldr	r2, [r3, #24]
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bba:	699a      	ldr	r2, [r3, #24]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <LL_FLASH_SetLatency+0x24>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f023 0207 	bic.w	r2, r3, #7
 8000be4:	4904      	ldr	r1, [pc, #16]	; (8000bf8 <LL_FLASH_SetLatency+0x24>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40022000 	.word	0x40022000

08000bfc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <LL_FLASH_GetLatency+0x18>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0307 	and.w	r3, r3, #7
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f06f 0201 	mvn.w	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60da      	str	r2, [r3, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_GPIO_SetOutputPin>:
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	619a      	str	r2, [r3, #24]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <LL_GPIO_ResetOutputPin>:
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <resetSegments>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void resetSegments(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f7ff ffdb 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f7ff ffd5 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <resetSegments+0x58>)
 8000cf4:	f7ff ffd1 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <resetSegments+0x58>)
 8000cfc:	f7ff ffcd 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d00:	2110      	movs	r1, #16
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <resetSegments+0x58>)
 8000d04:	f7ff ffc9 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f7ff ffc4 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000d12:	2102      	movs	r1, #2
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f7ff ffbf 	bl	8000c9a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f7ff ffba 	bl	8000c9a <LL_GPIO_SetOutputPin>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	48000400 	.word	0x48000400

08000d30 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000d34:	2104      	movs	r1, #4
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f7ff ffbc 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000d3e:	2120      	movs	r1, #32
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f7ff ffb7 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000d48:	2110      	movs	r1, #16
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f7ff ffb2 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f7ff ffad 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f7ff ffa8 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <decode_7seg>:




unsigned char decode_7seg(unsigned char chr)
{ /* Implementation uses ASCII */
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    if (chr > (unsigned char)'z')
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b7a      	cmp	r3, #122	; 0x7a
 8000d7a:	d901      	bls.n	8000d80 <decode_7seg+0x14>
        return 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e003      	b.n	8000d88 <decode_7seg+0x1c>
    return seven_seg_digits_decode_abcdefg[chr - '0'];
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	3b30      	subs	r3, #48	; 0x30
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <decode_7seg+0x28>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
    /* or */
//	return seven_seg_digits_decode_gfedcba[chr - '0'];
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	08001fac 	.word	0x08001fac

08000d98 <display_symbol>:


void display_symbol(char symbol,int digit)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d822      	bhi.n	8000df0 <display_symbol+0x58>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <display_symbol+0x18>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000dd9 	.word	0x08000dd9
 8000dbc:	08000de5 	.word	0x08000de5
	switch (digit)
	{
	    case 0:
		    DIGIT_0_ON;
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f7ff ff68 	bl	8000c9a <LL_GPIO_SetOutputPin>
	      break;
 8000dca:	e011      	b.n	8000df0 <display_symbol+0x58>

	    case 1:
	    	DIGIT_1_ON;
 8000dcc:	2110      	movs	r1, #16
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f7ff ff62 	bl	8000c9a <LL_GPIO_SetOutputPin>
	      break;
 8000dd6:	e00b      	b.n	8000df0 <display_symbol+0x58>

	    case 2:
	    	DIGIT_2_ON;
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f7ff ff5c 	bl	8000c9a <LL_GPIO_SetOutputPin>
	      break;
 8000de2:	e005      	b.n	8000df0 <display_symbol+0x58>

	    case 3:
	    	DIGIT_3_ON;
 8000de4:	2104      	movs	r1, #4
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f7ff ff56 	bl	8000c9a <LL_GPIO_SetOutputPin>
	      break;
 8000dee:	bf00      	nop
	}



	char pomocna=symbol;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <display_symbol+0x72>
		LL_GPIO_ResetOutputPin(segmentG_GPIO_Port, segmentG_Pin);
 8000e02:	2110      	movs	r1, #16
 8000e04:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <display_symbol+0x148>)
 8000e06:	f7ff ff56 	bl	8000cb6 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 1;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <display_symbol+0x94>
		LL_GPIO_ResetOutputPin(segmentF_GPIO_Port, segmentF_Pin);
 8000e22:	2108      	movs	r1, #8
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f7ff ff45 	bl	8000cb6 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 2;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d105      	bne.n	8000e50 <display_symbol+0xb8>
		LL_GPIO_ResetOutputPin(segmentE_GPIO_Port, segmentE_Pin);
 8000e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f7ff ff33 	bl	8000cb6 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 3;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	08db      	lsrs	r3, r3, #3
 8000e58:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d103      	bne.n	8000e70 <display_symbol+0xd8>
		LL_GPIO_ResetOutputPin(segmentD_GPIO_Port, segmentD_Pin);
 8000e68:	2120      	movs	r1, #32
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <display_symbol+0x148>)
 8000e6c:	f7ff ff23 	bl	8000cb6 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 4;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d105      	bne.n	8000e94 <display_symbol+0xfc>
		LL_GPIO_ResetOutputPin(segmentC_GPIO_Port, segmentC_Pin);
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f7ff ff11 	bl	8000cb6 <LL_GPIO_ResetOutputPin>


	pomocna=symbol;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 5;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d104      	bne.n	8000eb6 <display_symbol+0x11e>
		LL_GPIO_ResetOutputPin(segmentB_GPIO_Port, segmentB_Pin);
 8000eac:	2101      	movs	r1, #1
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f7ff ff00 	bl	8000cb6 <LL_GPIO_ResetOutputPin>



	pomocna=symbol;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	73fb      	strb	r3, [r7, #15]
	pomocna >>= 6;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	099b      	lsrs	r3, r3, #6
 8000ebe:	73fb      	strb	r3, [r7, #15]
	pomocna &= 1;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]

	if(pomocna==1)
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d104      	bne.n	8000ed8 <display_symbol+0x140>
		LL_GPIO_ResetOutputPin(segmentA_GPIO_Port, segmentA_Pin);
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f7ff feef 	bl	8000cb6 <LL_GPIO_ResetOutputPin>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fe5a 	bl	8000ba4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ef0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ef4:	f7ff fe3e 	bl	8000b74 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f7ff fcfd 	bl	80008f8 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000efe:	f7ff fd1f 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2200      	movs	r2, #0
 8000f06:	210f      	movs	r1, #15
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd51 	bl	80009b0 <NVIC_EncodePriority>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4619      	mov	r1, r3
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f7ff fd21 	bl	800095c <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f7ff fcec 	bl	80008f8 <__NVIC_SetPriorityGrouping>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f852 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f7ff fa8c 	bl	8000440 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f28:	f000 fa22 	bl	8001370 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f2c:	f7ff fc44 	bl	80007b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM2);
 8000f30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f34:	f7ff fe70 	bl	8000c18 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8000f38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f3c:	f7ff fe9d 	bl	8000c7a <LL_TIM_EnableIT_UPDATE>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  int length_retazec = sizeof(retazec)-1;
 8000f40:	2315      	movs	r3, #21
 8000f42:	607b      	str	r3, [r7, #4]
	    if (orientation==0){
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0xdc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11b      	bne.n	8000f84 <main+0xa0>
	    	for(int i=0;(i+4)<length_retazec;i++){
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	e013      	b.n	8000f7a <main+0x96>
	    		pos=i;
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <main+0xe0>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6013      	str	r3, [r2, #0]
	    		if((pos+4)==(length_retazec-1))
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <main+0xe0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1d1a      	adds	r2, r3, #4
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d102      	bne.n	8000f6c <main+0x88>
	    			orientation=1;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0xdc>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
	                LL_mDelay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f70:	f000 ffb6 	bl	8001ee0 <LL_mDelay>
	    	for(int i=0;(i+4)<length_retazec;i++){
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dce6      	bgt.n	8000f52 <main+0x6e>
	    	}
	    }

	    if(orientation==1){
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <main+0xdc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1d9      	bne.n	8000f40 <main+0x5c>
	    	for(int i=length_retazec-4;i>=0;i--){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	e010      	b.n	8000fb6 <main+0xd2>
	    	    pos=i;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <main+0xe0>)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	6013      	str	r3, [r2, #0]
	    	    if(pos==0)
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <main+0xe0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <main+0xc4>
	    	    	orientation=0;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <main+0xdc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	            LL_mDelay(500);
 8000fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fac:	f000 ff98 	bl	8001ee0 <LL_mDelay>
	    	for(int i=length_retazec-4;i>=0;i--){
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	daeb      	bge.n	8000f94 <main+0xb0>
  {
 8000fbc:	e7c0      	b.n	8000f40 <main+0x5c>
 8000fbe:	bf00      	nop
 8000fc0:	20000024 	.word	0x20000024
 8000fc4:	20000030 	.word	0x20000030

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fe01 	bl	8000bd4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff fe12 	bl	8000bfc <LL_FLASH_GetLatency>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1fa      	bne.n	8000fd4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000fde:	f7ff fd1b 	bl	8000a18 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff fd28 	bl	8000a38 <LL_RCC_HSI_IsReady>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d1fa      	bne.n	8000fe4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000fee:	2010      	movs	r0, #16
 8000ff0:	f7ff fd34 	bl	8000a5c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fd69 	bl	8000acc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fd7a 	bl	8000af4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fd8b 	bl	8000b1c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff fd3e 	bl	8000a88 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800100c:	bf00      	nop
 800100e:	f7ff fd4f 	bl	8000ab0 <LL_RCC_GetSysClkSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1fa      	bne.n	800100e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <SystemClock_Config+0x68>)
 800101a:	f000 ff53 	bl	8001ec4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <SystemClock_Config+0x68>)
 8001020:	f000 ff84 	bl	8001f2c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001024:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001028:	f7ff fd8c 	bl	8000b44 <LL_RCC_SetI2CClockSource>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	007a1200 	.word	0x007a1200

08001034 <updateDisplay>:

/* USER CODE BEGIN 4 */
void updateDisplay(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
//	for(uint8_t i = pos; i < pos+4; i++)
//	{

	resetDigits();
 800103a:	f7ff fe79 	bl	8000d30 <resetDigits>
	resetSegments();
 800103e:	f7ff fe49 	bl	8000cd4 <resetSegments>

	char symbol = retazec[pos+digit];
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <updateDisplay+0x58>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <updateDisplay+0x5c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <updateDisplay+0x60>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	71fb      	strb	r3, [r7, #7]
	char segments = decode_7seg(symbol);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe89 	bl	8000d6c <decode_7seg>
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]
	display_symbol(segments, digit);
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <updateDisplay+0x5c>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe96 	bl	8000d98 <display_symbol>

	digit = digit+1;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <updateDisplay+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <updateDisplay+0x5c>)
 8001074:	6013      	str	r3, [r2, #0]
	if(digit >= 4)
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <updateDisplay+0x5c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b03      	cmp	r3, #3
 800107c:	dd02      	ble.n	8001084 <updateDisplay+0x50>
		digit=0;
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <updateDisplay+0x5c>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

//		digit+=1;

//	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000030 	.word	0x20000030
 8001090:	20000028 	.word	0x20000028
 8001094:	08001ff8 	.word	0x08001ff8

08001098 <TIM2_IRQHandler>:

//Update displayed data and keep display ON
void TIM2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2))
 800109c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010a0:	f7ff fdd8 	bl	8000c54 <LL_TIM_IsActiveFlag_UPDATE>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <TIM2_IRQHandler+0x16>
	{
		updateDisplay();
 80010aa:	f7ff ffc3 	bl	8001034 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM2);
 80010ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010b2:	f7ff fdc1 	bl	8000c38 <LL_TIM_ClearFlag_UPDATE>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40010400 	.word	0x40010400

080010e8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6153      	str	r3, [r2, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40010400 	.word	0x40010400

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8001162:	2008      	movs	r0, #8
 8001164:	f7ff ffaa 	bl	80010bc <LL_EXTI_IsActiveFlag_0_31>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <EXTI3_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800116e:	2008      	movs	r0, #8
 8001170:	f7ff ffba 	bl	80010e8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <LL_APB1_GRP1_EnableClock>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000

080012e0 <LL_TIM_DisableARRPreload>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_TIM_SetClockSource>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001312:	f023 0307 	bic.w	r3, r3, #7
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	609a      	str	r2, [r3, #8]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_TIM_SetTriggerOutput>:
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_TIM_DisableMasterSlaveMode>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff ff93 	bl	80012b0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800138a:	f7ff ff07 	bl	800119c <__NVIC_GetPriorityGrouping>
 800138e:	4603      	mov	r3, r0
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff57 	bl	8001248 <NVIC_EncodePriority>
 800139a:	4603      	mov	r3, r0
 800139c:	4619      	mov	r1, r3
 800139e:	201c      	movs	r0, #28
 80013a0:	f7ff ff28 	bl	80011f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80013a4:	201c      	movs	r0, #28
 80013a6:	f7ff ff07 	bl	80011b8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 80013aa:	2307      	movs	r3, #7
 80013ac:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000;
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c4:	f000 fcf2 	bl	8001dac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80013c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013cc:	f7ff ff88 	bl	80012e0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80013d0:	2100      	movs	r1, #0
 80013d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013d6:	f7ff ff93 	bl	8001300 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80013da:	2100      	movs	r1, #0
 80013dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013e0:	f7ff ffa3 	bl	800132a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80013e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013e8:	f7ff ffb2 	bl	8001350 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800142c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490e      	ldr	r1, [pc, #56]	; (8001434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0b      	ldr	r4, [pc, #44]	; (8001440 <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800141e:	f7ff feab 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f000 fd93 	bl	8001f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001426:	f7ff fd5d 	bl	8000ee4 <main>

0800142a <LoopForever>:

LoopForever:
    b LoopForever
 800142a:	e7fe      	b.n	800142a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800142c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001438:	08002018 	.word	0x08002018
  ldr r2, =_sbss
 800143c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001440:	20000034 	.word	0x20000034

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>
	...

08001448 <LL_EXTI_EnableIT_0_31>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <LL_EXTI_EnableIT_0_31+0x20>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4904      	ldr	r1, [pc, #16]	; (8001468 <LL_EXTI_EnableIT_0_31+0x20>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40010400 	.word	0x40010400

0800146c <LL_EXTI_EnableIT_32_63>:
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <LL_EXTI_EnableIT_32_63+0x20>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4904      	ldr	r1, [pc, #16]	; (800148c <LL_EXTI_EnableIT_32_63+0x20>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4313      	orrs	r3, r2
 800147e:	620b      	str	r3, [r1, #32]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40010400 	.word	0x40010400

08001490 <LL_EXTI_DisableIT_0_31>:
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	43db      	mvns	r3, r3
 80014a0:	4904      	ldr	r1, [pc, #16]	; (80014b4 <LL_EXTI_DisableIT_0_31+0x24>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40010400 	.word	0x40010400

080014b8 <LL_EXTI_DisableIT_32_63>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <LL_EXTI_DisableIT_32_63+0x24>)
 80014c2:	6a1a      	ldr	r2, [r3, #32]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <LL_EXTI_DisableIT_32_63+0x24>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	620b      	str	r3, [r1, #32]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40010400 	.word	0x40010400

080014e0 <LL_EXTI_EnableEvent_0_31>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4904      	ldr	r1, [pc, #16]	; (8001500 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40010400 	.word	0x40010400

08001504 <LL_EXTI_EnableEvent_32_63>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <LL_EXTI_EnableEvent_32_63+0x20>)
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	4904      	ldr	r1, [pc, #16]	; (8001524 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <LL_EXTI_DisableEvent_0_31>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	43db      	mvns	r3, r3
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <LL_EXTI_DisableEvent_0_31+0x24>)
 800153a:	4013      	ands	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40010400 	.word	0x40010400

08001550 <LL_EXTI_DisableEvent_32_63>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <LL_EXTI_DisableEvent_32_63+0x24>)
 800155a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	43db      	mvns	r3, r3
 8001560:	4904      	ldr	r1, [pc, #16]	; (8001574 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001562:	4013      	ands	r3, r2
 8001564:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40010400 	.word	0x40010400

08001578 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4904      	ldr	r1, [pc, #16]	; (8001598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40010400 	.word	0x40010400

0800159c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80015a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a8:	4904      	ldr	r1, [pc, #16]	; (80015bc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40010400 	.word	0x40010400

080015c0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40010400 	.word	0x40010400

080015e8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40010400 	.word	0x40010400

08001610 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4904      	ldr	r1, [pc, #16]	; (8001630 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	60cb      	str	r3, [r1, #12]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40010400 	.word	0x40010400

08001634 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4313      	orrs	r3, r2
 8001646:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	43db      	mvns	r3, r3
 8001668:	4904      	ldr	r1, [pc, #16]	; (800167c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800166a:	4013      	ands	r3, r2
 800166c:	60cb      	str	r3, [r1, #12]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40010400 	.word	0x40010400

08001680 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	43db      	mvns	r3, r3
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001692:	4013      	ands	r3, r2
 8001694:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40010400 	.word	0x40010400

080016a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7a1b      	ldrb	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80cd 	beq.w	8001858 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d061      	beq.n	800178a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7a5b      	ldrb	r3, [r3, #9]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d01c      	beq.n	8001708 <LL_EXTI_Init+0x60>
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	dc25      	bgt.n	800171e <LL_EXTI_Init+0x76>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <LL_EXTI_Init+0x34>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d00b      	beq.n	80016f2 <LL_EXTI_Init+0x4a>
 80016da:	e020      	b.n	800171e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff21 	bl	8001528 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff feac 	bl	8001448 <LL_EXTI_EnableIT_0_31>
          break;
 80016f0:	e018      	b.n	8001724 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff feca 	bl	8001490 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff feed 	bl	80014e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001706:	e00d      	b.n	8001724 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fe9b 	bl	8001448 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fee2 	bl	80014e0 <LL_EXTI_EnableEvent_0_31>
          break;
 800171c:	e002      	b.n	8001724 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
          break;
 8001722:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7a9b      	ldrb	r3, [r3, #10]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d02e      	beq.n	800178a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7a9b      	ldrb	r3, [r3, #10]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d01c      	beq.n	800176e <LL_EXTI_Init+0xc6>
 8001734:	2b03      	cmp	r3, #3
 8001736:	dc25      	bgt.n	8001784 <LL_EXTI_Init+0xdc>
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <LL_EXTI_Init+0x9a>
 800173c:	2b02      	cmp	r3, #2
 800173e:	d00b      	beq.n	8001758 <LL_EXTI_Init+0xb0>
 8001740:	e020      	b.n	8001784 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff86 	bl	8001658 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff11 	bl	8001578 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001756:	e019      	b.n	800178c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff2f 	bl	80015c0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff52 	bl	8001610 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800176c:	e00e      	b.n	800178c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff00 	bl	8001578 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff47 	bl	8001610 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001782:	e003      	b.n	800178c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
            break;
 8001788:	e000      	b.n	800178c <LL_EXTI_Init+0xe4>
        }
      }
 800178a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d076      	beq.n	8001882 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7a5b      	ldrb	r3, [r3, #9]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d01c      	beq.n	80017d6 <LL_EXTI_Init+0x12e>
 800179c:	2b02      	cmp	r3, #2
 800179e:	dc25      	bgt.n	80017ec <LL_EXTI_Init+0x144>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <LL_EXTI_Init+0x102>
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d00b      	beq.n	80017c0 <LL_EXTI_Init+0x118>
 80017a8:	e020      	b.n	80017ec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fece 	bl	8001550 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe57 	bl	800146c <LL_EXTI_EnableIT_32_63>
          break;
 80017be:	e018      	b.n	80017f2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fe77 	bl	80014b8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fe98 	bl	8001504 <LL_EXTI_EnableEvent_32_63>
          break;
 80017d4:	e00d      	b.n	80017f2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe46 	bl	800146c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe8d 	bl	8001504 <LL_EXTI_EnableEvent_32_63>
          break;
 80017ea:	e002      	b.n	80017f2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
          break;
 80017f0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7a9b      	ldrb	r3, [r3, #10]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d043      	beq.n	8001882 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7a9b      	ldrb	r3, [r3, #10]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d01c      	beq.n	800183c <LL_EXTI_Init+0x194>
 8001802:	2b03      	cmp	r3, #3
 8001804:	dc25      	bgt.n	8001852 <LL_EXTI_Init+0x1aa>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d002      	beq.n	8001810 <LL_EXTI_Init+0x168>
 800180a:	2b02      	cmp	r3, #2
 800180c:	d00b      	beq.n	8001826 <LL_EXTI_Init+0x17e>
 800180e:	e020      	b.n	8001852 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff33 	bl	8001680 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff febc 	bl	800159c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001824:	e02e      	b.n	8001884 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fedc 	bl	80015e8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fefd 	bl	8001634 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800183a:	e023      	b.n	8001884 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff feab 	bl	800159c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fef2 	bl	8001634 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001850:	e018      	b.n	8001884 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
            break;
 8001856:	e015      	b.n	8001884 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe17 	bl	8001490 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe5e 	bl	8001528 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe21 	bl	80014b8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe68 	bl	8001550 <LL_EXTI_DisableEvent_32_63>
 8001880:	e000      	b.n	8001884 <LL_EXTI_Init+0x1dc>
      }
 8001882:	bf00      	nop
#endif
  }
  return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <LL_GPIO_SetPinMode>:
{
 800188e:	b480      	push	{r7}
 8001890:	b089      	sub	sp, #36	; 0x24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	613b      	str	r3, [r7, #16]
  return result;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fab3 f383 	clz	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2103      	movs	r1, #3
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	61bb      	str	r3, [r7, #24]
  return result;
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	601a      	str	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3724      	adds	r7, #36	; 0x24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_GPIO_SetPinOutputType>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	43db      	mvns	r3, r3
 8001900:	401a      	ands	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	431a      	orrs	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	605a      	str	r2, [r3, #4]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_GPIO_SetPinSpeed>:
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	613b      	str	r3, [r7, #16]
  return result;
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2103      	movs	r1, #3
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	61bb      	str	r3, [r7, #24]
  return result;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
}
 800196e:	bf00      	nop
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_GPIO_SetPinPull>:
{
 800197a:	b480      	push	{r7}
 800197c:	b089      	sub	sp, #36	; 0x24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
  return result;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2103      	movs	r1, #3
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	61bb      	str	r3, [r7, #24]
  return result;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	60da      	str	r2, [r3, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3724      	adds	r7, #36	; 0x24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_GPIO_SetAFPin_0_7>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	613b      	str	r3, [r7, #16]
  return result;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	210f      	movs	r1, #15
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	61bb      	str	r3, [r7, #24]
  return result;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	621a      	str	r2, [r3, #32]
}
 8001a2a:	bf00      	nop
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_GPIO_SetAFPin_8_15>:
{
 8001a36:	b480      	push	{r7}
 8001a38:	b089      	sub	sp, #36	; 0x24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	613b      	str	r3, [r7, #16]
  return result;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	210f      	movs	r1, #15
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	61bb      	str	r3, [r7, #24]
  return result;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	431a      	orrs	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a8c:	bf00      	nop
 8001a8e:	3724      	adds	r7, #36	; 0x24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	613b      	str	r3, [r7, #16]
  return result;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001aba:	e051      	b.n	8001b60 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d043      	beq.n	8001b5a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <LL_GPIO_Init+0x4a>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d10e      	bne.n	8001b00 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	69b9      	ldr	r1, [r7, #24]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff16 	bl	800191c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fef6 	bl	80018ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	461a      	mov	r2, r3
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff36 	bl	800197a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d11a      	bne.n	8001b4c <LL_GPIO_Init+0xb4>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	60bb      	str	r3, [r7, #8]
  return result;
 8001b22:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b07      	cmp	r3, #7
 8001b2c:	d807      	bhi.n	8001b3e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	461a      	mov	r2, r3
 8001b34:	69b9      	ldr	r1, [r7, #24]
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff4e 	bl	80019d8 <LL_GPIO_SetAFPin_0_7>
 8001b3c:	e006      	b.n	8001b4c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	461a      	mov	r2, r3
 8001b44:	69b9      	ldr	r1, [r7, #24]
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff75 	bl	8001a36 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	461a      	mov	r2, r3
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fe9a 	bl	800188e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1a6      	bne.n	8001abc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LL_I2C_Enable>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_I2C_Disable>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0201 	bic.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_I2C_ConfigFilters>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0219      	lsls	r1, r3, #8
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_I2C_SetOwnAddress1>:
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	609a      	str	r2, [r3, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_I2C_EnableOwnAddress1>:
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_I2C_DisableOwnAddress1>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_I2C_SetTiming>:
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	611a      	str	r2, [r3, #16]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_I2C_SetMode>:
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_I2C_AcknowledgeNextData>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	605a      	str	r2, [r3, #4]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff65 	bl	8001b98 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff6d 	bl	8001bb8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffb6 	bl	8001c56 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff44 	bl	8001b78 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffa0 	bl	8001c36 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff70 	bl	8001be6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ff81 	bl	8001c16 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa9 	bl	8001c72 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb6 	bl	8001c98 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <LL_TIM_SetPrescaler>:
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_TIM_SetAutoReload>:
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_TIM_SetRepetitionCounter>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	615a      	str	r2, [r3, #20]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <LL_TIM_Init+0xd0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <LL_TIM_Init+0x28>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d003      	beq.n	8001dd4 <LL_TIM_Init+0x28>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <LL_TIM_Init+0xd4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d106      	bne.n	8001de2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <LL_TIM_Init+0xd0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <LL_TIM_Init+0x66>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d00f      	beq.n	8001e12 <LL_TIM_Init+0x66>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <LL_TIM_Init+0xd4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <LL_TIM_Init+0x66>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <LL_TIM_Init+0xd8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <LL_TIM_Init+0x66>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <LL_TIM_Init+0xdc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <LL_TIM_Init+0x66>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <LL_TIM_Init+0xe0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d106      	bne.n	8001e20 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff90 	bl	8001d52 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff7c 	bl	8001d36 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LL_TIM_Init+0xd0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00b      	beq.n	8001e5e <LL_TIM_Init+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LL_TIM_Init+0xd8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <LL_TIM_Init+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <LL_TIM_Init+0xdc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <LL_TIM_Init+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <LL_TIM_Init+0xe0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d105      	bne.n	8001e6a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4619      	mov	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff82 	bl	8001d6e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff8d 	bl	8001d8a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40014000 	.word	0x40014000
 8001e88:	40014400 	.word	0x40014400
 8001e8c:	40014800 	.word	0x40014800

08001e90 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <LL_InitTick+0x30>)
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <LL_InitTick+0x30>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <LL_InitTick+0x30>)
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffdd 	bl	8001e90 <LL_InitTick>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <LL_mDelay+0x48>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001eee:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d00c      	beq.n	8001f12 <LL_mDelay+0x32>
  {
    Delay++;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001efe:	e008      	b.n	8001f12 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <LL_mDelay+0x48>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <LL_mDelay+0x32>
    {
      Delay--;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f3      	bne.n	8001f00 <LL_mDelay+0x20>
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <LL_SetSystemCoreClock+0x1c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <__libc_init_array>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	4d0d      	ldr	r5, [pc, #52]	; (8001f84 <__libc_init_array+0x38>)
 8001f50:	4c0d      	ldr	r4, [pc, #52]	; (8001f88 <__libc_init_array+0x3c>)
 8001f52:	1b64      	subs	r4, r4, r5
 8001f54:	10a4      	asrs	r4, r4, #2
 8001f56:	2600      	movs	r6, #0
 8001f58:	42a6      	cmp	r6, r4
 8001f5a:	d109      	bne.n	8001f70 <__libc_init_array+0x24>
 8001f5c:	4d0b      	ldr	r5, [pc, #44]	; (8001f8c <__libc_init_array+0x40>)
 8001f5e:	4c0c      	ldr	r4, [pc, #48]	; (8001f90 <__libc_init_array+0x44>)
 8001f60:	f000 f818 	bl	8001f94 <_init>
 8001f64:	1b64      	subs	r4, r4, r5
 8001f66:	10a4      	asrs	r4, r4, #2
 8001f68:	2600      	movs	r6, #0
 8001f6a:	42a6      	cmp	r6, r4
 8001f6c:	d105      	bne.n	8001f7a <__libc_init_array+0x2e>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f74:	4798      	blx	r3
 8001f76:	3601      	adds	r6, #1
 8001f78:	e7ee      	b.n	8001f58 <__libc_init_array+0xc>
 8001f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f7e:	4798      	blx	r3
 8001f80:	3601      	adds	r6, #1
 8001f82:	e7f2      	b.n	8001f6a <__libc_init_array+0x1e>
 8001f84:	08002010 	.word	0x08002010
 8001f88:	08002010 	.word	0x08002010
 8001f8c:	08002010 	.word	0x08002010
 8001f90:	08002014 	.word	0x08002014

08001f94 <_init>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr

08001fa0 <_fini>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	bf00      	nop
 8001fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fa6:	bc08      	pop	{r3}
 8001fa8:	469e      	mov	lr, r3
 8001faa:	4770      	bx	lr
